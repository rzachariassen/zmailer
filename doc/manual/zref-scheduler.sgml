<!-- <!DOCTYPE chapter PUBLIC    "-//OASIS//DTD DocBook V3.1//EN"> -->

<CHAPTER ID="ZREF-SCHEDULER"><?dbhtml filename="zref-scheduler.html">
<TITLE><COMMAND>Scheduler</> Reference</TITLE>

<PARA>
The <COMMAND>scheduler</> daemon manages the delivery processing
of messages in ZMailer.
</PARA>

<PARA>
The <COMMAND>router</> creates message control files in the
<FILENAME CLASS="DIRECTORY">$<VARNAME>POSTOFFICE</>/transport/</>
directory.
These refer to  the original message files in the
<FILENAME CLASS="DIRECTORY">$<VARNAME>POSTOFFICE</>/queue/</>
directory.
</PARA>

<PARA>
The <COMMAND>scheduler</> reads each message control file from
<FILENAME CLASS="DIRECTORY">$<VARNAME>POSTOFFICE</>/transport/</>,
translates the contained message and destination information into
internal data structures.
</PARA>

<PARA>
Based on scheduling, priority, and execution information read from a
configuration file, the <COMMAND>scheduler</> arranges to execute
<EMPHASIS>Transport Agents</> relevant to the queued messages.
</PARA>

<PARA>
At the time scheduled for a particular transport agent invocation,
the <COMMAND>scheduler</> will start a transport agent (or use one
from idle-pool), and tell it one by one which message control files
to process.
When all the destination addresses in a message have been processed,
the <COMMAND>scheduler</> performs error reporting tasks if any,
and then deletes the message control file in
<FILENAME CLASS="DIRECTORY">$<VARNAME>POSTOFFICE</>/transport/</> and 
the original message file in
<FILENAME CLASS="DIRECTORY">$<VARNAME>POSTOFFICE</>/queue/</>.
</PARA>

<PARA>
All message delivery is actually performed by <EMPHASIS>Transport Agents</>,
which are declared in a configuration file for the <COMMAND>scheduler</>.
Each transport agent is executed with the same current directory as the
<COMMAND>scheduler</>.
The <EMPHASIS>scheduler-transporter</> interaction protocol is described later.
</PARA>

<PARA>
The standard output of each transport agent are destination address
delivery reports; either successful delivery, unsuccessful delivery,
or deferral of the address.
Each report uses byte offsets in the message control file to refer to
the address.
Reports may also include a comment line which will be displayed in
the reports of the <COMMAND>scheduler</>.
</PARA>

<PARA>
Two types of reports are produced:
<ORDEREDLIST NUMERATION="ARABIC">
<LISTITEM><PARA>
 Error messages caused by unsuccessful delivery of a message are appended
to its message control file.
 Occasionally, for example, when all addresses have been processed,
the <COMMAND>scheduler</> generates an error message to the error
return address of the message (usually the original sender).
</PARA></LISTITEM>

<LISTITEM><PARA>
 The <COMMAND>scheduler</> binds itself to a well-known TCP/IP port 
(<EMPHASIS>MAILQ, TCP port 174</>) on startup.
 Any connections to this port are processed synchronously in the
<COMMAND>scheduler</> at points in the execution where the state
is internally consistent.
 The <COMMAND>scheduler</> simply dumps its internal state in a terse format
to the TCP stream.
 It is expected that the client program will reconstruct the data structures
sufficiently to give a user a good idea of what the scheduler thinks the world
looks like.
 The <EMPHASIS>mailq</>(1) program serves this purpose.
</PARA></LISTITEM>
</ORDEREDLIST>
</PARA>

<VARIABLELIST>
<VARLISTENTRY><TERM>Usage:</TERM><LISTITEM><PARA>
Invoking <COMMAND>scheduler</> without any parameter will start
it as a daemon.
<CMDSYNOPSIS>
 <COMMAND>scheduler</>
 <ARG>-dinvFHQSVW</>
 <ARG>-E newentsmax</>
 <ARG>-f configfile</>
 <ARG>-l statisticslog</>
 <ARG>-L logfile</>
 <ARG>-N transpmaxfno</>
 <ARG>-p channel/host-pair</>
 <ARG>-P postoffice</>
 <ARG>-q rendezvous</>
 <ARG>-R maxforkfreq</>
</CMDSYNOPSIS>
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM>Parameters:</TERM><LISTITEM>

<VARIABLELIST>
<VARLISTENTRY><TERM><OPTION>-d</OPTION></TERM><LISTITEM><PARA>
run as a daemon, usually used after -v to log daemon activity 
in great detail.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-E <REPLACEABLE>newentsmax</></OPTION></TERM><LISTITEM><PARA>
when globbing new tasks from the directory, pick only first
<OPTION><REPLACEABLE>newentsmax</></> of them, and leave rest
for a latter scan run.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-f <REPLACEABLE>configfile</></OPTION></TERM><LISTITEM><PARA>
overrides the default configuration file
<FILENAME>$<VARNAME>MAILSHARE</>/scheduler.cf</>.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-F</OPTION></TERM><LISTITEM><PARA>
Freeze -- don't actually run anything, just do queue scanning.
(For debug purposes..)
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-H -HH</OPTION></TERM><LISTITEM><PARA>
Use multi-level hashing at the spool directories.
This will efficiently reduce the lengths of the scans at the directories
to find some arbitary file in them.
One ``<OPTION>H</>'' means <EMPHASIS>single level hashing</>,
two ``<OPTION>HH</>'' mean <EMPHASIS>dual level hashing</>.
<EMPHASIS>Hash</> is directory which name is single upper case alphabet (A-Z).
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-i</OPTION></TERM><LISTITEM><PARA>
run interactively, i.e., not as a daemon.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-l <REPLACEABLE>statisticslog</></OPTION></TERM><LISTITEM><PARA>
starts the appending of delivery statistics information (ASCII form)
into given file.  No default value.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-L <REPLACEABLE>logfile</></OPTION></TERM><LISTITEM><PARA>
overrides the default log file location 
<FILENAME>$<VARNAME>LOGDIR</>/scheduler</>.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-n</OPTION></TERM><LISTITEM><PARA>
Toggles the configuration flag called ``default_full_content'', which defines
what will be ``DSN RET'' parameter assumed value in case the originator didn't
supply that parameter.
</PARA><PARA>
The default behaviour is similar to RET=FULL, while usage of this option is
equivalent of  RET=HDRS.
</PARA><PARA>
This option does not override originator supplied DSN RET parameter value.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-N <REPLACEABLE>transmaxfno</></OPTION></TERM><LISTITEM><PARA>
sets how many filehandles are allocated for the <COMMAND>scheduler</>'s
started children (if the system has adjustable resources.)
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-p <REPLACEABLE>channel/host</></OPTION></TERM><LISTITEM><PARA>
A debug option for running selectively some thread under a single instance
of the scheduler.
</PARA><PARA>
Use this option with ``<OPTION>-v</>''.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-P <REPLACEABLE>postoffice</></OPTION></TERM><LISTITEM><PARA>
specifies an alternate <FILENAME CLASS=DIRECTORY>$<VARNAME>POSTOFFICE</>/</>
 directory.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-q <REPLACEABLE>rendezvous</></OPTION></TERM><LISTITEM><PARA>
the rendezvous between machines without TCP/IP networking,
</PARA><PARA>
<COMMAND>Scheduler</> and <COMMAND>mailq(1)</> is done using a well-known
named pipe. 
This option overrides the default location for this special file, either 
<FILENAME>$<VARNAME>RENDEZVOUS</></> or <FILENAME>/usr/tmp/.mailq.text</>.
(not used in real life; aspect of ZMailer's support for low-tech things..)
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-Q</OPTION></TERM><LISTITEM><PARA>
The ``<OPTION>Q</>'-mode, don't output the old style data into
the queue querier, only the new-style one.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-S</OPTION></TERM><LISTITEM><PARA>
Synchronous startup mode, scans all jobs at the directory before 
starting even the first transporter.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-v</OPTION></TERM><LISTITEM><PARA>
Verbose logging in interactive mode -- for debug uses.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-V</OPTION></TERM><LISTITEM><PARA>
Print version, and exit
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>-W</OPTION></TERM><LISTITEM><PARA>
Another option for debugging, delay the start of the verbose logging
until after all jobs have been scanned in, and it is time to start
the transporters. 
</PARA></LISTITEM></VARLISTENTRY>
</VARIABLELIST>

</LISTITEM></VARLISTENTRY>
</VARIABLELIST>


<SECT1 ID="zref.schedulerconfig"><TITLE>Configuration Language</TITLE>
<!--
<SCREEN>
\index{{\tt scheduler.conf} file}\index{scheduler, {\tt scheduler.conf}}
</SCREEN> -->

<PARA>
The <COMMAND>scheduler</> configuration file consists of a set of clauses. 
</PARA>

<PARA>
There are two kinds of clauses:
<ITEMIZEDLIST>
  <LISTITEM>
    <PARA>
      PARAM-entries
    </PARA>
  </LISTITEM>
  <LISTITEM>
    <PARA>
      Group-Clause selections
    </PARA>
  </LISTITEM>
</ITEMIZEDLIST>
</PARA>

<SECT2 ID="scheduler.param.entries"><TITLE>PARAM-entries</TITLE>

<PARA>
There are three kinds of PARAM entries, all of them start at the column
number 0 (left edge):
<SCREEN>
#
# MAILQv2 authentication database file reference:
# If you define this (like the default is), and the file exists,
# scheduler mailq interface goes to v2 mode.
# (Nonexistence of this file  A) leaves system running, B) uses MAILQv1
#  interface along with its security problems.)
#

PARAMauthfile = "${MAILSHARE}/scheduler.auth"

#PARAMmailqsock = "UNIX:/path/to/mailq.sock"
#PARAMmailqsock = "TCP:174"

# Time for accumulating diagnostic reports for a given message, before
# all said diagnostics are reported &dd; so that reports would carry more
# than one diagnostic in case of multi-recipient messages.
#PARAMglobal-report-interval = 15m
</SCREEN>
</PARA>

<PARA>
The <EMPHASIS>PARAMauthfile</> defines Scheduler's MAILQv2 authentication
file; more at <XREF LINKEND="zref.scheduler.auth.file">.
</PARA>

<PARA>
The <EMPHASIS>PARAMmailqsock</> defines non-standard socket for the MAILQv2,
the default is ``TCP:174'' meaning local host binding on wild-card address,
and port 174 of TCP.  Other ports and protocols can be set.
<EMPHASIS>The <COMMAND>mailq</> tool will <EMPHASIS ROLE="BOLD">not</> parse
 this file to know where to connect.</EMPHASIS>
</PARA>

<PARA>
The <EMPHASIS>PARAMglobal-report-interval</> is how often (or infrequently)
to run the scheduler's subtask of reporting so far accumulated diagnostics.
Original behaviour was to report diagnostics only when message timed out,
or last recipient was otherwise disposed of.
Current method is <EMPHASIS>somewhat</> quicker.
</PARA>

</SECT2>


<SECT2 ID=zref-sch-group-clause-selection>
<TITLE>Group-Clause selection</TITLE>

<PARA>
Each clause is selected by the pattern it starts with.
The patterns for the clauses are matched, in sequence, with
the <EMPHASIS>channel/host</> string for each recipient address.
When a clause pattern matches an address, the parameters set in the clause
will be applied to the <EMPHASIS>scheduler</>'s processing of that address.
If the clause specifies a command, the clause pattern matching sequence
is terminated.
</PARA>

<PARA>
This is a clause:
<SCREEN>
local/* interval=10s
        expiry=3h
        # want 20 channel slots in case of blockage on one
        maxchannel=20
        # want 20 thread-ring slots
        maxring=20
        command="mailbox -8"
</SCREEN>
</PARA>

<PARA>
A clause consists of:
<ITEMIZEDLIST>
<LISTITEM><PARA>
A selection pattern (in shell style) that is matched against the
<EMPHASIS>channel/host</> string for an address.
</PARA></LISTITEM>
<LISTITEM><PARA>
 0 or more variable assignments or keywords (described below).
</PARA></LISTITEM>
</ITEMIZEDLIST>
</PARA>

<PARA>
If the selection pattern does not contain a ``/'', it is assumed to be
a channel pattern and the host pattern is assumed to be the wildcard
``*''.
</PARA>

</SECT2>

<SECT2 ID=zref-sch-clause-components>
<TITLE>Clause components</TITLE>

<PARA>
The components of a clause are separated by whitespace.
The pattern introducing a clause must start in the first column of a line,
and the variable assignments or keywords inside a clause must not start in
the first column of a line.
This means a clause may be written both compactly all on one line,
or spread out with an assignment or keyword per line.
</PARA>

<PARA>
If the clause is empty (i.e., consists only of a pattern), then the
contents of the next non-empty clause will be used.
</PARA>

<PARA>
The typical configuration file will contain the following clauses:
<ITEMIZEDLIST>
<LISTITEM><PARA>
 a clause matching all addresses (using the pattern ``*/*'')
 that sets up default values.
</PARA></LISTITEM>
<LISTITEM><PARA>
 a clause matching the local delivery channel (usually ``local'').
</PARA></LISTITEM>
<LISTITEM><PARA>
 a clause matching the deferred delivery channel (usually ``hold'').
</PARA></LISTITEM>
<LISTITEM><PARA>
 a clause matching the error reporting channel (usually ``error'').
</PARA></LISTITEM>
<LISTITEM><PARA>
 clauses specific to the other channels known by the <COMMAND>router</>,
  for example, ``smtp'' and ``uucp''.
</PARA></LISTITEM>
</ITEMIZEDLIST>
</PARA>

<PARA>
The actual names of these channels are completely controlled by
the <COMMAND>router</> configuration file.
</PARA>

<PARA>
Empty lines, and lines whose first non-whitespace character is ``#'',
are ignored.
</PARA>

<PARA>
Variable values may be unquoted words or values or doublequoted strings.
Intervals (delta time) are specified using a concatenation of: numbers
suffixed with `s', `m', `h', or `d' modifiers designating the number as
a second, minute, hour, or day value. For example:
<SYNOPSIS>
   1h5m20s
</SYNOPSIS>
</PARA>

</SECT2>

<SECT2 ID=zref-sch-vars-and-keywords>
<TITLE>Variables and keywords</TITLE>

<PARA>
The known variables and keywords, and their typical values and semantics are:

<VARIABLELIST>
<VARLISTENTRY><TERM><OPTION>ageorder</OPTION></TERM><LISTITEM><PARA>
Default is to randomize the order of tasks at the queue, when it is started,
with this the order is that of the original spool-file MTIME.
Oldest first. 
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>bychannel</></TERM><LISTITEM><PARA>
is a keyword (with no associated value) that tells the <COMMAND>scheduler</>
that the transport agent specified in the command will only process destination
addresses that match the first destination channel it encounters.
This is automatically set when the string ``<OPTION>$channel</>'' occurs
in the command, but may also be specified manually by this keyword.
This is rarely used.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>command="sss"</></TERM><LISTITEM><PARA>
<!-- {\tt command (smtp -srl /var/log/smtp \$host)}  -->
is the command line used to start a transport agent to process the address.
The program pathname is specified relative to the
  <FILENAME CLASS=DIRECTORY>$<VARNAME>MAILBIN</>/ta/</> directory.
</PARA><PARA>
The string ``<OPTION>$channel</>'' is replaced by the current matched channel,
and ``<OPTION>$host</>'' replaced by the current matched host, from
the destination address.
</PARA><PARA>
It is strongly recommended that the ``<OPTION>$host</>'' is not to be used
on a command definition, as it limits the usability of idled transporter.
</PARA><PARA>
It is possible to place environment-string setting statements into the
beginning of the line:
<SCREEN>
  command="MALLOC_DEBUG_=1 OTHER=var cmdname cmdparams"
</SCREEN>
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>expiry=nn</> (3d)</TERM><LISTITEM><PARA>
specifies the maximum age of an address in the <COMMAND>scheduler</>
queue before a repeatedly deferred address is bounced with an expiration
error.
The actual report is produced when all addresses have been processed.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>group="sss"</> (daemon)</TERM><LISTITEM><PARA>
is the group id of a transport agent processing the address.
The value is either numeric (a gid) or a group name.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>idlemax=nn</> (3x interval)</TERM><LISTITEM><PARA>
When a transport agent runs out of jobs, they are moved to
<EMPHASIS>idle pool</>, and if a TA spends more than <OPTION>idlemax</> time
in there, it is terminated.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>interval=nn</> (1m)</TERM><LISTITEM><PARA>
specifies the primary retry interval, which determines how frequently
a transport agent should be scheduled for an address.
The value is a delta time specification.
This value, and the <OPTION>retries=&hellip;</> value mentioned below,
are combined to determine the interval between each retry attempt.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>maxchannel=nn</> (0)</TERM>
              <TERM>(<OPTION>maxchannels=nn</>)</TERM><LISTITEM><PARA>
if retrying an address would cause the number of simultaneously active
transport agents processing mail for the same channel to exceed the specified
value, the retry is postponed.
The check is repeated frequently so the address may be retried as soon
as possible after the scheduled retry interval.
If the value is 0, a value of 1000 is used instead.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>maxring=nn</> (0)</TERM>
	      <TERM>(<OPTION>maxrings=nn</>)</TERM><LISTITEM><PARA>
Recipients are groupped into
  <LINK LINKEND="zref.sched.threads"><EMPHASIS>threads</></>, 
and similar threads are groupped into <EMPHASIS>thread-rings</>, where same 
transport agent can be switched over from one recipient to another.
This defines how many transport agents can be running at any time at the ring.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>maxta=nn</> (0)</TERM><LISTITEM><PARA>
if retrying an address would cause the number of simultaneously active
transport agents to exceed the specified value, the retry is postponed.
The check is repeated frequently so the address may be retried as soon
as possible after the scheduled retry interval. 
If the value is 0, a value of 1000<FOOTNOTE><PARA>
The maximum number of supported TA's is actually probed by
the <COMMAND>scheduler</> at its startup; procedure is:
<ORDEREDLIST>
<LISTITEM><PARA>
Ask system for maximum number of file descriptors the scheduler's
child can have.
</PARA></LISTITEM>
<LISTITEM><PARA>
Substract ``30'' from resulting count.
</PARA></LISTITEM>
<LISTITEM><PARA>
If child communication channel needs two file descriptors
(no full-duplex pipe, e.g. <FUNCTION>socketpair()</> available),
divide the leftover count by two.
</PARA></LISTITEM>
<LISTITEM><PARA>
Result is the maximum number of TAs which document elsewere
refers as ``1000''.
</PARA></LISTITEM>
</ORDEREDLIST>
</PARA></FOOTNOTE> is used instead.

</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>maxthr=nn</> (1)</TERM><LISTITEM><PARA>
This limits the number of parallel transport agents within each thread; that
is, using higher value than default ``1''
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>nice=nn</></TERM><LISTITEM><PARA>
Defines <EMPHASIS>relative</> priority value for transport-agent process.
Default is not to use this.   Value range in between -40 to 40.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>overfeed=nnn</OPTION> (0)</TERM><LISTITEM><PARA>
Max number of tasks to feed from the thread to the transporter agent
 when feeding jobs to it.
The <COMMAND>scheduler</> main-loop at the <FUNCTION>mux()</> is
a bit sluggish, thus with this we can keep the transporters busy.
</PARA><PARA>
The default is defined at the <EMPHASIS>*/*</> clause.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>priority=nn</></TERM><LISTITEM><PARA>
Defines <EMPHASIS>absolute</> priority value for transport-agent process.
Default is not to use this.  Value range in between -20 to 20.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>queueonly</></TERM><LISTITEM><PARA>
a clause with <EMPHASIS>queueonly</> flag does not auto-start at the arrival
of a message, instead it must be started by means of <COMMAND>smtpserver(8)</>
command <USERINPUT>ETRN</> through an SMTP connection.
</PARA><PARA>
To have message expiration working, following additional entries are suggested:
<SCREEN>
  interval=1h
  retries="24"
</SCREEN>
That is, retry once in a day.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>reporttimes="n n n"</> ()</TERM><LISTITEM><PARA>
Placeholder for DELAYED reporting mechanism.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>retries="n n n"</> (1 1 2 3 4 8 13 21 34)</TERM><LISTITEM><PARA>
specifies the retry interval policy of the <COMMAND>scheduler</> for
an address.
The value must be a sequence of positive integers, these being multiples
of the primary interval before a retry is scheduled.
The <COMMAND>scheduler</> starts by going through the sequence as an address
is repeatedly deferred.
When the end of the sequence is reached, the <COMMAND>scheduler</> will
jump into the sequence at a random spot and continue towards the end.
This allows various retry strategies to be specified easily:
<ITEMIZEDLIST>
<LISTITEM><PARA>
 brute force (or "jackhammer"):
<SYNOPSIS>
  retries=0
</SYNOPSIS>
</PARA></LISTITEM>
<LISTITEM><PARA>
 constant primary interval:
<SYNOPSIS>
  retries=1
</SYNOPSIS>
</PARA></LISTITEM>
<LISTITEM><PARA>
instant backoff:
<SYNOPSIS>
  retries="1 50 50 50 50 50 50 50 50 50 50 50 50"
</SYNOPSIS>
</PARA></LISTITEM>
<LISTITEM><PARA>
 slow increasing (fibonacci) sequence:
<SYNOPSIS>
  retries="1 1 2 3 5 8 13 21 34"
</SYNOPSIS>
</PARA></LISTITEM>
<LISTITEM><PARA>
s-curve sequence:
<SYNOPSIS>
  retries="1 1 2 3 5 10 20 25 28 29 30"
</SYNOPSIS>
</PARA></LISTITEM>
<LISTITEM><PARA>
exponential sequence:
<SYNOPSIS>
  retries="1 2 4 8 16 32 64 128 256"
</SYNOPSIS>
</PARA></LISTITEM>
<LISTITEM><PARA>
 etc.
</PARA></LISTITEM>
</ITEMIZEDLIST>
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>skew=nn</> (5)</TERM><LISTITEM><PARA>
Leftover of earlier <COMMAND>scheduler</> internal algorithms,
does not make sense anymore.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>sysnice=nn</></TERM><LISTITEM><PARA>
Can be used (if desired) at the <EMPHASIS>*/*</> clause to set
<EMPHASIS>relative niceness</> for the <EMPHASIS>scheduler</> process,
and all of its children.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>syspriority=nn</></TERM><LISTITEM><PARA>
Can be used (if desired) at the <EMPHASIS>*/*</> clause to set
<EMPHASIS>absolute priority</> for the <EMPHASIS>scheduler</> process,
and all of its children.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>user="sss"</> (root)</TERM><LISTITEM><PARA>
is the user id of a transport agent processing the address.
The value is either numeric (a uid) or an account name.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>wakeuprestartonly</></TERM><LISTITEM><PARA>
Start only one instance of handling processes, never mind what other
settings say.
</PARA></LISTITEM></VARLISTENTRY>


</VARIABLELIST>
</PARA>

<PARA>
For example, this is a complete configuration file:
<SYNOPSIS>
# Default values
*/*     interval=1m expiry=3d retries="1 1 2 3 5 8 13 21 34"
        maxring=0 maxta=0 skew=5 user=root group=daemon
# Boilerplate parameters for local delivery and service channels
local/* interval=10s expiry=3h maxchannel=2 command=mailbox
error   interval=5m maxchannel=10 command=errormail
hold/*  interval=5m maxchannel=1 command=hold
# Miscellaneous channels supported by router configuration
smtp/*.toronto.edu
smtp/*.utoronto.ca maxchannel=10 maxring=2
        command="smtp -srl /var/log/smtp"
smtp/*  maxchannel=10 maxring=5
        command="smtp -esrl /var/log/smtp"
uucp/*  maxchannel=5 command="sm -c $channel uucp"
</SYNOPSIS>
</PARA>

<PARA>
The first clause (``*/*'') sets up default values for all
addresses. There is no command specification, so clause matching
will continue after address have picked up the parameters set here.
</PARA>

<PARA>
The third clause (``error'') has an implicit host wildcard of `*', 
so it would match the same as specifying ``error/*'' would have.
</PARA>

<PARA>
The fifth clause (``smtp/*.toronto.edu'') has no further components 
so it selects the components of the following non-empty clause (the sixth).
</PARA>

<PARA>
Both the fifth and sixth clauses are specific to address destinations
within the TORONTO.EDU and UTORONTO.CA organization (the two are parallel
domains). At most 10 deliveries to the smtp channel may be concurrently
active, and at most 2 for all possible hosts within TORONTO.EDU.
If ``$host'' is mentioned in the command specification, the transport agent
will only be told about the message control files that indicate SMTP delivery
to a particular host.
The actual host is picked at random from the current choices, to avoid
systematic errors leading to a deadlock of any queue. 
</PARA>

</SECT2>
</SECT1>

<SECT1 ID=zref-sch-resource-management>
<TITLE>Resource Management</TITLE>

<PARA>
For resource management there are following configuration attributes: 

<VARIABLELIST>
<VARLISTENTRY><TERM><OPTION>maxta=nn</OPTION></TERM><LISTITEM><PARA>
Max number of transporter processes under the <COMMAND>scheduler</>.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>maxchannel=nn</OPTION></TERM><LISTITEM><PARA>
Max number of processes with this same ``channel''.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>maxring=nn</OPTION></TERM><LISTITEM><PARA>
Max number of processes with this set of threads. 
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>maxthr=nn</OPTION></TERM><LISTITEM><PARA>
Max number of processes at any given thread in this set of threads.
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>idlemax=time</OPTION></TERM><LISTITEM><PARA>
How long the non-active (idle) transporter processes are allowed to keep
around. 
</PARA></LISTITEM></VARLISTENTRY>

<VARLISTENTRY><TERM><OPTION>overfeed=nnn</OPTION></TERM><LISTITEM><PARA>
Max number of tasks to feed from the thread to the transporter agent
 when feeding jobs to it.
The <COMMAND>scheduler</> main-loop at the <FUNCTION>mux()</> is
a bit sluggish, thus with this we can keep the transporters busy.
</PARA></LISTITEM></VARLISTENTRY>

</VARIABLELIST>
</PARA>

</SECT1>

<SECT1 ID="zref.scheduler.auth.file">
<TITLE><FILENAME>scheduler.auth</> file</TITLE>

<PARA>
The file whose default boilerplate is shown at
<XREF LINKEND="fig.ref.scheduler.auth.file"> is able to
control what kind of things (and who, of those who know shared secrets) can
ask the scheduler to do via the so called ``MAILQv2'' protocol.
</PARA>

<FIGURE ID="fig.ref.scheduler.auth.file" PGWIDE=1 FLOAT=1>
<TITLE>Sample of ``<FILENAME>scheduler.auth</FILENAME>'' file</TITLE>
<SCREEN>
#
# APOP-like authentication control file for the ZMailer scheduler.
#
# Fields are double-colon (':') separated, and are:
#   - Username
#   - PLAINTEXT PASSWORD (which must not have double-colon in it!)
#   - Enabled attributes (tokens, space separated)
#   - Addresses in brackets plus netmask widths:  [1.2.3.4]/32
#
# Same userid CAN appear multiple times, parsing will pick the first
# instance of it which has matching IP address set
#
# The default-account for 'mailq' is 'nobody' with password 'nobody'.
# Third field is at the moment a WORK IN PROGRESS!
#
# SECURITY NOTE:
#   OWNER:      root
#   PROTECTION: 0600
#
# Attribute tokens:
#       ALL     well, a wild-card enabling everything
#       SNMP    "SHOW SNMP"
#       QQ      "SHOW QUEUE SHORT"
#       TT      "SHOW QUEUE THREADS", "SHOW THREAD channel/host"
#       ETRN    "START THREAD channel host"
#       KILL    "KILL THREAD channel host", "KILL MSG spoolid"
#
# - "nobody" via loopback gets different treatment from
#   "nobody" from anywhere else.
#
nobody:nobody:SNMP QQ TT ETRN:  [127.0.0.0]/8 [ipv6.0::1]/128
nobody:nobody:SNMP ETRN:        [0.0.0.0]/0   [ipv6.0::0]/0
#watcher:zzzzz:SNMP QQ TT ETRN: [127.0.0.0]/8 [192.168.0.1]/32
#root:zzzzzzz:ALL:              [127.0.0.0]/8 [192.168.0.2]/32
</SCREEN>
</FIGURE>
</SECT1>

<SECT1 ID=zref-sch-mailq-cmd>
<TITLE>mailq</TITLE>

<PARA>FIXME! FIXME!</PARA>

<PARA>
Upon  accepting a  TCP  connection on the MAILQ port (TCP
port 174), the scheduler dumps data to the TCP  stream  in
the  following  format  and immediately closes the connec-
tion.
</PARA>

<PARA>
The TCP stream syntax is:
<SYNOPSIS>
version id\n
data in id-dependent format&lt;close&gt;
</SYNOPSIS>
</PARA>

<PARA>
The first line (all bytes up to an ASCII LF character,
octal 12) is used to identify the syntax of all bytes fol-
lowing the line terminator LF.  The first 8 characters  of
the first line are ``version'' as a check that this is
indeed a MAILQ port server that has been reached, the
remaining  bytes are the real data format identification.
The data is interpreted according to that format until the
terminating connection close.
</PARA>

<PARA>
Format identifiers should be registered with the author.
The only one currently defined is ``zmailer 1.0''.
For that data format, the syntax of the data following the first LF is:
<SCREEN>
Vertices:\n
(&lt;key&gt;:\t&gt;&lt;msg-file&gt;\t&gt;&lt;n-addrs&gt;; &lt;off1&gt;(,&lt;offN&gt;)*\t&gt;[#&lt;text&gt;]\n)*
(Channels:\n
(&lt;word&gt;:\t&gt;(&gt;&lt;key&gt;)+\n)+
Hosts:\n
(&lt;word&gt;:\t&gt;(&gt;&lt;key&gt;)+\n)+)?
</SCREEN>
</PARA>

<PARA>
Where:
\begin{description}
\item[] \mbox{}

\begin{verbatim}
\n
\end{verbatim}
/ is an ASCII linefeed

\item[] \mbox{}

\begin{verbatim}
\t
\end{verbatim}
/ is an ASCII tab

\item[key] \mbox{}

is an unsigned decimal number

\item[msg-file] \mbox{}

is a contiguous string (it is the message file name relative 
to a known directory)

\item[n-addrs] \mbox{}

is an unsigned decimal number (number of addresses)

\item[off1...offN] \mbox{}

are unsigned decimal numbers (address byte offsets)

\item[text] \mbox{}

is a string not containing an ASCII linefeed (status message)

\item[word] \mbox{}

is a contiguous string (a ``contiguous string'' is a sequence of 
printable non-space characters

\end{description}
</PARA>

<PARA>
For example, here is sample output from connecting to the MAILQ port:
<SCREEN>
version zmailer 1.0
Vertices:
311424:37141; 116
311680:64722; 151,331#128.100.8.4: Null read! (will retry)
312192:63471; 152#128.89.0.93: connect: Connection timed out (will retry)
Channels:
smtp:&gt;311424&gt;311680&gt;312192
Hosts:
scg.toronto.edu:&gt;311424
mv04.ecf.toronto.edu:&gt;311680
relay1.cs.net:&gt;312192
</SCREEN>
</PARA>

<PARA>
This is sufficient information to be able to reconstruct the transport queues
as seen by the scheduler process, and to find more information than what is
shown here by actually looking up the message control and data files referred
to.
</PARA>

</SECT1>

<SECT1 ID=zref-sch-security-issues>
<TITLE>Security Issues</TITLE>

<SCREEN>
Text to be inserted here.
</SCREEN>
</SECT1>
</CHAPTER>
