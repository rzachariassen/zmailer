'\" t
.\" $Header$
.ds ]W ZMailer 2.99
.TH SCHEDULER 8 "2003-Apr-17"
.SH NAME
scheduler \- zmailer transport queue scheduler daemon
.SH SYNOPSIS
.IP \fBscheduler\fR 10em
[\fB\-divFHnQSVW\fR]
[\fB\-f\fR\ \fIconfigfile\fR]
[\fB\-E\fR\ \fInewentsmax[,newentstimemax]\fR]
[\fB\-L\fR\ \fIlogfile\fR]
[\fB\-l\fR\ \fIstatisticslog\fR]
[\fB\-N\fR\ \fItranspmaxfno\fR]
[\fB\-P\fR\ \fIpostoffice\fR]
[\fB\-p\fR\ \fIchannel/host-pair\fR]
[\fB\-R\fR\ \fImaxforkfreq\fR]
[\fB\-q\fR\ \fIrendezvous\fR
[\fB\-Z\fR\ \fIzenvfile\fR]
.PP
.SH DESCRIPTION
The \fIscheduler\fR daemon manages the delivery processing of messages
in the ZMailer.
.PP
The \fIrouter\fR(8) creates message control files in
the \fIPOSTOFFICE\fB/transport\fR directory.
These refer to the original message files in
the \fIPOSTOFFICE\fB/queue\fR directory.
.PP
The \fIscheduler\fR reads each message control file
from \fIPOSTOFFICE\fB/transport/\fR, translates the contained message
and destination information into internal data structures, and unlinks
the message control file.
.PP
Based on scheduling, priority, and execution information read from a
configuration file, the\ \fIscheduler\fR arranges to execute
\fITransport Agents\fR relevant to the queued messages.
.PP
At the time scheduled for a particular transport
agent invocation, the \fIscheduler\fR
will start a transport agent (or use one from idle-pool), and tell
it one by one which message control files to process.
When all the destination addresses in a message have been processed,
the \fIscheduler\fR performs error reporting tasks if any, and then
deletes the message control file in \fIPOSTOFFICE\fB/transport\fR and
the original message file in \fIPOSTOFFICE\fB/queue\fR.
.PP
All message delivery is actually performed by Transport Agents, which
are declared in a configuration file for the \fIscheduler\fR.
Each transport agent is executed with the same current directory as
the \fIscheduler\fR.
The \fIscheduler\-transporter\fR interaction protocol is described later
in this man-page.
.PP
The standard output of each transport agent are destination address
delivery reports; either successful delivery, unsuccessful delivery, or
deferral of the address.  Each report uses byte offsets in the message
control file to refer to the address.  Reports may also
include a comment line which will be displayed in the \fIscheduler\fR's
own reports.
.PP
Two types of reports are produced:

.IP "1." 3em
Error messages caused by unsuccessful delivery of a message
are appended to its message control file.  Occasionally,
for example, when all addresses have been processed, the
.I scheduler
generates an error message to the error return address of the message
(usually the original sender).  

.IP "2." 3em
The
.I scheduler
binds itself to a well-known TCP/IP port (\fBMAILQ\fR, TCP port 174)
on startup.  Any connections to this port are processed synchronously
in the scheduler at points in the execution where the state is
internally consistent.  The
.I scheduler
simply dumps its internal state in a terse format to the TCP stream.
It is expected that the client program will reconstruct the data structures
sufficiently to give a user a good idea of what the scheduler thinks the
world looks like.  The
.IR mailq (1)
program serves this purpose.
.PP
.SH OPTIONS
Invoking
.I scheduler
without any argument will start it as a daemon.
.PP
.IP \-d 1i
run as a daemon, usually used after \-v to log daemon activity in great
detail.
.PP
.IP "\-E \fInewentsmax[,neweventtimelimit]\fR"
.RS
when globbing new tasks from the directory, pick only first ``newentsmax''
of them, and leave rest for a new scan run, or do it at most
for ``newenttimelimit'' seconds.
Default values are 40 000 messages, and 5 seconds.
.PP
This relates on how the system will scan the input queue areas for new
messaes.
Nominally in lightly loaded systems the scan for new messages will be done
every 10 seconds, but if the queue in pre-scan area is sufficiently large,
that interval is raised up to 20 seconds.
.PP
The ``newenttimelimit'' value can be set to 2 thru 15, and tells essentially
for how long the scheduler is allowed to spend on the work to look for new
things.
.RE
.PP
.IP "\-f \fIconfigfile\fR"
overrides the default configuration file \fIMAILSHARE\fB/scheduler.cf\fR.
.PP
.IP "\-F"
Freeze -- don't actually run anything, just do queue scanning.
(For debug purposes..)
.PP
.IP "\-H \-HH"
.RS
Use multi-level hashing at the spool directories.
This will efficiently reduce the lengths of the scans at the directories
to find some arbitary file in them.
One `H' means "single level hashing", two `HH's mean "dual level hashing".
``Hash'' is directory which name is single upper case alphabet (A-Z).
.LP
When existing, ZENV variable
.I SCHEDULERDIRHASH
overrides the `H' option.
.RE
.PP
.IP "\-i"
run interactively, i.e., not as a daemon.
.PP
.IP "\-L \fIlogfile\fR"
overrides the default log file location \fILOGDIR\fB/scheduler\fR.
.PP
.IP "\-l \fIstatisticslog\fR"
starts the appending of delivery statistics information (ASCII form)
into given file.  No default value.
.PP
.IP "\-M [1|2]"
Version of the
.I mailq
protocol this server runs; essentially a test option, as
existence of
.I PARAMauthfile=".."
assignment at the
.I scheduler.conf
file turns the protocol into version 2.
.PP
.IP "\-N \fItransmaxfno\fR"
sets how many filehandles are allocated for the scheduler's started
children (if the system has adjustable resources.)
.PP
.IP "\-n"
.RS
Toggles configuration flag `default_full_content', which defines what
will be DSN RET parameter assumed value in case the originator didn't
supply that parameter.
.LP
Default behaviour is similar to RET=FULL, while usage of this option
is equivalent of RET=HDRS.  This option does not override originator
supplied DSN RET parameter value.
.PP
.IP "\-p \fIchannel/host\fR"
A debug-type option for running selectively some thread under a single
instance of the
.IR scheduler .
.LP
Use this with options: \-v
.RE
.PP
.IP "\-P \fIpostoffice\fR"
specifies an alternate \fIPOSTOFFICE\fR directory.
.PP
.IP "\-q \fIrendezvous\fR"
on machines without TCP/IP networking, the rendezvous between
.I scheduler
and
.IR mailq (1)
is done using a well-known named pipe.  This option overrides the default
location for this special file, either \fIRENDEZVOUS\fR or
\fB/usr/tmp/.mailq.text\fR.
.PP
.IP "\-Q"
The ``Q''-mode, don't output the old style data into the queue querier,
only the new-style one.
.PP
.IP "\-S"
Synchronous startup mode, scans all jobs at the directory before starting
even the first transporter.
.PP
.IP "\-v"
be verbose about activity, and do not detach as a daemon.
.PP
.IP "\-W"
be used in conjunction with \-v to delay verbose logging
start until after all the files have been parsed in, and
it is a time for doing scheduling.
.PP
.IP "\-Z\ \fIzenvfile\fR"
passes on explicite non-compiled-in-default located ZCONFIG environment file.
.PP
.IP "\-V"
print version message and run interactively.
.PP
.SH CONFIGURATION FILE
The
.I scheduler
configuration file consists of a set of clauses.  Each clause is selected by
the pattern it starts with.  The patterns for the clauses are matched,
in sequence, with the
.IR channel / host
string for each recipient address.
When a clause pattern matches an address, the parameters set in the clause
will be applied to the
.IR scheduler 's
processing of that address.  If the clause specifies a command,
the clause pattern matching sequence is terminated.
This is a clause:
.PP
.RS
.nf
local/*
.RS
interval=10s
expiry=3h
# want 20 channel slots in case of blockage on one
maxchannel=20
# want 20 thread-ring slots
maxring=20
command="mailbox -8"
.RE
.fi
.RE
.PP
A clause consists of:
.PP
.RS 3em
.TP 4em
\(bu
A selection pattern (in shell style) that is matched against the
\fIchannel\fR/\fIhost\fR string for an address.
.TP 4em
\(bu
0 or more variable assignments or keywords (described below).
.PP
.RE
.PP
There are several possible
.BR PARAM -assignments
starting at column 0, more of them below.
.PP
If the selection pattern does not contain a '/', it is assumed to
be a channel pattern and the host pattern is assumed to be the wildcard '*'.
.PP
The components of a clause are separated by whitespace.  The pattern
introducing a clause must start in the first column of a line, and the
variable assignments or keywords inside a clause must not start in the
first column of a line.  This means a clause may be written both compactly
all on one line, or spread out with an assignment or keyword per line.
.PP
If the clause is empty (i.e., consists only of a pattern), then the
contents of the next non-empty clause will be used.
.PP
The typical configuration file will contain the following clauses:
.PP
.RS 3em
.TP 4em
\(bu
a clause matching all addresses (using the pattern
.BR */* )
that sets up default values.
.TP 4em
\(bu
a clause matching the local delivery channel (usually
.BR local ).
.TP 4em
\(bu
a clause matching the deferred delivery channel (usually
.BR hold ).
.TP 4em
\(bu
a clause matching the error reporting channel (usually
.BR error ).
.TP 4em
\(bu
clauses specific to the other channels known by the
.IR router ,
for example,
.B smtp
and
.BR uucp .
.RE
.RE
.PP
The actual names of these channels are completely controlled by the
.I router
configuration file.
.PP
Empty lines, and lines whose first non-whitespace character is '#',
are ignored.
.PP
Variable values may be unquoted words or values or doublequoted strings.
Intervals (delta time) are specified using a concatenation of: numbers
suffixed with 's', 'm', 'h', or 'd' modifiers designating the number as
a second, minute, hour, or day value.  For example: 1h5m20s.
.PP
The known variables and keywords, and their typical values and semantics are:
.PP
.IP "interval (1m)"
specifies the primary retry interval, which determines how frequently
a transport agent should be scheduled for an address.  The value is a
delta time specification.
This value, and the
.I retries
value mentioned below, are combined to determine the interval between
each retry attempt.
.PP
.IP "idlemax (3x interval)"
When a transport agent runs out of jobs, they are moved to ``idle pool'',
and it a TA spends more than
.I idlemax
time in there, it is terminated.
.PP
.IP "expiry (3d)"
.RS
specifies the maximum age of an address in the
.I scheduler
queue before a repeatedly deferred address is bounced with an expiration
error.  The actual report is produced when all addresses have
been processed.
.PP
The expiry happens only, if there has been at least one delivery
attempt in the lifetime of the scheduler process currently running.
.RE
.PP
.IP "expiry2 (0)"
.RS
specifies additional time beyond primary expiration by which
time the message will be expired even without any delivery
attempts having been made.
.RE
.PP
.IP "retries (1 1 2 3 5 8 13 21 34)"
.RS
specifies the retry interval policy of the
.I scheduler
for an address.  The value must be a sequence of positive integers, these
being multiples of the primary interval before a retry is scheduled.  The
.I scheduler
starts by going through the sequence as an address is repeatedly deferred.
When the end of the sequence is reached, the
.I scheduler
will jump into the sequence at a random spot and continue towards the
end.  This allows various retry strategies to be specified easily:
.PP
.nf
brute force (or "jackhammer"):
.RS
retries=0
.RE
constant primary interval:
.RS
retries=1
.RE
instant backoff:
.RS
retries="1 50 50 50 50 50 50 50 50 50 50 50 50"
.RE
slow increasing (fibonacci) sequence:
.RS
retries="1 1 2 3 5 8 13 21 34"
.RE
s-curve sequence:
.RS
retries="1 1 2 3 5 10 20 25 28 29 30"
.RE
exponential sequence:
.RS
retries="1 2 4 8 16 32 64 128 256"
.RE
etc.
.fi
.RE
.PP
.IP "maxta (0)"
.RS
This is
.B global
parameter limiting the number of transport-agent processes that
the sceduler can have running concurrently.
.LP
If retrying an address would cause the number of simultaneously active
transport agents to exceed the specified value, the retry is postponed.
.LP
When no
.I maxta
parameter is used, or '0' is used, the
.I scheduler
(at operating systems supporting it) uses getrlimit(2)/setrlimit(2) to
maximize the number of available file descriptors for the process.
The thus maximized value minus about 20 is then used as 
.I maxta
value.
.LP
At some operating systems there are no bidirectional pipes or sockets
for the scheduler to talk with the transport agents, thus at those systems
each TA process uses
.B two
.IR pipe (2)
file-handles, and thus system-wide limit on
.I maxta
halves from what was maximum derived above.
.RE
.PP
.IP "maxchannel (0)"
.RS
This limits the number of concurrent transport agent processes for which
the
.I channel
part of the address quad are same.
.LP
The default value is copied from the
.IR maxta .
.LP
It is advisable, although not mandatory, to have the same value for all
.I maxchannel
parameters at all clauses with matching channel parts.
.LP
Case where non-alike values might make sense is when you want to guarantee
resources for a subset of destinations, e.g. for all other "smtp/" clauses
have 
.I maxchannel
of say 100, but for your very important domain domain have there a bit
higher, say: 120.
.RE
.PP
.IP "maxring (0)"
.RS
The recipients are groupped into ``threads'' by recipient channel+host parts,
and threads matching same selector clause are groupped into ``thread-rings'',
where same transport agent can be switched over from one recipient to another.
.LP
This parameter defines how many transport agents can be running at any time
at the ring.
.LP
When no limit is given, then
.I maxta
value is used for default.
.RE
.PP
.IP "maxthr (1)"
.RS
This limits the number of parallel transport agents within each
thread; that is, using higher value than default ``1'' will allow
running more than one TA for the jobs at the thread.
.LP
Do note that running more than one TA in parallel may also require
lowering OVERFEED value.  (E.g. having a queue of 30 messages will
not benefit from more TAs, unless they all get something to process.
Having OVERFEED per default at 150 will essentially feed whole queue
to one TA, others are not getting any.)
.RE
.PP
.IP "overfeed (150)"
.RS
Because the scheduler spins around a bit sluggishly to spot
active TAs, it does make sense to feed more than one task to a TA,
and then wait for the results, thus came about the ``overfeed''
mechanism.
.LP
This tells how many job specifiers to feed to the TA when
the TA process state is ``STUFFING.''
.RE
.PP
.IP "skew (5)"
Leftover from earlier scheduler internal structure.
Does not make sense anymore.
.PP
.IP "user (root)"
is the user id of a transport agent processing the address.  The value
is either numeric (a uid) or an account name.
.PP
.IP "group (daemon)"
is the group id of a transport agent processing the address.  The value
is either numeric (a gid) or a group name.
.PP
.IP "command (smtp -srl ${LOGDIR}/smtp $host)"
.RS
is the command line used to start a transport agent to process the address.
.LP
The program pathname is specified relative to the \fIMAILBIN\fB/ta\fR
directory.
.LP
The string "$channel" is replaced by the current matched channel,
and "$host" is replaced by the current matched host, from the destination
address, and "${LOGDIR}" substitutes ZENV variable LOGDIR value there.
.LP
\fIIt is strongly recommended that the "$host" is not to be used on
a command definition, as it limits the usability of idled transporter.\fR
.LP
It is possible to place environment-string setting statements into
the beginning of the line:
.LP
.RS 3em
.nf
command="MALLOC_DEBUG_=1 OTHER=var  cmdname cmdparams"
.fi
.RE
.RE
.PP
.IP queueonly
.RS
a clause with
.I queueonly
flag does not auto-start at the arrival of a message, instead it
.B must
be started by means of
.IR smtpserver (8)
command
.B ETRN
thru an SMTP connection.
.LP
To have message expiration working, following additional entries are
suggested:
.I interval=1h retries="24"
.RE
.PP
.PP
For example, this is a complete configuration file:
.PP
.nf
.RS
# Default values
*/*
.RS
interval=1m expiry=3d retries="1 1 2 3 5 8 13 21 34"
maxring=0 maxta=0 skew=5 user=root group=daemon
.RE
# Boilerplate parameters for local delivery and service channels
local/*
.RS
interval=10s expiry=3h maxchannel=2 command=mailbox
.RE
error
.RS
interval=5m maxchannel=10 command=errormail
.RE
hold/*
.RS
interval=5m maxchannel=1 command=hold
.RE
# Miscellaneous channels supported by router configuration
smtp/*.toronto.edu
smtp/*.utoronto.ca
.RS
maxchannel=10 maxring=2
command="smtp -srl $LOGDIR/smtp"
.RE
smtp
.RS
maxchannel=10 maxring=5
command="smtp -esrl $LOGDIR/smtp"
.RE
uucp/*
.RS
maxchannel=5 command="sm -c $channel uucp"
.RE
.RE
.fi
.PP
The first clause (*/*) sets up default values for all addresses.  There
is no command specification, so clause matching will continue after
address have picked up the parameters set here.
.PP
The third clause (error) has an implicit host wildcard of '*', so it would
match the same as specifying error/* would have.
.PP
The fifth clause (smtp/*.toronto.edu) has no further components so it
selects the components of the following non-empty clause (the sixth).
.PP
Both the fifth and sixth clauses are specific to address destinations
within the TORONTO.EDU and UTORONTO.CA organization (the two are parallel
domains).  At most 10 deliveries to the \fBsmtp\fR channel may be concurrently
active, and at most 2 for all possible hosts within TORONTO.EDU.
If $host is mentioned in the command specification, the transport
agent will only be told about the message control files that indicate
SMTP delivery to a particular host.  The actual host is picked at random
from the current choices, to avoid systematic errors leading to a deadlock
of any queue.
.PP
.SH CONFIGURATION FILE PARAM-ASSIGNMENTS
The scheduler can assign several of its internal parameters
by having variable assignments beginning at column 0, and
beginning with "PARAM" text:
.PP
.TP 4em
PARAMmailqpath\ \=\ "UNIX:/path/to/pf_unix/mailq/socket"
.TP 4em
PARAMmailqpath\ \=\ "TCP:mailq"
.TP 4em
PARAMmailqpath\ \=\ "TCP:174"
These define two different types of possible socket addresses for the
.RI " mailq "
protocol; a UNIX socket, and a TCP socket.
Default is "TCP:174".
.PP
.IP PARAMautfile\ \=\ "/path/to/scheduler.auth"
Location of MAILQv2 autentication control file
.IP PARAMglobal-report-interval\ \=\ 15m
Interval by which all permanent reports accumulated into a message
are reported by; sends out early reports of delivery failures, and
does not force to wait for maximum queue timeout in case the message
has more than once recipient.
.PP
.SH MESSAGE CONTROL FILE SYNTAX
A message control file contains all the information needed by delivery
programs like \fIscheduler\fR and the transport agents.
It is a terse presentation of the
.IR router 's
decisions, along with some useful reference information.
.PP
The message control file consists of a number of fields.
.PP
All fields start in the first column (i.e., at the beginning of the file
or just after a newline), and most fields extend to the end of line.
The one exception is the message header field which extends till
a double-newline terminator.
.PP
For all but this message header field, the second column is reserved for
a tag byte.  This position is used to lock the field and to indicate
the status of past processing of the field.  For example, the success
or failure of delivery to a recipient address is indicated by a '+' or
'-' in the second column of that field.  A space ' ' in that position
means the field has not been processed, or that processing has been deferred.
A '~' indicates the field is locked because some transport agent is
currently processing delivery for the address.
The known field names and tags are defined in \fB<mail.h>\fR.
.PP
For all the
.I recipient
addresses, there is 6 characters space for transport-agent process-id
so that a quickly restarted scheduler will not do double-delivery on some
slowly running transporter.
.PP
The following fields are mandatory:
.PP
.IP "@ 0xHHHHHH"
.RS
Carries hex-encoded bitflags of what kind of format this dataset really is in.
.LP
This is to ensure that ``featurefullness'' relation of:
router <= scheduler <= TA-programs is not violated, and that the messages in
the spool meet this criteria too.
.LP
Rolling binaries back too far might break things.
.RE
.PP
.IP "i 123456\-789"
the name of the message file in the
.I POSTOFFICE\fB/queue
directory and of the message control file in the
.I POSTOFFICE\fB/transport
directory.
'i' is a mnemonic for 'inode' since message file names must be unique on
the system and therefore are named by their inode number.
.PP
.IP "o NNNNNNN"
the byte offset of the message body in the original message.
.PP
The following fields will frequently exist:
.PP
.IP "e user@some.domain"
is the return address for error messages, in a form that can be put in
a To: header line.
.PP
.IP "l <mumble@jumble>"
is a string identifying this message in log entries.  Typically the message
id of the message would be used.
.PP
The following fields will occasionally appear:
.PP
.IP "x <jumble@mumble>"
is the log identification string (usually a message id) of an obsoleted
message.  The scheduler will purge any such identified message after
running sanity checks.
.PP
.IP "v ../public/v_filename"
is the name of a file that the delivery system can appended log information
to.  This would appear as the result of running
.B sendmail -v
or
.BR Mail\ -v .
.PP
Since all programs need to refer to the same file, on mail clusters
it is recommended that this be a relative path naming a file within
the
.I POSTOFFICE
directory hierarchy.
.PP
A message control file must contain at least one address "group".
Each group consists of a sender address field, one or more recipient
address fields, and a message header that goes along with these.
.PP
An address field is a string containing a space-separated 4-tuple (quad)
as follows:
.PP
.IP "channel"
is the name of the delivery channel for this address.  This must be
a contiguous word.
.PP
.IP "host"
is the name of the next destination host for this address.  This too
must be a contiguous word.
.PP
.IP "user"
is the address to be handed to the destination host for further delivery.
This string may contain space.  It is distinguishable because the last
component cannot contain spaces.
.PP
.IP "privilege"
is the numeric uid representing the privileges associated with this address.
.PP
The address group components are:
.PP
.IP "s <address quad>"
carries a sender address field in address-quad form.
.PP
.IP "r PPPPPPDDDD<address quad>"
is a recipient address field in address quad form, but also
contains fields for transprort agent pid number (PPPPPP), and
a four character space for delay reporting by the scheduler (DDDD).
.PP
.IP "N string"
are the delivery-status-notification parameters for the previous recipient.
.PP
.IP "n string"
is the delivery-status-notification environment id data for the previous
recipient.
.PP
.IP "R string"
The DSN RET-mode setting (HDRS/FULL) for the previous recipient.
.PP
.IP "X nnnnnn"
is an XOR recipient address field.  The first element is a tag (a class number)
to identify collections of recipient addresses which are equivalent
(and therefore mutually exclusive).  This is followed by an address field
as described above.
.PP
.IP "m"
carries the message header for this address group.
.PP
After one or more of these address groups, the error messages for addresses
are appended to the message control file.  This is done by the
.I scheduler
as it receives error reports from transport agents.
.PP
.IP "d <diag-string>"
.RS
Is storage format for diagnostics for recipient addresses.
.PP
Structure of the diagnostic string is:
.nf
  d \fIid\fR:\fIheaderoffset\fR:\fIdrptoffset\fR::\fIdiagtime\fR \\t \fInotarydata\fR \\t \fImessage\fR
  d 172:347:226::964917927 ...
.fi
.PP
The \fIid\fR field tells the byte offset to tge ``r'' of the receiver
definition line.
.PP
The \fIheaderoffset\fR gives the byte offset of the first byte of the
\fIheaders\fR associated with the address group.
.PP
The \fIdrptoffset\fR points to the possible ``N'' line.
.PP
The \fIdiagtime\fR is just system time of the event.
.PP
The \fInotarydata\fR and \fImessage\fR are explained further below, and
are identical to the transport-agent to the scheduler communication
protocol objects of the same name.
.RE
.PP
For example, this is a typical message control file (it is a snapshot taken
while a transport agent was running):
.PP
.nf
\fC    i 15582
    o 60
    l <90Jun3.165355edt.15582@neat.cs.toronto.edu>
    e Rayan Zachariassen <rayan>
    s local - rayan 7
    r~23456   local - rayan 7
    m
    Received: by neat.cs.toronto.edu id <15582>;
              Sun, 3 Jun 1990 16:53:55 -0400
    From:   Rayan Zachariassen <rayan>
    To:     rayan
    Subject: a typical message control file
    Message-Id: <90Jun3.165355edt.15582@neat.cs.toronto.edu>
    Date:   Sun, 3 Jun 1990 16:53:54 -0400
.fi
\fR
.PP
.SH TRANSPORT AGENT INTERFACE
The transport agent interface follows master-slave -model, where the TA
informs the
.I scheduler
that it is ready for the work, and then the scheduler sends it
one job description, and awaits for diagnostics.
Once the job is finished, the TA notifies the scheduler that it
is ready for a new job.
.PP
A short sample session looks like this:
.PP
.RS
.nf
S: \fI(start the transport agent)\fR
T: \fB#hungry\fR
S: \fIspoolid \fB\\t \fIhostspec\fR
T: \fBdiagnostics\fR
T: \fB#hungry\fR
(etc. active work)
T: \fB#hungry\fR
S: \fI#idle\fR
T: \fB#hungry\fR
(the scheduler moved the TA into IDLE pool)
S: \fIspoolid \fB\\t \fIhostspec\fR
(the TA was reactivated from the IDLE pool, doing work)
T: \fB#hungry\fR
S: \fBEOF\fR
(the scheduler determined that the TA should be killed)
T: \fI(exits)\fR
.fi
.RE
.PP
("S" = Scheduler, "T" = Transport agent)
.PP
.PP
Normal diagnostic output is of the form:
.PP
.RS
\fIid\fR / \fIoffset\fR \\t \fInotarydata\fR \\t \fIstatus\fR SPC \fImessage\fR
.RE
.PP
Where:
.RS
.IP id
is the inode number of the message file,
.PP
.IP offset
is a byte offset within its control file where the address being reported
on is kept,
.PP
.IP notarydata
is a Ctrl-A separated quintet/sextet carrying delivery-status-notification
information for the recipient.
.I Status
is one of
.BR ok ,
.BR ok2 ,
.BR ok3 ,
.BR error ,
.BR error2 ,
.BR deferred ,
.BR deferall ,
or
.BR retryat ,
and the
.PP
.IP status
The exit status is a code from
.BR <sysexits.h> .
.PP
.IP message
is descriptive text associated with the report.  The text is terminated by
a linefeed.  Any other format (as might be produced by subprocesses)
is passed to standard output for logging in the
.B scheduler
log.
The
.B retryat
response will assume the first word of the text is a numeric parameter,
either an incremental time in seconds if prefixed by
.BR + ,
or otherwise an absolute time in seconds since epoch.
.RE
.PP
.PP
The notarydata has Control-A separated sub-fields, five or six of them:
.PP
.RS
Final-Rcpt-Address DSN-Action ENH-Status Report-String WTT-Host [WTT-TAid]
.RE
.PP
.PP
.IP Final-Rcpt-Address
This is the final form of the recipient address used at the final delivery
of which the diagnostic data is report about.  Compare with ORCPT= data!
.PP
.IP DSN-Action
One of: "delivered", "failed", relayed", "delayed", "expanded".
See RFC 1892.
.PP
.IP ENH-Status
Enhanced status code per RFC 2034.
.PP
.IP Report-String
A free-form text (one line, no e.g. CRs enbedded).
.PP
.IP WTT-Host
For SMTP systems to produce "Remote-MTA:" header contents.
.PP
.IP WTT-TAid
ZMailer specific extension to report the process name and PID number
of the transport agent producing this report.  Helps to hunt for the
syslogged data relating to this diagnostics instance.
.PP
.PP
.SH "STATISTICS LOG FORMAT"
The statistics log reports condenced performance oriented information
in following format:
.PP
.B "Old format:"
.PP
.TS
l c r r c l.
timestamp	fileid	dt1	dt2	state	$channel/$host
\fC812876190	90401-2	 0	5	ok	usenet/\-\fR
\fC812876228	90401-1	 0	7	ok	usenet/\-\fR
\fC812876244	90401-1	 0	1	ok	local/gopher\-admin\fR
\fC812876244	90401-1	 0	5	ok	smtp/funet.fi\fR
\fC812876559	90401-1	 0	21	ok	smtp/utu.fi\fR
.TE
.PP
.B "New format:"
.PP
.TS
l r r c l.
spoolid	dt1	dt2	state	$channel/$host
\fCS258367AbTCLWiT	 0	5	ok	usenet/\-\fR
\fCS258367AbTCLWiT	 0	7	ok	usenet/\-\fR
\fCS258387AbTCLWiT	 0	1	ok	local/gopher\-admin\fR
\fCS258397AbTCLWiT	 0	5	ok	smtp/funet.fi\fR
\fCS258467AbTCLWiT	 0	21	ok	smtp/utu.fi\fR
.TE
.PP
.PP
where the fields are:
.PP
.PP
.IP spoolid
Spoolid (encoded inode and spool file mtime), which can be used
to correlate with syslogged data with these same ids.
.PP
.IP timestamp
The original spoolfile ctime (modification time) stamp in decimal.
.PP
.IP fileid
Spoolfile name after the router has processed it
.PP
.IP dt1
The time difference from spoolfile ctime to scheduler control file
creation by the router
.PP
.IP dt2
The time difference from scheduler file ctime to the delivery that is
logged on
.PP
.IP state
What happened?  Values: ok, error, expiry
.PP
.IP $channel/$host
Where/how it was processed
.PP
.SH MAILQ(v1) PROTOCOL
Upon accepting a TCP connection on the \fBMAILQ\fR port (TCP port 174), the
.I scheduler
dumps data to the TCP stream in the following format
and immediately closes the connection:
.LP
The TCP stream syntax is:
.LP
.RS
.nf
    \fBversion\fR \fIid\fR\fB\\n\fR
    \fIdata in id-dependent format\fR<\fIclose\fR>
.fi
.RE
.PP
The first line (all bytes up to an ASCII LF character, octal 12) is used
to identify the syntax of all bytes following the line terminator \fBLF\fR.
The first 8 characters of the first line are "\fBversion \fR" as a check that
this is indeed a \fBMAILQ\fR port server that has been reached, the remaining
bytes are the real data format identification.  The data is interpreted
according to that format until the terminating connection close.
.PP
Format identifiers should be registered with the author.
Currently identified ones are:
\fB"zmailer\ 1.0"\fR, and \fB"zmailer\ 2.0"\fR.
.PP
For the \fB"zmailer\ 1.0"\fR data format, the syntax of the data following
the first \fBLF\fR is:
.PP
.PP
.RS
.nf
\fBVertices:\fR\fB\\n\fR
(<\fIkey\fR>\fB:\fR\fB\\t\fR><\fImsg-file\fR>\fB\\t\fR><\fIn-addrs\fR>\fB;\fR <\fIoff1\fR>(\fB,\fR<\fIoffN\fR>)*\fB\\t\fR>[\fB#\fR<\fItext\fR>]\fB\\n\fR)*
(\fBChannels:\fR\fB\\n\fR
(<\fIword\fR>\fB:\fR\fB\\t\fR>(\fB>\fR<\fIkey\fR>)+\fB\\n\fR)+
\fBHosts:\fR\fB\\n\fR
(<\fIword\fR>\fB:\fR\fB\\t\fR>(\fB>\fR<\fIkey\fR>)+\fB\\n\fR)+)?
\fBEnd:\fR\fB\\n\fR
 <mailq -Q thread and status report>
.fi
.RE
.PP
.PP
Where:
.RS
.TP 4em
\fB\\n\fR
is an ASCII linefeed
.TP 4em
\fB\\t\fR
is an ASCII tab
.TP 4em
\fIkey\fR
is an unsigned decimal number
.TP 4em
\fImsg\-file\fR
is a contiguous string (it is the message file name relative
to a known directory)
.TP 4em
\fIn\-addrs\fR
is an unsigned decimal number (number of addresses)
.TP 4em
\fIoff1\fR...\fIoffN\fR
are unsigned decimal numbers (address byte offsets)
.TP 4em
\fItext\fR
is a string not containing an ASCII linefeed (status message)
.TP 4em
\fIword\fR
is a contiguous non-space string
.RE
.PP
.PP
For example, here is sample output from connecting to the \fBMAILQ\fR port:
.PP
.RS
.nf
.ps 8
\fCversion zmailer 1.0
Vertices:
311424:  3714  1; 116
311680:  6472  2; 151,331    #128.100.8.4: Null read! (will retry)
312192:  6347  1; 152        #128.89.0.93: connect: Connection timed out (will retry)
Channels:
smtp:    >311424>311680>312192
Hosts:
scg.toronto.edu:       >311424
mv04.ecf.toronto.edu:  >311680
relay1.cs.net:         >312192
.ps
.fi
.RE
.PP
This is sufficient information to be able to reconstruct the transport queues
as seen by the scheduler process, and to find more information than what is
shown here by actually looking up the message control and data files referred
to.
.SH MAILQv2 PROTOCOL
The MAILQv2 protocol is interactive autenticating protocol, unlike
its predecessor (v1).  The system begins with a greeting telling
version, and then giving one line of challenge to be used in subsequent
autentication command:
.sp
.RS
.nf
\fCversion zmailer 2.0\\n
MAILQ-V2-CHALLENGE: 942665308.906504.3\\n
.fi
.RE
.sp
.PP
Protocol commands are:
.IP "AUTH username hexauthenticator"
The "login" of the mailq session.  The hexauthenticator is
lowercase hexadecimal character printout of MD5 checksum ran
over the catenate of the challenge string (without its ending
newline character), and the user's password.
This algorithm is essentially the same what APOP scheme uses.
.PP
PERLish example with above challenge:
.nf
  \fC$authen = MD5hex("MAILQ-V2-CHALLENGE: 942665308.906504.3"."my-passwd")
.fi
.IP "SHOW SNMP"
Implements `mailq \-QQQ'.
.IP "SHOW QUEUE SHORT"
Implements `mailq \-QQ'.
.IP "SHOW QUEUE THREADS"
Implements `mailq \-Q'.
.IP "SHOW THREAD channel host"
.RS
Reports details usable to implement mailq-v1 like interface.
The details are TAB separated fields in a line until an LF.
Fields are:
.PP
.TP 4em
1)
filepath under $POSTOFFICE/transport/
.TP 4em
2)
line number within a group, 0 starts a group
.TP 4em
3)
error address in brackets
.TP 4em
4)
recipient line offset within the control file
.TP 4em
5)
message expiry time (time_t)
.TP 4em
6)
next wakeup time (time_t)
.TP 4em
7)
last feed time (time_t)
.TP 4em
8)
count of attempts at the delivery
.TP 4em
9)
"retry in NNN" or a pending on "channel"/"thread"
.TP 4em
10)
possible diagnostic message from previous delivery attempt
.RE
.PP
.IP "ETRN etrn_string"
Supports ETRN-cluster subsystem at smtpserver.
.PP
.IP "KILL MSG spoolid"
Unimplemented.
.PP
.IP "KILL THREAD channel host"
Unimplemented.
.PP
Responses are written out to same socket in POP-like manner:
.sp
.RS
.nf
\fCAUTH .... \\n
+OK  or  -LOGIN FAILED \\n
SHOW SNMP\\n
+OK until LF.LF\\n
text\\n
text\\n
\.\\n
.fi
.RE
.sp
.PP
If the output text contains a dot at the beginning of the line,
it is duplicated in SMTP (and POP) style.
.PP
Of various commands, the "SHOW" class implements multiple
text-line outputs, others only "+OK" (or "-ERR...").
.PP
.SH MAILQv2 AUTHENTICATION FILE
.PP
For autenticating MAILQv2 protocol users, system can use
.I PARAMauthfile="/path/to/file.auth"
PARAM-assignment to identify file containing the data, and
with the file to authenticate and parametrize what user can do
thru the MAILQv2 port.
.PP
.sp
.nf
\fC
#
# APOP-like authentication control file for the ZMailer scheduler.
#
# Fields are double-colon (':') separated, and are:
#   \- Username
#   \- PLAINTEXT PASSWORD (which must not have double-colon in it!)
#   \- Enabled attributes (tokens, space separated)
#   \- IP ACLs
#
# Same userid CAN appear multiple times, parsing will pick the first
# instance of it which has matching IP address set
#
# The default\-account for 'mailq' is 'nobody' with password 'nobody'.
# Third field is at the moment a WORK IN PROGRESS!
#
# SECURITY NOTE:
#   OWNER:      root
#   PROTECTION: 0600
#
# Attribute tokens:
#       ALL     well, a wild\-card enabling everything
#       SNMP    "SHOW SNMP"
#       QQ      "SHOW QUEUE SHORT"
#       TT      "SHOW QUEUE THREADS", "SHOW THREAD channel host"
#       ETRN    "ETRN etrn_string"
#       KILL    "KILL THREAD channel host", "KILL MSG spoolid"
#
# \-\- "nobody" via loopback gets different treatment from
#    "nobody" from anywhere else.
#
nobody:nobody:SNMP QQ TT ETRN:  [127.0.0.0]/8 [ipv6.0::1]/128
nobody:nobody:SNMP ETRN:        [0.0.0.0]/0   [ipv6.0::0]/0
#watcher:zzzzz:SNMP QQ TT ETRN: [127.0.0.0]/8 [192.168.0.1]/32
#root:zzzzzzz:ALL:              [127.0.0.0]/8 [192.168.0.2]/32
.fi
.sp
.PP
.SH Z\-ENVIRONMENT VARIABLES
.PP
.IP LOGDIR
defines location of log files. Example:
.B LOGDIR=/var/log/mail
.PP
.IP MAILBIN
Defines where executable transport-agent binaries exist under
$\fBMAILBIN\fR/ta/ directory.
.PP
.IP MAILSHARE
Location of scheduler configuration files
.PP
.IP PATH
What PATH environment variable to give to transport-agent subprograms.
.PP
.IP POSTOFFICE
defines directory where all POSTOFFICE functions are under.
.br
Example:
.B POSTOFFICE=/var/spool/postoffice
.PP
.IP SCHEDULERNOTIFY
defines an \fIAF_UNIX/DGRAM\fR type local notification socket into
which the
.IR router (8)
sends a message for the
.IR scheduler (8)
that there is a new job available.
.PP
.IP SCHEDULERDIRHASH
.RS
Carries a numeric value of ``1'' or ``2'' (if defined at all),
which will then override possible ``-H'' option at the
.IR scheduler (8) .
Existence of this ZENV-variable tells the
.IR router (8)
to send messages directly to the scheduler's hash subdirectories,
thus eliminating a few directory operations which the scheduler would
otherwise do, and at the same time limiting the size of the directory
files.
.PP
On high-load systems, value of:
.I SCHEDULERDIRHASH=2
is highly recommended!
.RE
.PP
.IP SYSLOGFLG
Existence of ``c'' or ``C'' character in value string enables
syslogging of some events as seen by the scheduler.
.PP
.IP ZCONFIG
Gives location of
.I zmailer.conf
 file (and filename).
Actually this one variable does
.B not
override compiled-in location of this configuration file.
.SH TCP\-WRAPPER AND MAILQ
.B "Do note that this applies only when the mailq is using old"
.B "version 1 mode!"
.P
If the ZMailer system is configured with \fItcp\-wrapper\fR code,
then service-id "\fCmailq\fR" is looked for all those addresses that are
allowed to do queries.
.P
Usually files
.IR hosts.allow ,
and
.I hosts.deny
contain following kind of entries:
.PP
.nf
\fC
 /\fRETC\fC/\fIhosts.allow\fC
   mailq : ALL@1.2.3.0
   smtp\-receive: ALL@ALL

 /\fRETC\fC/\fIhosts.deny\fC
   ALL : ALL@ALL\fR
.fi
.PP
(\fIDo note that
.IR smtpserver (8)
\fIhas also tcp\-wrapper support, which becomes active simultaneously
with scheduler's tcp\-wrapper code!\fR)
.PP
.SH SIGNALS
.PP
.IP \fBSIGHUP\fR:
close and reopen the stdout/stderr log file.
.PP
.IP \fBSIGTERM\fR:
exit cleanly.
.PP
.IP \fBSIGQUIT\fR:
exit cleanly, but at first order transporter childs to shut down,
and collect their status reports.
.PP
.IP \fBSIGALRM\fR:
check pending work.
.PP
.IP \fBSIGUSR1\fR:
reread the
.I scheduler
configuration file.
.PP
.IP \fBSIGUSR2\fR:
dump state information to the
.I rendezvous
file.
.SH FILES
.TS
l l.
\fI/etc/zmailer.conf\fR	
\fI/var/spool/postoffice/.pid.scheduler\fR	(POSTOFFICE/.pid.scheduler)
\fI/var/spool/postoffice/.scheduler.notify\fR	(POSTOFFICE/.scheduler.notify)
\fI/var/spool/postoffice/scheduler\fR	(POSTOFFICE/scheduler)
\fI/var/spool/postoffice/transport\fR	(POSTOFFICE/transport)
\fI/var/spool/postoffice/queue\fR	(POSTOFFICE/queue)
.TE
.SH SEE ALSO
.IR mailq (1),
.IR router (8),
.IR smtpserver (8).
.PP
.TS
l l
l l
l s
l s
l s
l l.
RFC 822/2822	The basic Internet email format specification
RFC 1123	Various 822 parameter clarifications

Several extended SMTP facilities are implemented:

RFC 1341/1521/2045	MIME specification (body, formats)
RFC 1342/1522/2047	"MIME-2" specification (headers)
RFC 1425/1651/1869	ESMTP EHLO framework
RFC 1428	Basic MIME conversion rules
RFC 1891/3461	ESMTP DSN
RFC 1892/3462	The Multipart/Report Content Type
RFC 1893/3463	Enhanced Mail System Status Codes
RFC 1894/3464	Extensible Message format for DSNs
RFC 1985	ESMTP ETRN
RFC 2034	ESMTP ENHANCEDSTATUSCODES
RFC 2852	ESMTP DELIVERBY (incomplete inplementation)
.TE
.SH AUTHOR
This program authored and copyright by:
.RS 3em
Rayan Zachariassen <no address>
.RE
A plenty of changes and several real bugfixes by:
.RS 3em
Matti Aarnio <mea@nic.funet.fi>
.RE
