'\" t
.\" $Header$
.ds ]W ZMailer 2.99
.TH MAILBOX 8zm "2005-Feb-18"
.SH NAME
mailbox \- zmailer local delivery transport agent
.SH SYNOPSIS
.IP "\fBmailbox\fR" 8em
[\fB\-8abCDHPrRSUVX\fR]
[\fB\-F\fR\ \fCedquot\fR]
[\fB\-c\fR\ \fIchannel\fR]
[\fB\-h\fR\ \fI"localpart"\fR]
[\fB\-l\fR\ \fIlogfile\fR]
[\fB\-d\fR\ \fIdirpath\fR]
.SH DESCRIPTION
.I mailbox
is a
.B ZMailer
transport agent which is usually only run by the
.IR scheduler (8zm)
program to deliver mail to local user mailbox files.  The
.I mailbox
program must be run with root privileges and invoked with the same
current directory as the
.IR scheduler ,
namely \fIPOSTOFFICE\fB/transport\fR.
.PP
Recipient addresses are processed as follows:
.RS 2em
.IP \(bu 3em
Strip doublequotes around the address, if any.
.IP \(bu 3em
Strip prefixing backslashes, if any.
.IP \(bu 3em
If the address starts with a '|', the rest of the recipient
address string is interpreted as a shell command to be run.
.IP \(bu 3em
If the address starts with a '/', the recipient address
is a filename to append the message to.
.IP \(bu 3em
Otherwise the recipient address must be a local user id.
.IP \(bu 3em
If user is not found, and the first character of the address is
a capital letter, the entire address is folded to lowercase and
the user lookup is retried.
.RE
.PP
If delivering to a user mailbox (\fBMAILBOX\fR/\fIuserid\fR) which
doesn't exist,
.I mailbox
will try to create it.  If the \fBMAILBOX\fR directory is mounted
from a remote system this will succeed if the directory is group-writable.
.PP
Some sanity checks are done on deliveries to files and mailboxes:
.RS 2em
.IP \(bu 3em
The file being delivered to must have 1 link only, and must be either
/dev/null or a regular file.
.IP \(bu 3em
The file lock must be held.
(See below for a section about locks.)
.RE
.PP
There is a further sanity check on mailbox deliveries, namely if the
mailbox is not empty the
.I mailbox
program will enforce 2 newlines as a separator before the message to
be delivered.  This guarantees that User Agents, like
.IR Mail (1),
can find the about-to-be delivered message even if the current contents of
the mailbox is corrupt.
.PP
When delivering to a process (by starting a Bourne shell to execute
a specified command line), the environment is set up to contain several
variables which are listed below at the ``Subprogram Environment Variables''
section.
The \fBSIGINT\fR and \fBSIGHUP\fR signals are ignored, but \fBSIGTERM\fR
is treated normally.
If the process dumps core, it will be retried later.
Sub-process exit codes are interpreted according to <sysexits.h> codes,
and of those EX_NOPERM, EX_UNAVAILABLE, EX_NOHOST, EX_NOUSER, and
EX_DATAERR are treated as permanent errors, all others are treated
as temporary failures.
.PP
The actual data delivered to a file, mailbox, or process, is identical.
It consists of the concationation of a UUCP style separator line,
the message header specified in the message control file, and the
message body from the original message file.
The separator line starts with "From " and is followed by the sender
address and a timestamp.
.PP
After all deliveries and just before exiting, the
.I mailbox
process will poke
.IR comsat (8C)
in case recipients have turned on
.IR biff (1).
The program may be compiled to look in the rwho files on the system
for recipient names logged onto neighbouring hosts, in which case the
.I comsat
on the remote host will be poked.  Even if this compile-time option is
enabled, this will only be done for users that
have a \fB.rbiff\fR file in their home directory.
(Unless an '-DRBIFF_ALWAYS' compile option is used.)
.PP
.SH OPTIONS
.IP \-8
enables MIME-QP-decoder to decode incoming MIME-email with Quoted-Printable
encoded characters.
.IP \-a
the access time on mailbox files is, by default, preserved across delivery,
so that programs such as
.IR login (1)
can determine if new mail has arrived.
This option disables the above action.
.IP \-b
disables biff notification.
.IP \-c\ \fIchannel\fR
specifies which channel name should be keyed on.  The default is
.BR local .
.IP \-C
Canonify username by using internally version of username received in
.I pw_name
field of the
.I getpwnam()
call result.
.IP \-d\ \fI"dirpath"\fR
.RS
This sets the directory prefix where individual mailbox files reside at.
In lacking of this, ZENV-variable MAILBOX value is used, and lacking it,
following set is used:
.RS 4em
.nf
/var/mail
/usr/mail
/var/spool/mail
/usr/spool/mail
.fi
.RE
Of those the one which yields first a directory is chosen.
.PP
The \fI"dirpath"\fR can also be a \fB%\fR-char containing format
string:
.RS 4em
.TS
l l.
%%	the '%' alone
%a	address as is
%u	userid
%U	long user name (userid if not supported)
%D	full domain name
%x	next character derived from PJW hash of userid
%X	next character derived from crc32 hash of userid
%h	userid's home directory
%n	(unimplemented, but reserved)
%N	(unimplemented, but reserved)
.TE
.RE
.PP
Some examples:
.RS 4em
.TS
l l.
/var/mail/%u	standard mail directory
/var/mail/%x/%x/%u	hashed directory
%h/Mail/INBOX	mailbox in user's home
%h/mbox	mailbox in user's home for UW-IMAP..
/var/virt/%D/mail/%X/%X/%u	hashed spool with virtual domain
.TE
.RE
.PP
If parametrization, or default pickup fails, this program yields
a "\fITEMPFAIL\fR" status, and syslog's ALERT level messages.
.RE
.IP \-D[D..]
.RS
For a user with name as:
.IR abcdef ,
one \fI\-D\fR will place the mailbox file into directory
\fI$MAILBOX/a/abcdef\fR.
With \fI\-DD\fR the mailbox file will be placed into directory:
.IR $MAILBOX/a/b/abcdef .
The limit on number of 'D's and resulting subdirs is 10.
.PP
If there are less chars in user name than given hash level says,
hashing stops at the end of the name.
.\" ---- this option exists, but is not used anywhere
.\" .IP \-g
.\" disables file creation if they don't already exist.
.\"
.RE
.IP \-F\ \fCedquot\fR
.RS
"Fatalify."
.PP
Parameter-full option that can turn into
.B fatal
things that previously were mere
.IR TEMPFAIL s.
.PP
This makes "quota exceeded" condition instantly fatal.
.RE
.IP \-h\ \fI"localpart"\fR
specifies which of the possible multiple recipients is to be picked
this time. Default is "none", which selects all local channel
recipients, however when the routing is done with scripts storing
some tokens (other than "\-") into the "host"-part, it is possible
to process "host-wise", i.e. so that each
.B user
has his/her own lock-state, and not just everybody hang on the same lock(s)..
.IP \-H
Keep headers in 8-bit characters, not converting them to "MIME-2".
.IP \-l\ \fIlogfile\fR
specifies a logfile.  Each entry is a line containing message id, pre-existing
mailbox size in bytes, number of bytes appended, and the file name or command
line delivered to.
.IP \-M
enables the creation of MMDF-style mail-folder in the incoming mail folder.
The default is "classic" UNIX-style folder.
.IP \-P[P..]
.RS
This uses much of similar method as
.I \-D[D..]
option, but directory names are derived from much more smoothly
distributing hash function over user names, namely:
.IR pjwhash32 ().
.PP
The hash is split modulo 26 into a reversing buffer, and then
output encoded as uppercase characters. 'A' for 0, 'Z' for 25.
E.g. for
.I \-PPP
that would be analogous to base-10 numeric printout of: 654321 -> "3/2/1/"
.PP
The result of these
.I \-P[P..]
derived directory paths is something like:
.I $MAILBOX/X/username
or
.I $MAILBOX/Y/X/username
.PP
.B Note:
The Base-26 output consumes 4.7 bits of the hash at the time,
which means that a 32 bit has exhausts all of its bits in 7 levels.
.PP
.B Note2:
Depth of hash tree should be determined by individual filesystem
capabilities.
For example Solaris 8 UFS can handle up to 254 things on one directory
level in fastest possible manner, anything over it, and things get
more and more sluggish.
.RE
.IP \-r
disables remote biff notification (if supported).
.IP \-S
This option enables ``Return-Receipt-To:'' message header recognition
and processing along with sending receipt to given address.
.I (Newer sendmails don't anymore support this facility per default..)
.IP \-V
prints a version message and exits.
.IP \-X[X..]
This is similar to
.I \-P[P..]
option, but used hash function is
.IR crc32 ().
Resulting distribution is slightly different, and in fact quite smooth.
.PP
.SH INTERFACE
This program reads in processable file names relative to the current
working directory of the scheduler (namely: \fI$POSTIOFFICE/transport/\fR).
Optionally on the same line the scheduler may tell which host is to be
looked for from the recipients of the message.
.PP
.RS
\fIrelative-spool-path\fR [ <TAB> \fIhostname\fR ]
.RE
.PP
This program produces diagnostic output on the standard output.
Normal diagnostic output is of the form:
.PP
.RS
\fIid\fR/\fIoffset\fR<TAB>\fInotify-data\fR<TAB>\fIstatus\fR \fImessage\fR
.RE
.PP
where 
.I id
is the inode number of the message file,
.I offset
is a byte offset within its control file where the address being reported
on is kept,
.I status
is one of
.BR ok ,
.BR error ,
or
.BR deferred ,
and the
.I message
is descriptive text associated with the report.  The text is terminated by
a linefeed.  Any other format (as might be produced by subprocesses)
is passed to standard output for logging in the
.B scheduler
log.
.PP
The exit status is a code from file \fB<sysexits.h>\fR.
.PP
.SH LOCKS
Locking scheme used at the system is configurable at the runtime,
and has separate parameters for mailboxes, and files.
The data is configurable with zenv variable
.B MBOXLOCKS
at which following characters have meanins:
.PP
.IP `:'
Separates mailbox locks, and file-locks at the string.
The left side has mailbox locks, and the right side has
locks for other regular files. (Files with explicit paths
defined.)
.IP `.'
For mailboxes only:
Does ``dotlock'' (userid.lock), or (at Sun Solaris)
maillock() mechanism.
.IP `F'
If the system has
.I flock()
system call, uses it to lock the entire file.
.I (Ignored at systems without flock()!)
.IP `L'
If the system has
.I lockf()
system call, uses it to lock the entire file.
.I (Ignored at systems without lockf()!)
.PP
Locks are acquired in the same order as the key characters are listed.
.PP
Default for the lockf() capable systems is:
.PP
\f3MBOXLOCKS=".L:L"\fR
.PP
You can choose insane combinations of lock mechanisms, which at some
systems cause locks to fail always, like at Linux-2.0 series where
program must not use both lockf() and flock() locks.
.PP
\fIIt is extremely important, that selected locking methods are same
throughout the system at all programs trying to acquire locks on
mail spools.\fR
.PP
.SH SECURITY
Like all parts of the
.BR ZMailer ,
the
.IR mailbox (8zm)
chooses to err into overtly cautious side.
In case of pipes being run under the
.IR mailbox (8zm),
the program in pipe is started thru
.I /bin/sh
with severely sanitized environment variables, and with only
file descriptors STDIN, STDOUT, and STDERR.
Programs are refused from running, if address analysis has found
suspicuous data; external messages can't directly run programs,
nor those addresses that have had a security breach detected during
.IR .forward -,
or other aliasing analysis.
(Same applies also with writing into explicitly named files.)
.PP
The pipe subprogram is run with user-id it gets thru the address
privilege analysis during message routing, and it gets the
group-id thru lookup of:  getpwuid(uid).
That is, if you have multiple usernames with same uid, there
are no guarantees as to which of them is used for the gid entry.
.PP
The pipe subprogram is started
.B without
use of
.I /bin/sh
command line interpreter (i.e. "system()" call), when the command
line begins with slash, and does not contain characters: `$' and '>'.
If any of those rules is not fulfilled, the subprogram is started
with ``/bin/sh -c "$cmdlinestr"'' call.   This allows running pipes
with carefully formed parameters, when the
.I mailbox
program is running inside shell-less chroot environment.
.SH SUBPROGRAM ENVIRONMENT VARIABLES
The
.I mailbox
sets following environment variables for the subprograms it runs
in the pipes:
.IP HOME
The homedirectory path is taken from abovementioned
.IR getpwuid ()
lookup.
.IP USER
Likewise the textual username.
.IP SENDER
is the incoming "MAIL FROM:<..>" address without brackets.
For an incoming error message, value "<>" is used.
.IP ORCPT
when present, is the XTEXT encoded ORCPT value received at
the message injection into this system.
See RFC 1891 for details.
.IP INRCPT
A
.B ZMailer
specific thing which is supposed to carry the RCPT TO address
that was given at the incoming SMTP session, independent of
ORCPT data.
.IP NOTIFY
Possible (usually) externally received DSN NOTIFY parameter data.
.IP BY
Possible externally received DELIVERBY parameter data.
.IP INFROM
A
.B ZMailer
specific thing which is supposed to carry the MAIL FROM address
that was given at the incoming SMTP session.
.IP EZMLM
A
.B ZMailer
specific thing which is actually present only at
.IR listexpand -utility
expanded email list.
.IP ENVID
when present, is the XTEXT encoded ENVID value received at
the message injection into this system.
See RFC 1891 for details.
.IP ZCONFIG
is the location of the ZMailer ZENV file.
.IP MSGSPOOLID
Is the message spool-id in the ZMailer; subprograms may use this
info in co-operation with ZMailer to e.g.
.IR syslog (3)
what they have done to the arrived message.
.IP MESSAGEID
Is the RFC 822 "Message-ID:" header data as possibly copied into
the control file; another item to support
.IR syslog (3)
at programs.
.IP MAILBIN
is the value from ZENV.
.IP MAILSHARE
is the value from ZENV.
.IP PATH
is the value from ZENV, or "/usr/bin:/bin:/usr/ucb" in case
no ZENV value is available.
.IP SHELL
is constant value: "/bin/sh".
.IP IFS
is constant value: "\ \\t\\n".
.IP TZ
is value from scheduler's environment variables via normal
environment inheritance rules.  Supposedly that of
.I systemwide
time-zone setting.  Available to subprogram only if set when the
.I mailbox
was started.
.PP
.SH ENVIRONMENT VARIABLES
.IP ZCONFIG
.RS
This environment variable is expected to be inherited from the
.IR scheduler (8zm),
and it tells where scheduler's idea of
.IR ZENV -variables
are located at.
.RE
.SH Z\-ENVIRONMENT VARIABLES
.PP
Following \fIZENV-variables\fR are used by the \fBmailbox\fR program:
.PP
.IP DEFCHARSET
Supplies value for default charset, if builtin ISO-8859-1 is not
appropriate, and 8-bit chars in headers need to be converted into
proper "MIME-2" format.
.IP MAILBOX
A directory path at which mailboxes reside.
See above for option "\-d".
.IP MBOXLOCKS
This variable is used to define locking schemes used for mailbox
spool files, and separately for other regular files.
See the "locks" section above.
.IP PATH
This is passed onwards to subprograms.
.IP ZCONFIG
This is passed onwards to subprograms.
.IP MAILBIN
This is passed onwards to subprograms.
.IP MAILSHARE
This is passed onwards to subprograms, and also on occasion used
by the \fBmailbox\fR to find "$MAILSHARE/forms/return-receipt"
form file.
.PP
.SH FILES
.TS
l l.
\fI@ZMAILERCFGFILE@\fR	(ZCONFIG)
\fI@POSTOFFICE@\fR	(POSTOFFICE)
\fI@MAILBOX@\fR	(MAILBOX)
.TE
.PP
.SH SEE ALSO
.IR scheduler (8zm),
.IR comsat (8C),
.IR biff (1),
.IR flock (2),
.IR Mail (1),
.IR mboxpath (1zm),
.IR zmailer.conf (5zm).
.PP
.TS
l l.
RFC 822/2822	The basic Internet email format specification
RFC 1123	Various 822 parameter clarifications
RFC 1341/1521/2045	MIME specification (body, formats)
RFC 1342/1522/2047	"MIME-2" specification (headers)
.TE
.PP
.SH AUTHOR
This program authored and copyright by:
.RS 3em
Rayan Zachariassen <no address>
.RE
Extensive modifications by:
.RS 3em
Matti Aarnio <mea@nic.funet.fi>
.RE
