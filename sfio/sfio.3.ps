%!PS-Adobe-3.0
%%Creator: groff version 1.11
%%CreationDate: Mon Aug 23 14:43:11 1999
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.11 0
%%Pages: 25
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.11 0
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/FL{
currentgray exch setgray fill setgray
}bind def
/BL/fill load def
/LW/setlinewidth load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 9
/Times-Bold@0 SF -.18(NA)72 84 S(ME).18 E/F2 10/Times-Bold@0 SF(s\214o)
108 96 Q F0 2.5<ad73>2.5 G(afe/f)-2.5 E(ast string/\214le input/output)
-.1 E F1(SYNOPSIS)72 112.8 Q F0 5(#include <s\214o.h>)108 124.8 R F2
-.35(DA)87 141.6 S 1.8 -.9(TA T)-.6 H(YPES).9 E F0 -1.29(Vo)108 153.6 S
(id_t;)1.29 E(Sfof)108 165.6 Q(f_t;)-.25 E(S\215ong_t;)108 177.6 Q
(Sfulong_t;)108 189.6 Q(Sfdouble_t;)108 201.6 Q(S\214o_t;)108 225.6 Q
(Sfdisc_t;)108 249.6 Q 7.5(ssize_t \(*Sfread_f\)\(S\214o_t*,)108 261.6 R
-1.29(Vo)2.5 G(id_t*, size_t, Sfdisc_t*\);)1.29 E 7.5
(ssize_t \(*Sfwrite_f\)\(S\214o_t*,)108 273.6 R(const V)2.5 E
(oid_t*, size_t, Sfdisc_t*\);)-1.29 E(Sfof)108 285.6 Q 7.5
(f_t \(*Sfseek_f\)\(S\214o_t*,)-.25 F(Sfof)2.5 E(f_t, int, Sfdisc_t*\);)
-.25 E 17.5(int \(*Sfe)108 297.6 R(xcept_f\)\(S\214o_t*, int, V)-.15 E
(oid_t*, Sfdisc_t*\);)-1.29 E(Sf)108 321.6 Q(fmt_t;)-.25 E 17.5
(int \(*Sf)108 333.6 R(fmte)-.25 E(xt_f\)\(S\214o_t*, V)-.15 E
(oid_t*, Sf)-1.29 E(fmt_t*\);)-.25 E 17.5(int \(*Sf)108 345.6 R(fmte)
-.25 E -.15(ve)-.25 G(nt_f\)\(S\214o_t*, int, V).15 E(oid_t*, Sf)-1.29 E
(fmt_t*\);)-.25 E(SFIO_VERSION)108 369.6 Q F2(BIT FLA)87 386.4 Q(GS)-.55
E F0(SF_STRING)108 398.4 Q(SF_READ)108 410.4 Q(SF_WRITE)108 422.4 Q
(SF_APPEND)108 434.4 Q(SF_LINE)108 446.4 Q(SF_SHARE)108 458.4 Q
(SF_PUBLIC)108 470.4 Q(SF_MALLOC)108 482.4 Q(SF_ST)108 494.4 Q -1.11(AT)
-.93 G(IC)1.11 E(SF_IOCHECK)108 506.4 Q(SF_B)108 518.4 Q(UFCONST)-.1 E
(SF_WHOLE)108 530.4 Q F2(OPENING/CLOSING STREAMS)87 547.2 Q F0 7.5
(S\214o_t* sfne)108 559.2 R(w\(S\214o_t* f, V)-.25 E(oid_t* b)-1.29 E
(uf, size_t size, int fd, int \215ags\);)-.2 E 7.5
(S\214o_t* sfopen\(S\214o_t*)108 571.2 R
(f, const char* string, const char* mode\);)2.5 E 7.5
(S\214o_t* sfpopen\(S\214o_t*)108 583.2 R
(f, const char* cmd, const char* mode\);)2.5 E 7.5
(S\214o_t* sftmp\(size_t)108 595.2 R(size\);)2.5 E 17.5
(int sfclose\(S\214o_t*)108 607.2 R(f\);)2.5 E F2(INPUT/OUTPUT OPERA)87
624 Q(TIONS)-.95 E F0 17.5(int sfgetc\(S\214o_t*)108 636 R(f\);)2.5 E
17.5(int sfputc\(S\214o_t*)108 648 R(f, int c\);)2.5 E 17.5
(int sfnputc\(S\214o_t*)108 660 R(f, int c, int n\);)2.5 E 17.5
(int sfungetc\(S\214o_t*)108 672 R(f, int c\);)2.5 E 2.5
(Sfulong_t sfgetu\(S\214o_t*)108 696 R(f\);)2.5 E 17.5
(int sfputu\(S\214o_t*)108 708 R(f, Sfulong_t v\);)2.5 E 5
(S\215ong_t sfgetl\(S\214o_t*)108 720 R(f\);)2.5 E(05 August 1999)
274.055 768 Q(1)197.055 E EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R 17.5
(int sfputl\(S\214o_t*)108 84 R(f, S\215ong_t v\);)2.5 E
(Sfdouble_t sfgetd\(S\214o_t* f\);)108 96 Q 17.5(int sfputd\(S\214o_t*)
108 108 R(f, Sfdouble_t v\);)2.5 E 12.5(char* sfgetr\(S\214o_t*)108 132
R(f, int rsc, int type\);)2.5 E 7.5(ssize_t sfputr\(S\214o_t*)108 144 R
(f, const char* s, int rsc\);)2.5 E(Sfof)108 156 Q 7.5(f_t sfmo)-.25 F
-.15(ve)-.15 G(\(S\214o_t* fr).15 E 2.5(,S)-.4 G(\214o_t* fw)-2.5 E 2.5
(,S)-.65 G(fof)-2.5 E(f_t n, int rsc\);)-.25 E 7.5
(ssize_t sfread\(S\214o_t*)108 180 R(f, V)2.5 E(oid_t* b)-1.29 E
(uf, size_t n\);)-.2 E 7.5(ssize_t sfwrite\(S\214o_t*)108 192 R
(f, const V)2.5 E(oid_t* b)-1.29 E(uf, size_t n\);)-.2 E(Sfof)108 204 Q
7.5(f_t sfseek\(S\214o_t*)-.25 F(f, Sfof)2.5 E(f_t of)-.25 E
(fset, int type\);)-.25 E -1.29(Vo)108 216 S 7.5(id_t* sfreserv)1.29 F
(e\(S\214o_t* f, ssize_t n, int lock\);)-.15 E/F1 10/Times-Bold@0 SF
-.35(DA)87 232.8 S 1.8 -.9(TA F)-.6 H(ORMA).9 E(TTING)-.95 E F0 17.5
(int sfscanf\(S\214o_t*)108 244.8 R(f, const char* format, ...\);)2.5 E
17.5(int sfsscanf\(const)108 256.8 R
(char* s, const char* format, ...\);)2.5 E 17.5(int sfvsscanf\(const)108
268.8 R(char* s, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18
E 17.5(int sfvscanf\(S\214o_t*)108 280.8 R(f, const char* format, v)2.5
E(a_list ar)-.25 E(gs\);)-.18 E 17.5(int sfprintf\(S\214o_t*)108 304.8 R
(f, const char* format, ...\);)2.5 E 12.5(char* sfprints\(const)108
316.8 R(char* format, ...\);)2.5 E 17.5(int sfsprintf\(char*)108 328.8 R
(s, int n, const char* format, ...\);)2.5 E 17.5(int sfvsprintf\(char*)
108 340.8 R(s, int n, const char* format, v)2.5 E(a_list ar)-.25 E
(gs\);)-.18 E 17.5(int sfvprintf\(S\214o_t*)108 352.8 R
(f, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18 E(Sf)108
376.8 Q(fmt_t;)-.25 E 17.5(int \(*Sf)108 388.8 R(fmte)-.25 E
(xt_f\)\(S\214o_t* f, V)-.15 E(oid_t* v)-1.29 E 2.5(,S)-.65 G -.25(ff)
-2.5 G(mt_t* fe\);).25 E 17.5(int \(*Sf)108 400.8 R(fmte)-.25 E -.15(ve)
-.25 G(nt_f\)\(S\214o_t* f, int type, V).15 E(oid_t* v)-1.29 E 2.5(,S)
-.65 G -.25(ff)-2.5 G(mt_t* fe\);).25 E -.2(vo)108 412.8 S 15(id v).2 F
(a_cop)-.25 E(y\(v)-.1 E(a_list to, v)-.25 E(a_list fr\);)-.25 E 15
(long sf)108 424.8 R(fmtv)-.25 E(ersion\(Sf)-.15 E(fmt_t* fe, type\);)
-.25 E F1 -.1(BU)87 441.6 S(FFERING, SYNCHR).1 E(ONIZA)-.3 E(TION)-.95 E
F0 -1.29(Vo)108 453.6 S 7.5(id_t* sfsetb)1.29 F(uf\(S\214o_t* f, V)-.2 E
(oid_t* b)-1.29 E(uf, size_t size\);)-.2 E 17.5(int sfsync\(S\214o_t*)
108 465.6 R(f\);)2.5 E 17.5(int sfpoll\(S\214o_t**)108 477.6 R
(\215ist, int n, int timeout\);)2.5 E 7.5(S\214o_t* sfpool\(S\214o_t*)
108 489.6 R(f, S\214o_t* poolf, int mode\);)2.5 E 17.5(int sfpur)108
501.6 R(ge\(S\214o_t* f\);)-.18 E F1(DISCIPLINE, EVENT HANDLING)87 518.4
Q F0 2.5(Sfdisc_t* sfdisc\(S\214o_t*)108 530.4 R(f, Sfdisc_t* disc\);)
2.5 E 17.5(int sfraise\(S\214o_t*)108 542.4 R(f, int type, V)2.5 E
(oid_t* data\);)-1.29 E 7.5(ssize_t sfrd\(S\214o_t*)108 554.4 R(f, V)2.5
E(oid_t* b)-1.29 E(uf, size_t n, Sfdisc_t* disc\);)-.2 E 7.5
(ssize_t sfwr\(S\214o_t*)108 566.4 R(f, const V)2.5 E(oid_t* b)-1.29 E
(uf, size_t n, Sfdisc_t* disc\);)-.2 E(Sfof)108 578.4 Q 7.5
(f_t sfsk\(S\214o_t*)-.25 F(f, Sfof)2.5 E(f_t of)-.25 E
(fset, int type, Sfdisc_t* disc\);)-.25 E F1(STREAM CONTR)87 595.2 Q(OL)
-.3 E F0 17.5(int sfset\(S\214o_t*)108 607.2 R(f, int \215ags, int i\);)
2.5 E 17.5(int sfsetfd\(S\214o_t*)108 619.2 R(f, int fd\);)2.5 E 7.5
(S\214o_t* sfstack\(S\214o_t*)108 631.2 R(base, S\214o_t* top\);)2.5 E
7.5(S\214o_t* sfsw)108 643.2 R(ap\(S\214o_t* f1, S\214o_t* f2\);)-.1 E
F1(STREAM INFORMA)87 660 Q(TION)-.95 E F0(Sfof)108 672 Q 7.5
(f_t sfsize\(S\214o_t*)-.25 F(f\);)2.5 E(Sfof)108 684 Q 7.5
(f_t sftell\(S\214o_t*)-.25 F(f\);)2.5 E 7.5(ssize_t sfv)108 696 R
(alue\(S\214o_t* f\);)-.25 E 17.5(int sf)108 708 R
(\214leno\(S\214o_t* f\);)-.25 E(05 August 1999)274.055 768 Q(2)197.055
E EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R 17.5
(int sfstack)108 84 R(ed\(S\214o_t* f\);)-.1 E 17.5
(int sfeof\(S\214o_t*)108 96 R(f\);)2.5 E 17.5(int sferror\(S\214o_t*)
108 108 R(f\);)2.5 E 17.5(int sfclrerr\(S\214o_t*)108 120 R(f\);)2.5 E
17.5(int sfclrlock\(S\214o_t*)108 132 R(f\);)2.5 E 17.5(int sfnotify\(v)
108 156 R(oid \(*notify\)\(S\214o_t* f, int type, int fd\)\);)-.2 E/F1
10/Times-Bold@0 SF(MISCELLANEOUS FUNCTIONS)87 172.8 Q F0 7.5
(ssize_t sfslen\(\);)108 184.8 R 17.5(int sfulen\(Sfulong_t)108 196.8 R
(v\);)2.5 E 17.5(int s\215len\(S\215ong_t)108 208.8 R(v\);)2.5 E 17.5
(int sfdlen\(Sfdouble_t)108 220.8 R(v\);)2.5 E 7.5(ssize_t sfpkrd\(int)
108 232.8 R(fd, V)2.5 E(oid_t* b)-1.29 E(uf, size_t n,)-.2 E
(int rsc, long tm, int peek\);)153 244.8 Q F1(FULL STR)87 261.6 Q
(UCTURE SFIO_T)-.3 E F0 5(#include <s\214o_t.h>)108 273.6 R 7.5
(#de\214ne SFNEW\(b)108 285.6 R(uf,size,\214le,\215ags,disc\))-.2 E F1
(EXAMPLE DISCIPLINES)87 302.4 Q F0 17.5(int sfdcdio\(S\214o_t*)108 314.4
R(f, size_t b)2.5 E(ufsize\);)-.2 E 17.5(int sfdcdos\(S\214o_t*)108
326.4 R(f\);)2.5 E 17.5(int sfdc\214lter\(S\214o_t*)108 338.4 R
(f, const char* cmd\);)2.5 E 17.5(int sfdclzw\(S\214o_t*)108 350.4 R
(f\);)2.5 E 17.5(int sfdcseekable\(S\214o_t*)108 362.4 R(f\);)2.5 E 17.5
(int sfdcslo)108 374.4 R(w\(S\214o_t* f\);)-.25 E 17.5
(int sfdcsubstream\(S\214o_t*)108 386.4 R(f, S\214o_t* parent,)2.5 E
(Sfof)170.5 398.4 Q(f_t of)-.25 E(fset, Sfof)-.25 E(f_t e)-.25 E
(xtent\);)-.15 E 17.5(int sfdctee\(S\214o_t*)108 410.4 R
(f, S\214o_t* tee\);)2.5 E 17.5(int sfdcunion\(S\214o_t*)108 422.4 R
(f, S\214o_t** array)2.5 E 2.5(,i)-.65 G(nt n\);)-2.5 E F1(STDIO-COMP)87
439.2 Q -.95(AT)-.74 G(IBILITY).95 E F0 5(#include <stdio.h>)108 451.2 R
(cc ... -lstdio -ls\214o)108 463.2 Q/F2 9/Times-Bold@0 SF(DESCRIPTION)72
480 Q F0 .084(S\214o is a library of I/O functions to manage b)108 492 R
(uf)-.2 E .083(fered streams.)-.25 F .083(Each S\214o stream is a)5.083
F/F3 10/Times-Italic@0 SF .083(\214le str)2.583 F(eam)-.37 E F0 2.583
(,r)C(epresenting)-2.583 E 3.226<618c>108 504 S .727
(le \(see open\(2\)\), or a)-3.226 F F3 .727(string str)3.227 F(eam)-.37
E F0 3.227(,r)C .727(epresenting a memory se)-3.227 F 3.227(gment. Be)
-.15 F .727(yond the usual I/O operations)-.15 F .873
(on streams, S\214o pro)108 516 R .873(vides I/O disciplines for e)-.15
F .873(xtended data processing, stream stacks for recursi)-.15 F 1.172
-.15(ve s)-.25 H(tream).15 E 1.02
(processing, and stream pools for automatic data synchronization.)108
528 R 1.02(The sfprintf\(\)/sfscanf\(\) functions allo)6.02 F(w)-.25 E
(applications to de\214ne their o)108 540 Q
(wn formatting patterns as well as to rede\214ne e)-.25 E
(xisting patterns.)-.15 E 2.682(Ad)108 556.8 S .182(iscipline de\214nes\
 analogues of the system calls read\(2\), write\(2\) and lseek\(2\).)
-2.682 F .182(Such system calls or their)5.182 F .09
(discipline replacements are used to process stream data.)108 568.8 R
.091(Henceforth, `)5.091 F(`)-.74 E F3 .091(system call)B F0 1.571 -.74
('' w)D .091(ill mean a system call).74 F
(or its discipline replacement.)108 580.8 Q 2.932(As)108 597.6 S .431
(ystem call is said to cause an e)-2.932 F .431
(xception if its return v)-.15 F .431(alue is non-positi)-.25 F -.15(ve)
-.25 G 5.431(.U).15 G .431(nless o)-5.431 F -.15(ve)-.15 G .431
(rridden by e).15 F(xcep-)-.15 E .901(tion handlers \(see sfdisc\(\)\),\
 an interrupted system call \(errno == EINTR on UNIX systems\) will be \
auto-)108 609.6 R(matically rein)108 621.6 Q -.2(vo)-.4 G -.1(ke).2 G
2.5(dt).1 G 2.5(oc)-2.5 G(ontinue the ongoing operation.)-2.5 E .828
(The b)108 638.4 R(uf)-.2 E .828
(fer of a stream is typically a memory se)-.25 F .827
(gment allocated via malloc\(3\) or supplied by the applica-)-.15 F
2.713(tion. File)108 650.4 R .213
(streams may also use memory mapping \(mmap\(2\)\) if that is more ef)
2.713 F 2.713(\214cient. When)-.25 F .214(memory map-)2.714 F .601(ping\
 is used, the underlying \214le should not be truncated while the strea\
m is acti)108 662.4 R -.15(ve)-.25 G 5.601(.M).15 G .601
(emory mapping can)-5.601 F(be turned of)108 674.4 Q 2.5(fu)-.25 G
(sing sfsetb)-2.5 E(uf\(\).)-.2 E .226(There are three)108 691.2 R F3
(standar)2.727 E 2.727(ds)-.37 G(tr)-2.727 E(eams)-.37 E F0 2.727(:s)C
.227(fstdin for input \(\214le descriptor 0 on UNIX systems\), sfstdout\
 for normal)-2.727 F(output \(\214le descriptor 1\), and sfstderr for e\
rror output \(\214le descriptor 2\).)108 703.2 Q(05 August 1999)274.055
768 Q(3)197.055 E EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF -.35(DA)87 84 S 1.8 -.9(TA T)-.6 H(YPES).9 E -1(Vo)92
96 S(id_t*)1 E F0 .662(This de\214nes a type suitable to e)108 108 R
.661(xchange data of unkno)-.15 F .661
(wn types between application and S\214o.)-.25 F -1.29(Vo)5.661 G .661
(id_t is a)1.29 F(macro de\214ned as v)108 120 Q
(oid for ANSI-C and C++ and char for other compilation en)-.2 E
(vironments.)-.4 E F1(Sf)92 141.6 Q(off_t)-.25 E F0
(This de\214nes an inte)108 153.6 Q
(gral type suitable to address the lar)-.15 E(gest possible \214le e)
-.18 E(xtent.)-.15 E F1(Sfulong_t, S\215ong_t, Sfdouble_t)92 175.2 Q F0
1.322(These are respecti)108 187.2 R -.15(ve)-.25 G 1.322(ly the lar).15
F 1.322(gest unsigned inte)-.18 F(ger)-.15 E 3.822(,s)-.4 G 1.322
(igned inte)-3.822 F(ger)-.15 E 3.822(,a)-.4 G 1.322
(nd \215oating point v)-3.822 F 1.322(alue types on the)-.25 F
(local platform.)108 199.2 Q F1(S\214o_t)92 220.8 Q F0
(This de\214nes the stream type.)108 232.8 Q F1(Sfdisc_t)92 254.4 Q
(ssize_t \(*Sfr)92 266.4 Q(ead_f\)\(S\214o_t*, V)-.18 E
(oid_t*, size_t, Sfdisc_t*\))-1 E
(ssize_t \(*Sfwrite_f\)\(S\214o_t*, const V)92 278.4 Q
(oid_t*, size_t, Sfdisc_t*\))-1 E(Sf)92 290.4 Q
(off_t \(*Sfseek_f\)\(S\214o_t*, Sf)-.25 E(off_t, int, Sfdisc_t*\))-.25
E(int \(*Sfexcept_f\)\(S\214o_t*, int, V)92 302.4 Q(oid_t*, Sfdisc_t*\))
-1 E F0 .645(Sfdisc_t de\214nes a stream discipline structure.)108 314.4
R .644(Sfread_f, Sfwrite_f and Sfseek_f are the types of discipline)
5.644 F .149(functions to replace the system calls: read\(2\), write\(2\
\) and lseek\(2\).)108 326.4 R(Sfe)5.149 E .149
(xcept_f is the type of an e)-.15 F -.15(ve)-.25 G(nt-han-).15 E
(dling function.)108 338.4 Q(See sfdisc\(\) for more details.)5 E F1
(Sffmt_t)92 360 Q(int \(*Sffmtext_f\)\(S\214o_t*, V)92 372 Q
(oid_t*, Sffmt_t*\))-1 E(int \(*Sffmte)92 384 Q -.1(ve)-.15 G
(nt_f\)\(S\214o_t*, int, V).1 E(oid_t*, Sffmt_t*\))-1 E F0(Sf)108 396 Q
2.394(fmt_t de\214nes a formatting en)-.25 F 2.393
(vironment that can be used to e)-.4 F 2.393
(xtend scanning and formatting in the)-.15 F .6
(sfprint\(\)/sfscanf\(\) functions. Sf)108 408 R(fmte)-.25 E .6
(xt_f and Sf)-.15 F(fmte)-.25 E -.15(ve)-.25 G .6
(nt_f de\214ne the types of e).15 F .6(xtension functions de\214nable)
-.15 F(in Sf)108 420 Q 2.5(fmt_t. See)-.25 F(Sf)2.5 E(fmt_t belo)-.25 E
2.5(wf)-.25 G(or more details.)-2.5 E F1(SFIO_VERSION)92 441.6 Q F0
1.183(This is a macro v)108 453.6 R 1.183
(alue of type long int that de\214nes the current v)-.25 F 1.182
(ersion number of S\214o. F)-.15 F 1.182(or e)-.15 F 1.182(xample, the)
-.15 F(S\214o1998')108 465.6 Q 2.5(sv)-.55 G
(ersion number is 19980501L \(which also indicates its release date\).)
-2.65 E F1(BIT FLA)87 494.4 Q(GS)-.55 E F0 3.43(An)108 506.4 S .93
(umber of bit \215ags control stream operations.)-3.43 F(The)5.931 E
3.431(ya)-.15 G .931
(re set either at stream initialization or by calling)-3.431 F 2.5
(sfset\(\). F)108 518.4 R(ollo)-.15 E(wing are the \215ags:)-.25 E
(SF_STRING:)108 535.2 Q(The stream is memory-based.)144 547.2 Q
(SF_READ, SF_WRITE, SF_APPEND:)108 564 Q .943
(Flags SF_READ and SF_WRITE indicate readability and writability)144 576
R 5.943(.F)-.65 G .943(lag SF_APPEND asserts)-5.943 F .873(that the str\
eam is a \214le opened in append mode \(see open\(2\) and fcntl\(2\)\) \
so that data is al)144 588 R -.1(wa)-.1 G(ys).1 E .094
(output at the end of \214le.)144 600 R .093(On systems without direct \
support for append mode, S\214o uses lseek\(2\) or)5.094 F
(its discipline replacement to approximate this beha)144 612 Q(vior)-.2
E(.)-.55 E(SF_LINE:)108 628.8 Q 1.447(The stream is line-oriented.)144
640.8 R -.15(Fo)6.447 G 3.947(raS).15 G 1.447
(F_WRITE stream, this means that b)-3.947 F(uf)-.2 E 1.448
(fered data is \215ushed)-.25 F(whene)144 652.8 Q -.15(ve)-.25 G 2.601
(ran).15 G -.25(ew)-2.601 G .101(-line character).25 F 2.601(,\\)-.4 G
.101(n, is output.)-2.601 F -.15(Fo)5.101 G 2.601(raS).15 G .1
(F_READ stream, SF_LINE is only signi\214cant)-2.601 F 1.147
(during calls to functions in the sfscanf\(\) f)144 664.8 R(amily)-.1 E
6.147(.S)-.65 G 1.148(F_LINE is set on initialization of an)-6.147 F
3.648(ys)-.15 G(tream)-3.648 E(representing a terminal de)144 676.8 Q
(vice.)-.25 E(SF_SHARE, SF_PUBLIC:)108 693.6 Q .955(Flag SF_SHARE means\
 that the underlying \214le descriptor is shared by independent entitie\
s \(for)144 705.6 R -.15(ex)144 717.6 S(ample, multiple processes\).).15
E(05 August 1999)274.055 768 Q(4)197.055 E EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R -.15(Fo)144
84 S 3.545(ras).15 G 1.045(eekable \214le stream, SF_SHARE means that t\
he logical stream and the ph)-3.545 F 1.046(ysical \214le posi-)-.05 F
.229(tions will be made the same before a system call to perform ph)144
96 R .229(ysical I/O.)-.05 F .228(There are dif)5.229 F .228
(ferent pos-)-.25 F 3.207(sibilities. If)144 108 R .707
(SF_PUBLIC is not set, the ph)3.207 F .708
(ysical \214le position is made equal to the logical stream)-.05 F 2.731
(position. If)144 120 R .231(SF_PUBLIC is set, there are tw)2.731 F
2.731(oc)-.1 G 2.731(ases. If)-2.731 F .23(the ph)2.731 F .23
(ysical \214le position has changed from)-.05 F .34(its last kno)144 132
R .34(wn position, the logical stream position is made equal to the ne)
-.25 F 2.84(wp)-.25 G -.05(hy)-2.84 G .34(sical \214le position.).05 F
(Finally)144 144 Q 3.32(,i)-.65 G 3.32(ft)-3.32 G .82(he ph)-3.32 F .82
(ysical \214le location remains the same as its last kno)-.05 F .82
(wn position, the ph)-.25 F .82(ysical \214le)-.05 F
(position is made the same as the logical stream position.)144 156 Q
-.15(Fo)144 180 S 2.861(ra).15 G 2.861(nu)-2.861 G .361
(nseekable stream \(e.g., pipes or terminal de)-2.861 F .362
(vices\), if possible, SF_SHARE means that the)-.25 F 1.382
(block and record I/O operations \(sfread\(\), sfwrite\(\), sfmo)144 192
R -.15(ve)-.15 G 1.382(\(\), sfgetr\(\), sfputr\(\), sfreserv).15 F
1.381(e\(\), sfs-)-.15 F .218(canf\(\) and sfvprintf\(\)\) will ensure:\
 \(1\) after each writing operation, the stream is synchronized and)144
204 R .323
(\(2\) each reading operation only reads the requested amount.)144 216 R
.323(Note, ho)5.323 F(we)-.25 E -.15(ve)-.25 G 1.122 -.4(r, t).15 H .322
(hat \(2\) is not al).4 F -.1(wa)-.1 G(ys).1 E
(possible without proper OS f)144 228 Q
(acilities such as recv\(2\) or streamio\(4\).)-.1 E 2.5(As)144 252 S(t\
andard stream that is seekable will be initialized with SF_SHARE|SF_PUB\
LIC.)-2.5 E(SF_MALLOC:)108 268.8 Q(The stream b)144 280.8 Q(uf)-.2 E
(fer w)-.25 E
(as obtained via malloc\(3\) and can be reallocated or freed.)-.1 E
(SF_ST)108 297.6 Q -1.11(AT)-.93 G(IC:)1.11 E .415
(The stream structure should not be freed when closed \(sfclose\(\)\).)
144 309.6 R .415(This \215ag is used by an applica-)5.415 F .688
(tions that allocate their o)144 321.6 R .687(wn stream structures. Suc\
h applications must use the header \214le s\214o_t.h)-.25 F
(instead of s\214o.h.)144 333.6 Q(SF_IOCHECK:)108 350.4 Q .446
(If the stream has a discipline e)144 362.4 R .446(xception handler)-.15
F 2.946(,e)-.4 G .446(xceptions will be raised in sfsync\(\), sfpur)
-3.096 F .446(ge\(\) or)-.18 F
(before a system call read\(2\) or write\(2\) \(see sfdisc\(\)\).)144
374.4 Q(SF_B)108 391.2 Q(UFCONST)-.1 E(:)-.5 E 1.67
(The application guarantees that a stream b)144 403.2 R(uf)-.2 E 1.669
(fer obtained via sfreserv)-.25 F 1.669(e\(\) or sfgetr\(\) will not be)
-.15 F 3.141(modi\214ed. This)144 415.2 R(allo)3.141 E .641
(ws S\214o to tune b)-.25 F(uf)-.2 E .641
(fer management and memory maps.)-.25 F -.15(Fo)5.642 G 3.142(re).15 G
.642(xample, a mem-)-3.292 F .188
(ory-mapped stream will map with MAP_SHARED on and PR)144 427.2 R -.4
(OT)-.4 G .188(_WRITE of).4 F 2.688(fs)-.25 G 2.688(ot)-2.688 G .187
(hat the \214le itself)-2.688 F(will lik)144 439.2 Q
(ely be the backing store for mapped pages.)-.1 E(SF_WHOLE:)108 456 Q
.574(This \215ag guarantees that data written in an)144 468 R 3.074(ys)
-.15 G .575(ingle sfwrite\(\) or sfputr\(\) call will al)-3.074 F -.1
(wa)-.1 G .575(ys be output).1 F .766(as a whole to the output de)144
480 R 3.266(vice. This)-.25 F .765
(is useful in certain applications \(e.g., netw)3.266 F .765
(orking\) where a)-.1 F(comple)144 492 Q 2.947(xo)-.15 G .447
(bject must be output without being split in dif)-2.947 F .447
(ferent system calls.)-.25 F .448(Note that the respec-)5.448 F(ti)144
504 Q .3 -.15(ve s)-.25 H(tream still b).15 E(uf)-.2 E
(fers data as the b)-.25 E(uf)-.2 E(fer can accomodate.)-.25 E/F1 10
/Times-Bold@0 SF(OPENING/CLOSING STREAMS)87 537.6 Q
(S\214o_t* sfnew\(S\214o_t* f)92 549.6 Q 2.5(,V)-.15 G(oid_t* b)-3.5 E
(uf)-.2 E 2.5(,s)-.15 G(ize_t size, int fd, int \215ags\))-2.5 E F0
(This function creates or rene)108 561.6 Q(ws a stream.)-.25 E
(It returns the ne)5 E 2.5(ws)-.25 G(tream on success and NULL on error)
-2.5 E(.)-.55 E 27.39(f: If)108 578.4 R 3.015(fi)3.015 G 3.015(sN)-3.015
G .515(ULL, a ne)-3.015 F 3.015(ws)-.25 G .515(tream is created.)-3.015
F .515(Otherwise, f is reused.)5.515 F .515
(In this case, if \215ags does not ha)5.515 F -.15(ve)-.2 G(SF_EOF)144
590.4 Q 2.632(,fs)-.8 G .132
(hall be closed via sfclose\(\) before being reused.)-2.632 F .132
(During a stream rene)5.132 F -.1(wa)-.25 G .132(l, b).1 F(uf)-.2 E(fer)
-.25 E 2.632(,p)-.4 G(ool)-2.632 E .689
(and discipline stack are preserv)144 602.4 R 3.189(ed. Note)-.15 F .688
(that, e)3.189 F .688(xcept for SF_ST)-.15 F -1.11(AT)-.93 G .688
(IC streams, rene)1.11 F .688(wing a stream)-.25 F
(already closed will result in unde\214ned beha)144 614.4 Q(vior)-.2 E
(.)-.55 E -.2(bu)108 631.2 S(f, size:).2 E(These determine a b)144 643.2
Q(uf)-.2 E(fering scheme.)-.25 E(See sfsetb)5 E
(uf\(\) for more details.)-.2 E 22.39(fd: If)108 660 R .845
(SF_STRING is speci\214ed in \215ags, this is ignored.)3.345 F .846
(Otherwise, fd is a \214le descriptor \(e.g., from)5.846 F 1.026
(open\(2\)\) to use for ra)144 672 R 3.526(wd)-.15 G 1.026(ata I/O.)
-3.526 F 1.026
(Note that S\214o supports unseekable \214le descriptors opened for)
6.026 F(both read and write, e.g., sock)144 684 Q(ets.)-.1 E 11.83
(\215ags: This)108 700.8 R(is composed from SF_EOF and bit v)2.5 E
(alues de\214ned in the)-.25 E F1(BIT FLA)2.5 E(GS)-.55 E F0(section.)
2.5 E(05 August 1999)274.055 768 Q(5)197.055 E EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(S\214o_t* sf)92 84 Q(open\(S\214o_t* f)-.25 E 2.5(,c)
-.15 G(onst char* string, const char* mode\))-2.5 E F0 .542
(If string is NULL and f is a \214le stream that has not performed an)
108 96 R 3.042(yI)-.15 G .542(/O operation, sfopen\(\) will change the)
-3.042 F .432(modes of f according to mode.)108 108 R .431
(In this case, sfopen\(\) returns f on success and NULL on error)5.432 F
5.431(.T)-.55 G .431(his some-)-5.431 F(what unusual usage of sfopen\(\
\) is good for changing the prede\214ned modes of standard streams.)108
120 Q .434(sfopen\(\) is normally used to create a ne)108 144 R 2.934
(ws)-.25 G .434(tream or rene)-2.934 F 2.935(was)-.25 G 2.935(tream. In)
-2.935 F .435(this case, it returns the ne)2.935 F 2.935(ws)-.25 G
(tream)-2.935 E(on success and NULL on error)108 156 Q 5(.B)-.55 G(elo)
-5 E 2.5(wa)-.25 G(re the meanings of the ar)-2.5 E(guments:)-.18 E
27.39(f: This)108 172.8 R(is treated as in sfne)2.5 E(w\(\).)-.25 E 7.94
(string: This)108 189.6 R
(is a \214le name or a string to perform I/O on.)2.5 E 8.5(mode: This)
108 206.4 R(is composed from the set of letters {s, r)2.5 E 2.5(,w)-.4 G
2.5(,+)-3.15 G 2.5(,a)-2.5 G 2.5(,x)-2.5 G 2.5(,b)-2.5 G 2.5(,t)-2.5 G
(}.)-2.5 E 2.959(ss)144 230.4 S .459
(peci\214es opening a string stream.)-2.959 F .459
(string can be a null-terminated string or NULL.)5.459 F .458
(Specifying s)5.458 F(alone is equi)144 242.4 Q -.25(va)-.25 G
(lent to specifying sr).25 E 5(.I)-.55 G 2.5(fsi)-5 G 2.5(sn)-2.5 G
(ot speci\214ed, string de\214nes a \214le name.)-2.5 E 2.838(ra)144
266.4 S .339(nd w specify read and write modes.)-2.838 F .339
(Write mode creates and/or truncates the gi)5.339 F -.15(ve)-.25 G 2.839
<6e8c>.15 G .339(le to mak)-2.839 F(e)-.1 E(an empty \214le.)144 278.4 Q
(The + modi\214er indicates that the stream is opened for both read and\
 write.)5 E 2.5(as)144 302.4 S(peci\214es append mode, i.e., data is al)
-2.5 E -.1(wa)-.1 G(ys output at end of \214le.).1 E 2.5(xs)144 326.4 S
(peci\214es e)-2.5 E(xclusi)-.15 E .3 -.15(ve m)-.25 H
(ode, i.e., a \214le opened for writing should not already e).15 E
(xist.)-.15 E 2.5(ba)144 350.4 S(nd t specify binary and te)-2.5 E
(xt modes.)-.15 E F1(S\214o_t* sfpopen\(S\214o_t* f)92 379.2 Q 2.5(,c)
-.15 G(onst char* cmd, const char* mode\))-2.5 E F0 .592
(This function opens a stream that corresponds to the coprocess cmd.)108
391.2 R .592(The ar)5.592 F .592(gument mode should be com-)-.18 F .549
(posed from r)108 403.2 R 3.049(,w)-.4 G 3.049(,a)-3.699 G .549(nd +.)
-3.049 F .549(The ar)5.549 F .549
(gument f, if not NULL, is a stream to be rene)-.18 F .549
(wed \(see sfne)-.25 F 3.049(w\(\)\). sfpopen\(\))-.25 F(returns the ne)
108 415.2 Q 2.5(ws)-.25 G(tream or NULL on error)-2.5 E(.)-.55 E .182(T\
he standard input/output of cmd is connected to the application via a p\
ipe if the stream is opened for writ-)108 439.2 R 2.773(ing/reading. If)
108 451.2 R .273
(the stream is opened for both reading and writing, there will be tw)
2.773 F 2.774(od)-.1 G(if)-2.774 E .274(ferent associated \214le)-.25 F
(descriptors, one for each type of I/O \(note the ef)108 463.2 Q
(fect on sf)-.25 E(\214leno\(\)\).)-.25 E .247(On opening a coprocess f\
or writing \(i.e., mode contains w or +\), the signal handler for SIGPI\
PE in the par)108 487.2 R(-)-.2 E .73
(ent application will be set to SIG_IGN if it is SIG_DFL at that time.)
108 499.2 R .73(This protects the parent application)5.73 F .539
(from being accidentally killed on an)108 511.2 R 3.039(ya)-.15 G .539
(ttempt to write to a coprocess that closes its reading end.)-3.039 F
(Applica-)5.538 E(tions that need to detect such write errors should us\
e disciplines and e)108 523.2 Q(xception handlers \(see sfdisc\(\)\).)
-.15 E .328(The command cmd is e)108 547.2 R -.15(xe)-.15 G .329
(cuted by an).15 F/F2 10/Times-Italic@0 SF(interpr)2.829 E(eter)-.37 E
F0 .329(which is either /bin/sh or an e)2.829 F -.15(xe)-.15 G .329
(cutable command de\214ned).15 F 1.038(by the en)108 559.2 R 1.038
(vironment v)-.4 F 1.038(ariable SHELL.)-.25 F 1.037
(In either case, the interpreter is in)6.038 F -.2(vo)-.4 G -.1(ke).2 G
3.537(dw).1 G 1.037(ith 2 ar)-3.537 F 1.037(guments, respec-)-.18 F(ti)
108 571.2 Q -.15(ve)-.25 G .857(ly -c and the gi).15 F -.15(ve)-.25 G
3.357(nc).15 G .858(ommand cmd. When the interpreter is /bin/sh or /bin\
/ksh, sfpopen\(\) may e)-3.357 F -.15(xe)-.15 G(cute).15 E
(the command cmd itself if there are no shell meta-characters in cmd.)
108 583.2 Q F1(S\214o_t* sftmp\(size_t size\))92 612 Q F0
(This function creates a stream for temporary data.)108 624 Q
(It returns the ne)5 E 2.5(ws)-.25 G(tream or NULL on error)-2.5 E(.)
-.55 E 3.542(As)108 648 S 1.042(tream created by sftmp\(\) can be compl\
etely or partially memory-resident.)-3.542 F 1.041
(If size is SF_UNBOUND,)6.041 F .35(the stream is a pure string stream.)
108 660 R .351(If size is zero, the stream is a pure \214le stream.)5.35
F .351(Otherwise, the stream is)5.351 F .333
(\214rst created as a string stream b)108 672 R .333(ut when its b)-.2 F
(uf)-.2 E .333(fer gro)-.25 F .332(ws lar)-.25 F .332
(ger than size or on an)-.18 F 2.832(ya)-.15 G .332
(ttempt to change disci-)-2.832 F .066
(plines, a temporary \214le is created.)108 684 R -1 -.8(Tw o)5.066 H
(en)3.366 E .066(vironment v)-.4 F .067(ariables, TMPP)-.25 F -1.11(AT)
-.92 G 2.567(Ha)1.11 G .067(nd TMPDIR, direct where tem-)-2.567 F .227
(porary \214les are created.)108 696 R(TMPP)5.227 E -1.11(AT)-.92 G .226
(H, if de\214ned, speci\214es a colon-separated set of directories to b\
e used in a)1.11 F 1.077(round-robin f)108 708 R 1.077
(ashion to create \214les.)-.1 F 1.077(If TMPP)6.077 F -1.11(AT)-.92 G
3.577(Hi)1.11 G 3.577(su)-3.577 G 1.078
(nde\214ned, TMPDIR can be used to specify a single)-3.577 F
(directory to create \214les.)108 720 Q(If neither of TMPP)5 E -1.11(AT)
-.92 G 2.5(Ha)1.11 G(nd TMPDIR are de\214ned, /tmp is used.)-2.5 E
(05 August 1999)274.055 768 Q(6)197.055 E EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(int sfclose\(S\214o_t* f\))92 84 Q F0 .321
(This function closes the stream f and frees its resources.)108 96 R
(SF_ST)5.321 E -1.11(AT)-.93 G .32
(IC should be used if the stream space is)1.11 F .037(to be preserv)108
108 R 2.537(ed. If)-.15 F 2.537(fi)2.537 G 2.537(st)-2.537 G .037(he ba\
se of a stream stack \(see sfstack\(\)\), all streams on the stack are \
closed.)-2.537 F .038(If f is a)5.037 F 3.155
(sfpopen-stream, sfclose\(\) w)108 120 R 3.155
(aits until the associated command terminates and returns its e)-.1 F
3.155(xit status.)-.15 F(sfclose\(\) returns -1 for f)108 132 Q
(ailure and 0 for success.)-.1 E 1.256(SF_READ|SF_SHARE and SF_WRITE st\
reams are synchronized before closing \(see sfsync\(\)\).)108 156 R
1.256(If f has)6.256 F .143(disciplines, their e)108 168 R .143
(xception handlers will be called twice.)-.15 F .142(The \214rst e)5.143
F .142(xception handler call has the type ar)-.15 F(gu-)-.18 E .151
(ment as one of SF_CLOSE or SF_NEW \(see sfdisc\(\).\))108 180 R .152
(The latter)5.152 F 2.652(,S)-.4 G .152
(F_NEW is used when a stream is being)-2.652 F .397(closed via sfne)108
192 R .397(w\(\) so that it can be rene)-.25 F 2.897(wed. The)-.25 F
.397(second call uses type as SF_FIN)2.897 F .397
(AL and is done after all)-.35 F .748(closing operations ha)108 204 R
1.048 -.15(ve s)-.2 H .748(ucceeded b).15 F .749
(ut before the stream itself is deallocated.)-.2 F .749
(In either case, if the e)5.749 F(xcep-)-.15 E .482
(tion handler returns a ne)108 216 R -.05(ga)-.15 G(ti).05 E .782 -.15
(ve v)-.25 H .481(alue, sfclose\(\) will immediately return this v)-.1 F
2.981(alue. If)-.25 F .481(the e)2.981 F .481(xception handler)-.15 F
(returns a positi)108 228 Q .3 -.15(ve v)-.25 H
(alue, sfclose\(\) will immediately return a zero v)-.1 E(alue.)-.25 E
F1(INPUT/OUPUT OPERA)87 261.6 Q(TIONS)-.95 E(int sfgetc\(S\214o_t* f\))
92 273.6 Q(int sfputc\(S\214o_t* f)92 285.6 Q 2.5(,i)-.15 G(nt c\))-2.5
E F0 .712(These functions read/write a byte)108 297.6 R .712
(from/to stream f.)5.712 F .713
(sfgetc\(\) returns the byte read or -1 on error)5.712 F 5.713(.s)-.55 G
(fputc\(\))-5.713 E(returns c on success and -1 on error)108 309.6 Q(.)
-.55 E F1(ssize_t sfnputc\(S\214o_t* f)92 338.4 Q 2.5(,i)-.15 G
(nt c, size_t n\))-2.5 E F0 .323
(This function attempts to write the byte c to f n times.)108 350.4 R
.322(It returns the number of bytes actually written or -1)5.322 F(on f)
108 362.4 Q(ailure.)-.1 E F1(int sfungetc\(S\214o_t* f)92 391.2 Q 2.5
(,i)-.15 G(nt c\))-2.5 E F0 .006
(This function pushes the byte c back into f.)108 403.2 R .007
(If c matches the byte immediately before the current position in)5.006
F -.2(bu)108 415.2 S -.25(ff).2 G .316
(ered data, the current position is simply back).25 F .316
(ed up \(note the ef)-.1 F .315
(fect on sftell\(\) and sfseek\(\)\). There is no)-.25 F .488(theoretic\
al limit on the number of bytes that can be pushed back into a stream. \
Pushed back bytes not part)108 427.2 R .044(of b)108 439.2 R(uf)-.2 E
.044(fered data will be discarded on an)-.25 F 2.543(yo)-.15 G .043
(peration that implies b)-2.543 F(uf)-.2 E .043(fer synchronization.)
-.25 F .043(sfungetc\(\) returns c)5.043 F(on success and -1 on f)108
451.2 Q(ailure.)-.1 E F1(Sfulong_t sfgetu\(S\214o_t* f\))92 480 Q
(int sfputu\(S\214o_t* f)92 492 Q 2.5(,S)-.15 G(fulong_t v\))-2.5 E F0
.646(These functions read and write Sfulong_t v)108 504 R .646
(alues in a compact v)-.25 F .646(ariable-length portable format.)-.25 F
(Portability)5.647 E .689(across a write architecture and a read archit\
ecture requires that the bit order in a byte is the same on both)108 516
R .424(architectures and the written v)108 528 R .424
(alue is storable in an Sfulong_t on the read architecture.)-.25 F .425
(sfgetu\(\) returns the)5.425 F -.25(va)108 540 S
(lue read or -1 on error).25 E 5(.s)-.55 G
(fputu\(\) returns the number of bytes written or -1 on error)-5 E 5(.S)
-.55 G(ee also sfulen\(\).)-5 E F1(S\215ong_t sfgetl\(S\214o_t* f\))92
568.8 Q(int sfputl\(S\214o_t* f)92 580.8 Q 2.5(,S)-.15 G(\215ong_t v\))
-2.5 E F0 1.094
(These functions are similar to sfgetu\(\) and sfputu\(\) b)108 592.8 R
1.093(ut for reading and writing \(signed\) S\215ong_t v)-.2 F(alues.)
-.25 E(See also s\215len\(\).)108 604.8 Q F1
(Sfdouble_t sfgetd\(S\214o_t* f\))92 633.6 Q(int sfputd\(S\214o_t* f)92
645.6 Q 2.5(,S)-.15 G(fdouble_t v\))-2.5 E F0 .3
(These functions read and write Sfdouble_t v)108 657.6 R 2.8(alues. In)
-.25 F .3(this case, portability depends on the input and output)2.8 F
1.713(architectures ha)108 669.6 R 1.713
(ving the same \215oating point v)-.2 F 1.712(alue representation.)-.25
F -1.11(Va)6.712 G 1.712(lues are coded and decoded using)1.11 F(lde)108
681.6 Q(xp\(3\) and fre)-.15 E(xp\(3\) so the)-.15 E 2.5(ya)-.15 G
(re constrained to the sizes supported by these functions.)-2.5 E
(See also sfdlen\(\).)5 E(05 August 1999)274.055 768 Q(7)197.055 E EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(char* sfgetr\(S\214o_t* f)92 84 Q 2.5(,i)-.15 G
(nt rsc, int type\))-2.5 E F0 .411(This function reads a record of data\
 ending in the record separator rsc.)108 96 R .411
(After sfgetr\(\) returns, the length of)5.411 F .115(the record e)108
108 R -.15(ve)-.25 G 2.615(ni).15 G 2.615(fi)-2.615 G 2.615(ti)-2.615 G
2.615(si)-2.615 G .115(ncomplete can be retrie)-2.615 F -.15(ve)-.25 G
2.614(dw).15 G .114(ith sfv)-2.614 F 2.614(alue\(\). sfgetr\(\))-.25 F
.114(returns the record on success and)2.614 F(NULL on error)108 120 Q
(.)-.55 E(The type ar)108 144 Q
(gument is composed of some subset of the belo)-.18 E 2.5(wb)-.25 G
(it \215ags:)-2.5 E(SF_STRING:)108 160.8 Q 3.517(An)144 172.8 S 1.017
(ull byte will replace the record separator to mak)-3.517 F 3.517(et)-.1
G 1.017(he record into a C string.)-3.517 F 1.018(Otherwise, the)6.017 F
(record separator is left alone.)144 184.8 Q(SF_LOCKR:)108 201.6 Q 1.157
(Upon successfully obtaining a record r)144 213.6 R 3.657(,t)-.4 G 1.157
(he stream will be lock)-3.657 F 1.157
(ed from further access until it is)-.1 F
(released with a call sfread\(f,r)144 225.6 Q(,0\).)-.4 E(SF_LASTR:)108
242.4 Q .567(This should be used only after a f)144 254.4 R .567
(ailed sfgetr\(\) to retrie)-.1 F .867 -.15(ve t)-.25 H .567
(he last incomplete record. In this case,).15 F(rsc is ignored.)144
266.4 Q F1(ssize_t sfputr\(S\214o_t* f)92 295.2 Q 2.5(,c)-.15 G
(onst char* s, int rsc\))-2.5 E F0 1.052
(This function writes the null-terminated string s to f.)108 307.2 R
1.051(If rsc is non-ne)6.051 F -.05(ga)-.15 G(ti).05 E -.15(ve)-.25 G
3.551(,\().15 G 1.051(unsigned char\)rsc is output)-3.551 F
(after the string.)108 319.2 Q
(sfputr\(\) returns the number of bytes written or -1 on f)5 E(ailure.)
-.1 E F1(Sf)92 348 Q(off_t sfmo)-.25 E -.1(ve)-.1 G(\(S\214o_t* fr).1 E
2.5(,S)-.92 G(\214o_t* fw)-2.5 E 2.5(,S)-.55 G -.25(fo)-2.5 G
(ff_t n, int rsc\)).25 E F0 1.491(This function mo)108 360 R -.15(ve)
-.15 G 3.991(so).15 G 1.491
(bjects from input stream fr to output stream fw)-3.991 F 6.491(.s)-.65
G(fmo)-6.491 E -.15(ve)-.15 G 1.492(\(\) returns the number of).15 F
(objects mo)108 372 Q -.15(ve)-.15 G 2.5(do).15 G 2.5(r-)-2.5 G 2.5(1o)
-2.5 G 2.5(nf)-2.5 G(ailure.)-2.6 E .288
(An object is either a byte or a record.)108 396 R .287
(The latter is indicated by a non-ne)5.288 F -.05(ga)-.15 G(ti).05 E
.587 -.15(ve v)-.25 H .287(alue for the record separa-)-.1 F .51
(tor character rsc.)108 408 R .51(If n is ne)5.51 F -.05(ga)-.15 G(ti)
.05 E -.15(ve)-.25 G 3.01(,a).15 G .51(ll of fr will be mo)-3.01 F -.15
(ve)-.15 G 3.011(d. Otherwise,).15 F 3.011(ni)3.011 G .511
(ndicates the number of objects to)-3.011 F(mo)108 420 Q -.15(ve)-.15 G
5.812(.I).15 G 3.312(fe)-5.812 G .811(ither fr or fw is NULL, it acts a\
s if it is a stream corresponding to /de)-3.312 F .811
(v/null, the UNIX de)-.25 F(vice)-.25 E 9.243
(that has no read data and thro)108 432 R 9.244(ws a)-.25 F -.1(wa)-.15
G 11.744(ya).1 G 9.544 -.15(ny w)-11.744 H 9.244(rite data.).15 F -.15
(Fo)14.244 G 11.744(re).15 G 9.244(xample, the call)-11.894 F(sfmo)108
444 Q -.15(ve)-.15 G(\(f,\(S\214o_t*\)0,\(Sfof).15 E(f_t\)\(-1\),)-.25 E
('\\n'\) simply counts the number of lines in stream f.)-.7 E F1
(ssize_t sfr)92 472.8 Q(ead\(S\214o_t* f)-.18 E 2.5(,V)-.15 G(oid_t* b)
-3.5 E(uf)-.2 E 2.5(,s)-.15 G(ize_t n\))-2.5 E F0 .54
(This function reads up to n bytes from f into b)108 484.8 R(uf)-.2 E
.54(fer b)-.25 F 3.04(uf. It)-.2 F .54
(returns the number of bytes actually read or -1)3.04 F(on error)108
496.8 Q(.)-.55 E F1(ssize_t sfwrite\(S\214o_t* f)92 525.6 Q 2.5(,c)-.15
G(onst V)-2.5 E(oid_t* b)-1 E(uf)-.2 E 2.5(,s)-.15 G(ize_t n\))-2.5 E F0
1.449(This function writes n bytes from b)108 537.6 R 1.449(uf to f.)-.2
F 1.45(If f is SF_STRING, and the b)6.449 F(uf)-.2 E 1.45
(fer is not lar)-.25 F 1.45(ge enough, an)-.18 F(SF_WRITE e)108 549.6 Q
(xception shall be raised.)-.15 E
(sfwrite\(\) returns the number of bytes written or -1 on f)5 E(ailure.)
-.1 E F1(Sf)92 578.4 Q(off_t sfseek\(S\214o_t* f)-.25 E 2.5(,S)-.15 G
-.25(fo)-2.5 G(ff_t offset, int type\)).25 E F0(This function sets a ne)
108 590.4 Q 2.5(wI)-.25 G(/O position for f.)-2.5 E(It returns the ne)5
E 2.5(wp)-.25 G(osition or -1 on f)-2.5 E(ailure.)-.1 E .032
(If the stream is a SF_STRING stream and the ne)108 614.4 R 2.532(wa)
-.25 G .032(ddress is be)-2.532 F .031(yond the current b)-.15 F(uf)-.2
E .031(fer e)-.25 F .031(xtent, an SF_SEEK)-.15 F -.15(ex)108 626.4 S
(ception will be raised \(see sfdisc\(\)\).).15 E(The ne)108 650.4 Q 2.5
(wp)-.25 G(osition is determined based on of)-2.5 E
(fset and type which is composed from the bit \215ags:)-.25 E 2.5(0o)108
667.2 S 2.5(rS)-2.5 G(EEK_SET)-2.5 E(:)-.5 E(of)144 679.2 Q
(fset is the desired position.)-.25 E 2.5(1o)108 696 S 2.5(rS)-2.5 G
(EEK_CUR:)-2.5 E(of)144 708 Q(fset is relati)-.25 E .3 -.15(ve t)-.25 H
2.5(ot).15 G(he current position \(see SF_PUBLIC belo)-2.5 E(w\).)-.25 E
(05 August 1999)274.055 768 Q(8)197.055 E EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R 2.5(2o)108 84
S 2.5(rS)-2.5 G(EEK_END:)-2.5 E(of)144 96 Q(fset is relati)-.25 E .3
-.15(ve t)-.25 H 2.5(ot).15 G(he ph)-2.5 E(ysical end of \214le.)-.05 E
(SF_SHARE:)108 112.8 Q .982
(The stream is treated as if it has the control bit SF_SHARE on.)144
124.8 R .983(This implies that a system call)5.982 F
(seek will be done to ensure that the location seeking to is v)144 136.8
Q(alid.)-.25 E(SF_PUBLIC:)108 153.6 Q .739
(The stream is treated as if it has the control bit SF_PUBLIC on.)144
165.6 R .738(If the ph)5.738 F .738(ysical \214le position has)-.05 F
.982(changed from its last kno)144 177.6 R .983
(wn location, the current position is tak)-.25 F .983(en as the ne)-.1 F
3.483(wp)-.25 G -.05(hy)-3.483 G .983(sical position.).05 F
(Otherwise, the current position is the logical stream position.)144
189.6 Q/F1 10/Times-Bold@0 SF -1(Vo)92 218.4 S(id_t* sfr)1 E(eser)-.18 E
-.1(ve)-.1 G(\(S\214o_t* f).1 E 2.5(,s)-.15 G(size_t n, int lock\))-2.5
E F0 .474(This function reserv)108 230.4 R .474(es a data block from f.)
-.15 F -.15(Fo)5.474 G 2.974(raS).15 G .473
(F_READ stream, a data block is a se)-2.974 F .473(gment of data and)
-.15 F 2.612(for a SF_WRITE stream, it is a b)108 242.4 R(uf)-.2 E 2.612
(fer suitable for writing.)-.25 F -.15(Fo)7.612 G 5.112(rc).15 G
(onsistenc)-5.112 E 3.912 -.65(y, a s)-.15 H 2.612(tream opened with).65
F 1.461(SF_READ|SF_WRITE will be treated as if it is a SF_READ stream \
\(see sfset\(\) for setting a particular)108 254.4 R 2.5
(mode.\) sfreserv)108 266.4 R
(e\(\) returns the obtained data block on success and NULL on f)-.15 E
(ailure.)-.1 E 1.083(After a sfreserv)108 290.4 R 1.083
(e\(\) call, whether or not it succeeds, sfv)-.15 F 1.083
(alue\(\) can be used to obtain the size of the \(may-)-.25 F(ha)108
302.4 Q -.15(ve)-.2 G(-been\) a).15 E -.25(va)-.2 G(ilable data block.)
.25 E 2.5(n!)108 319.2 S 2.5(=0)-2.5 G 9.25(:f)-2.5 G .627
(will be \214lled or \215ushed as necessary to mak)-6.123 F 3.126(ea)-.1
G -.25(va)-3.326 G .626
(ilable a data block of size at least the absolute).25 F -.25(va)144
331.2 S .462(lue of n.).25 F .463
(If this is successful and lock is non-positi)5.462 F -.15(ve)-.25 G
2.963(,t).15 G .463(he I/O position will adv)-2.963 F .463
(ance by the size)-.25 F .983(of the a)144 343.2 R -.25(va)-.2 G .982
(ilable data block when n is ne).25 F -.05(ga)-.15 G(ti).05 E 1.282 -.15
(ve o)-.25 H 3.482(rb).15 G 3.482(ye)-3.482 G .982
(xactly n when n is positi)-3.632 F -.15(ve)-.25 G 5.982(.F).15 G .982
(or e)-6.132 F(xample,)-.15 E(sfreserv)144 355.2 Q .048
(e\(f,-1,0\) returns a positi)-.15 F .348 -.15(ve s)-.25 H .048
(ize data block and adv).15 F .048(ances the I/O position by its size.)
-.25 F .049(On the)5.049 F 1.504(other hand, sfreserv)144 367.2 R 1.504
(e\(f,1,0\) returns a positi)-.15 F 1.804 -.15(ve s)-.25 H 1.504
(ize data block and adv).15 F 1.503(ances the I/O position by)-.25 F
-.15(ex)144 379.2 S(actly 1.).15 E 2.5(n=)108 396 S 2.5(=0)-2.5 G 6.94
(:I)-2.5 G 3.337(fl)-6.94 G .837(ock is zero, f will be \214lled or \
\215ushed as necessary to ensure that a positi)-3.337 F -.15(ve)-.25 G
.838(-size data block is).15 F -.2(av)144 408 S 3.084(ailable. If)-.05 F
.583(lock is non-zero, no \214ll or \215ush will be performed.)3.084 F
.583(In addition, if lock is positi)5.583 F -.15(ve)-.25 G 3.083(,f).15
G(will be lock)144 420 Q(ed from further access.)-.1 E
(Therefore, an application can lock f with sfreserv)5 E(e\(f,0,1\).)-.15
E 13.5(lock: When)108 436.8 R 1.233(lock is positi)3.733 F -.15(ve)-.25
G 3.733(,t).15 G 1.233(here are restrictions.)-3.733 F 1.234
(If f is SF_READ and not using memory-mapping)6.234 F .937(\(see sfsetb)
144 448.8 R .937(uf\(\)\), reserv)-.2 F .936
(ation must be limited to stream b)-.25 F(uf)-.2 E .936(fer size.)-.25 F
.936(If f is SF_READ|SF_SHARE)5.936 F .394(and unseekable, sfreserv)144
460.8 R .395(e\(\) will peek at incoming data using either recv\(2\) or\
 streamio\(4\) without)-.15 F .026(reading ahead.)144 472.8 R .026(In t\
his case, if peeking is not supported by the underlying platform, sfres\
erv)5.026 F .026(e\(\) will)-.15 F -.1(fa)144 484.8 S 3.432(il. Note).1
F .932
(that SF_SHARE is automatically on for sfstdin so programs \(e.g.,)3.432
F F1(/bin/sort)3.432 E F0 3.433(\)t)C .933(hat will)-3.433 F
(consume all of input an)144 496.8 Q(yw)-.15 E
(ay should turn this bit of)-.1 E 2.5(ft)-.25 G 2.5(or)-2.5 G
(educe the number of system calls.)-2.5 E .51(If a reserv)144 520.8 R
.509
(ation successfully results in a data block data, and lock is positi)
-.25 F -.15(ve)-.25 G 3.009(,t).15 G .509(he stream I/O posi-)-3.009 F
.31(tion does not adv)144 532.8 R .311(ance and f will be lock)-.25 F
.311(ed until unlock)-.1 F .311(ed with sfread/sfwrite\(f,data,size\).)
-.1 F(sfread\(\))5.311 E .571(should be used on read-only stream and sf\
write\(\) should be used on write-only stream.)144 544.8 R 3.071(As)
5.571 G(tream)-3.071 E 1.424(in both read and write modes can release t\
he lock with either call \(with associated operational)144 556.8 R
(semantics!\))144 568.8 Q F1 -.35(DA)87 602.4 S 1.8 -.9(TA F)-.6 H(ORMA)
.9 E(TTING)-.95 E F0 .979(Data printing and scanning are done via the s\
fprintf\(\) and sfscanf\(\) f)108 614.4 R .979(amily of functions.)-.1 F
.979(These functions)5.979 F 2.026
(are similar to their ANSI-C fprintf\(\) and fscanf\(\) counterparts.)
108 626.4 R(Ho)7.027 E(we)-.25 E -.15(ve)-.25 G 2.827 -.4(r, t).15 H
2.027(he S\214o v).4 F 2.027(ersions ha)-.15 F 2.327 -.15(ve b)-.2 H
(een).15 E -.15(ex)108 638.4 S 1.17
(tended for both portability and generality).15 F 6.17(.I)-.65 G 3.67
(np)-6.17 G(articular)-3.67 E 3.67(,an)-.4 G 1.17
(otion of a formatting en)-3.67 F 1.17(vironment stack is)-.4 F 3.027
(introduced. Each)108 650.4 R .527
(formatting element on the stack de\214nes a separate)3.027 F/F2 10
/Times-Italic@0 SF .528(formatting pair)3.027 F F0 .528
(of a format speci\214ca-)3.028 F 1.42
(tion string, char* format \(the usual second ar)108 662.4 R 1.42
(gument in the formatting functions\), and an ar)-.18 F 1.42
(gument list,)-.18 F -.25(va)108 674.4 S .343(_list ar).25 F .344
(gs \(the third ar)-.18 F .344
(gument in functions sfvprintf\(\) and sfvscanf\(\)\).)-.18 F 2.844(Af)
5.344 G .344(ormatting en)-2.844 F .344(vironment element)-.4 F .695
(may also specify e)108 686.4 R .695
(xtension functions to obtain or assign ar)-.15 F .695
(guments and to pro)-.18 F .695(vide ne)-.15 F 3.195(ws)-.25 G .695
(emantics for pat-)-3.195 F .566(tern processing.)108 698.4 R 2.166 -.8
(To s)5.566 H .566(implify the description belo).8 F 1.867 -.65(w, w)
-.25 H(hene).65 E -.15(ve)-.25 G 3.067(rw).15 G 3.067(et)-3.067 G .567
(alk about an ar)-3.067 F .567(gument list, unless noted)-.18 F .368
(otherwise, it is understood that this means either the true ar)108
710.4 R .368(gument list when there is no e)-.18 F .368
(xtension function)-.15 F .676(or the action to be tak)108 722.4 R .676
(en by such a function in processing ar)-.1 F 3.177(guments. The)-.18 F
.677(manipulation of the formatting)3.177 F(05 August 1999)274.055 768 Q
(9)197.055 E EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(en)108 84 Q
(vironment stack is done via the pattern ! discussed belo)-.4 E -.65(w.)
-.25 G/F1 10/Times-Bold@0 SF(%! and Sffmt_t)87 112.8 Q F0 .751
(The pattern %! manipulates the formatting en)108 124.8 R .751
(vironment stack to \(1\) change the top en)-.4 F .75(vironment to a ne)
-.4 F(w)-.25 E(en)108 136.8 Q .751(vironment, \(2\) stack a ne)-.4 F
3.251(we)-.25 G -.4(nv)-3.251 G .751
(ironment on top of the current top, or \(3\) pop the top en).4 F 3.252
(vironment. The)-.4 F 1.21(bottom of the en)108 148.8 R 1.21
(vironment stack al)-.4 F -.1(wa)-.1 G 1.209(ys contains a virtual en).1
F 1.209(vironment with the original formatting pair)-.4 F
(and without an)108 160.8 Q 2.5(ye)-.15 G(xtension functions.)-2.65 E
.942(The top en)108 184.8 R .942
(vironment of a stack, say fe, is automatically popped whene)-.4 F -.15
(ve)-.25 G 3.443(ri).15 G .943(ts format string is completely)-3.443 F
16.07(processed. In)108 196.8 R 13.57(this case, its e)16.07 F -.15(ve)
-.25 G 13.57(nt-handling function \(if an).15 F 13.57(y\) is called as)
-.15 F(\(*e)108 208.8 Q -.15(ve)-.25 G(ntf\)\(f,SF_FIN).15 E(AL,NIL\(V)
-.35 E 3.252(oid_t*\),fe\). The)-1.29 F .752(top en)3.252 F .753
(vironment can also be popped by gi)-.4 F .753(ving an ar)-.25 F(gument)
-.18 E .516(NULL to %!)108 220.8 R .516(or by returning a ne)5.516 F
-.05(ga)-.15 G(ti).05 E .815 -.15(ve v)-.25 H .515(alue in an e)-.1 F
.515(xtension function.)-.15 F .515(In these cases, the e)5.515 F -.15
(ve)-.25 G(nt-handling).15 E .009(function is called as \(*e)108 232.8 R
-.15(ve)-.25 G(ntf\)\(f,SF_DPOP).15 E .009
(,form,fe\) where form is the remainder of the format string. A ne)-1.11
F(g-)-.15 E(ati)108 244.8 Q .3 -.15(ve r)-.25 H(eturn v).15 E
(alue from the e)-.25 E -.15(ve)-.25 G(nt handling function will pre).15
E -.15(ve)-.25 G(nt the en).15 E(vironment from being popped.)-.4 E 2.5
(Af)108 268.8 S(ormatting en)-2.5 E(vironment is a structure of type Sf)
-.4 E(fmt_t which contains the follo)-.25 E(wing elements:)-.25 E(Sf)118
292.8 Q(fmte)-.25 E 5(xt_f e)-.15 F 5(xtf; /*)-.15 F -.15(ex)2.5 G
(tension processor).15 E(*/)20 E(Sf)118 304.8 Q(fmte)-.25 E -.15(ve)-.25
G(nt_f e).15 E -.15(ve)-.25 G(ntf; /* e).15 E -.15(ve)-.25 G(nt handler)
.15 E(*/)35 E 17.5(char* form;)118 328.8 R(/* format string to stack)7.5
E(*/)12.5 E -.25(va)118 340.8 S 12.5(_list ar).25 F 5(gs; /*)-.18 F
(corresponding ar)2.5 E 2.5(gl)-.18 G 10(ist */)-2.5 F 22.5(int fmt;)118
364.8 R(/* pattern being processed)10 E(*/)10 E 12.5(ssize_t size;)118
376.8 R(/* object size)7.5 E(*/)40 E 22.5(int \215ags;)118 388.8 R
(/* formatting control \215ags)5 E(*/)7.5 E 22.5(int width;)118 400.8 R
(/* width of \214eld)5 E(*/)32.5 E 22.5(int precis;)118 412.8 R
(/* precision required)2.5 E(*/)22.5 E 22.5(int base;)118 424.8 R
(/* con)7.5 E -.15(ve)-.4 G(rsion base).15 E(*/)30 E 17.5(char* t_str;)
118 448.8 R(/* type string in parentheses */)5 E 22.5(int n_str;)118
460.8 R(/* length of t_str)5 E(*/)30 E .04
(The \214rst four elements of Sf)108 484.8 R .04
(fmt_t must be de\214ned by the application.)-.25 F .039(The tw)5.039 F
2.539(of)-.1 G .039(unction \214elds should not be)-2.539 F 3.548
(changed during processing.)108 496.8 R 3.548(Other elements of Sf)8.548
F 3.549(fmt_t are set on calls to the e)-.25 F 3.549(xtension function)
-.15 F(Sf)108 508.8 Q(fmt_t.e)-.25 E .276(xtf and, in turn, can be modi\
\214ed by this function to redirect formatting or scanning.)-.15 F -.15
(Fo)5.275 G 2.775(re).15 G(xample,)-2.925 E .845
(consider a call from a sfprintf\(\) function to process an unkno)108
520.8 R .846(wn pattern %t \(which we may tak)-.25 F 3.346(et)-.1 G
3.346(om)-3.346 G(ean)-3.346 E -.74(``)108 532.8 S(time').74 E 1.047
('\) based on a formatting en)-.74 F 1.046(vironment fe.)-.4 F(fe->e)
6.046 E 1.046(xtf may reset fe->fmt to `d' upon returing to cause)-.15 F
(sfprintf\(\) to process the v)108 544.8 Q
(alue being formatted as an inte)-.25 E(ger)-.15 E(.)-.55 E(Belo)108
568.8 Q 2.5(wa)-.25 G(re the \214elds of Sf)-2.5 E(fmt_t:)-.25 E -.15
(ex)108 585.6 S 15.32(tf: e).15 F(xtf is a function to e)-.15 E
(xtend scanning and formatting patterns.)-.15 E
(Its usage is discussed belo)5 E -.65(w.)-.25 G -2.15 -.25(ev e)108
602.4 T 6.13(ntf: This).25 F(is a function to process e)2.5 E -.15(ve)
-.25 G(nts as discussed earlier).15 E(.)-.55 E(form and ar)108 619.2 Q
(gs:)-.18 E 1.476(This is the formatting pair of a speci\214cation stri\
ng and corresponding ar)144 631.2 R 1.477(gument list.)-.18 F 1.477
(When an)6.477 F(en)144 643.2 Q 1.951(vironment fe is being inserted in\
to the stack, if fe->form is NULL, the top en)-.4 F 1.95(vironment is)
-.4 F .696(changed to fe and its associated e)144 655.2 R .696
(xtension functions b)-.15 F .697
(ut processing of the current formatting pair)-.2 F 3.192(continues. On)
144 667.2 R .691(the other hand, if fe->form is not NULL, the ne)3.192 F
3.191(we)-.25 G -.4(nv)-3.191 G .691(ironment is pushed onto the).4 F
.924(stack so that pattern processing will start with the ne)144 679.2 R
3.424(wf)-.25 G .925(ormatting pair as well as an)-3.424 F 3.425(ya)-.15
G(ssociated)-3.425 E -.15(ex)144 691.2 S .741(tension functions.).15 F
.741(During processing, whene)5.741 F -.15(ve)-.25 G 3.241(re).15 G .741
(xtf is called, form and ar)-3.391 F .74(gs will be set to the)-.18 F
(current v)144 703.2 Q(alues of the formatting pair in use.)-.25 E
(05 August 1999)274.055 768 Q(10)192.055 E EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R 16.83
(fmt: This)108 84 R(is the pattern being processed.)2.5 E 15.17
(size: This)108 100.8 R(is the size of the object being processed.)2.5 E
11.83(\215ags: This)108 117.6 R(is a collection of bits de\214ning the \
formatting \215ags speci\214ed for the pattern.)2.5 E(The bits are:)5 E
(SFFMT_LEFT)144 141.6 Q 2.5(:F)-.5 G(lag - in sfprintf\(\).)-2.5 E
(SFFMT_SIGN: Flag + in sfprintf\(\).)144 165.6 Q(SFFMT_BLANK: Flag)144
189.6 Q/F1 10/Times-Italic@0 SF(space)2.5 E F0(in sfprintf\(\).)2.5 E
(SFFMT_ZER)144 213.6 Q(O: Flag 0 in sfprintf\(\).)-.4 E
(SFFMT_THOUSAND: Flag ' in sfprintf\(\).)144 237.6 Q
(SFFMT_LONG: Flag l in sfprintf\(\) and sfscanf\(\).)144 261.6 Q
(SFFMT_LLONG: Flag ll in sfprintf\(\) and sfscanf\(\).)144 285.6 Q
(SFFMT_SHOR)144 309.6 Q 1 -.5(T: F)-.6 H
(lag h in sfprintf\(\) and sfscanf\(\).).5 E
(SFFMT_LDOUBLE: Flag L in sfprintf\(\) and sfscanf\(\).)144 333.6 Q
(SFFMT_IFLA)144 357.6 Q(G: \215ag I in sfprintf\(\) and sfscanf\(\).)-.4
E(SFFMT_AL)144 381.6 Q(TER: Flag # in sfprintf\(\) and sfscanf\(\).)-.92
E(SFFMT_SKIP: Flag * in sfscanf\(\).)144 405.6 Q
(SFFMT_ARGPOS: This indicates ar)144 429.6 Q
(gument processing for pos$.)-.18 E(SFFMT_V)144 453.6 Q .6
(ALUE: This is set by fe->e)-1.35 F .6
(xtf to indicate that it is returning a v)-.15 F .6
(alue to be formatted or)-.25 F
(the address of an object to be assigned.)144 465.6 Q 7.94(width: This)
108 494.4 R(is the \214eld width.)2.5 E 6.84(precis: This)108 511.2 R
(is the precision.)2.5 E 12.95(base: This)108 528 R(is the con)2.5 E
-.15(ve)-.4 G(rsion base.).15 E(t_str and n_str:)108 544.8 Q
(This is the type string and its size.)144 556.8 Q/F2 10/Times-Bold@0 SF
(int \(*Sffmtext_f\)\(S\214o_t* f)92 585.6 Q 2.5(,V)-.15 G(oid_t* v)-3.5
E 2.5(,S)-.55 G(ffmt_t* fe\))-2.5 E F0 1.973(This is the type of the e)
108 597.6 R 1.973(xtension function fe->e)-.15 F 1.972
(xtf to process patterns and ar)-.15 F 4.472(guments. Ar)-.18 F 1.972
(guments are)-.18 F(al)108 609.6 Q -.1(wa)-.1 G .48
(ys processed in order and fe->e).1 F .48(xtf is called e)-.15 F .48
(xactly once per ar)-.15 F 2.98(gument. Note)-.18 F .48
(that, when pos$ \(belo)2.98 F(w\))-.25 E .128(is not used an)108 621.6
R .128(ywhere in a format string, each ar)-.15 F .128(gument is used e)
-.18 F .127(xactly once per a corresponding pattern.)-.15 F(In)5.127 E
.329(that case, fe->e)108 633.6 R .329
(xtf is called as soon as the pattern is recognized and before an)-.15 F
2.83(ys)-.15 G .33(canning or formatting.)-2.83 F(On)5.33 E .153
(the other hand, when pos$ is used in a format string, an ar)108 645.6 R
.153(gument may be used multiple times.)-.18 F .153(In this case,)5.153
F .559(all ar)108 657.6 R .559
(guments shall be processed in order by calling fe->e)-.18 F .559(xtf e)
-.15 F .56(xactly once per ar)-.15 F .56(gument before an)-.18 F 3.06
(yp)-.15 G(attern)-3.06 E 2.5(processing. This)108 669.6 R
(case is signi\214ed by the \215ag SFFMT_ARGPOS in fe->\215ags.)2.5 E
1.319(In addition to the prede\214ned formatting patterns and other app\
lication-de\214ned patterns, fe->e)108 693.6 R 1.318(xtf may be)-.15 F
1.402(called with fe->fmt being one of `\(' \(left parenthesis\), `.)108
705.6 R 3.902('\()-.7 G 1.402(dot\), and `I'.)-3.902 F 1.403
(The left parenthesis requests a)6.403 F .97
(string to be used as the type string discussed belo)108 717.6 R 4.77
-.65(w. I)-.25 H 3.47(nt).65 G .97(his case, upon returning, fe->e)-3.47
F .97(xtf should set the)-.15 F .397
(fe->size \214eld to be the length of the string or a ne)108 729.6 R
-.05(ga)-.15 G(ti).05 E .697 -.15(ve v)-.25 H .398
(alue to indicate a null-terminated string.)-.1 F .398(The dot)5.398 F
(05 August 1999)274.055 768 Q(11)192.055 E EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R .126
(requests an inte)108 84 R .126(ger for width, precision, or base.)-.15
F .125(In this case, the fe->size \214eld will indicate ho)5.126 F 2.625
(wm)-.25 G(an)-2.625 E 2.625(yd)-.15 G(ots)-2.625 E(ha)108 96 Q .3 -.15
(ve a)-.2 H(ppeared in the pattern speci\214cation.).15 E
(The `I' requests an inte)5 E(ger to de\214ne the object size.)-.15 E
27.39(f: This)108 112.8 R 1.11
(is the input/output stream in the calling formatting function.)3.61 F
1.11(During a call to fe->e)6.11 F 1.11(xtf, the)-.15 F
(stream shall be unlock)144 124.8 Q(ed so that fe->e)-.1 E
(xtf can read from or write to it as appropriate.)-.15 E 25.72(v: F)108
141.6 R .449(or both sfscanf\(\) and sfprintf\(\) functions, v points t\
o a location suitable for storing an)-.15 F 2.949(yp)-.15 G(rimiti)
-2.949 E -.15(ve)-.25 G(data types, i.e., scalars or pointers.)144 153.6
Q(On return, fe->e)5 E(xtf treats v as discussed belo)-.15 E -.65(w.)
-.25 G 22.95(fe: This)108 170.4 R(is the current formatting en)2.5 E
(vironment.)-.4 E .966(The return v)108 187.2 R .966(alue rv of fe->e)
-.25 F .966(xtf directs further processing.)-.15 F .967(There are tw)
5.966 F 3.467(oc)-.1 G 3.467(ases. When)-3.467 F .967
(pos$ is present, a)3.467 F(ne)108 199.2 Q -.05(ga)-.15 G(ti).05 E .375
-.15(ve r)-.25 H .075(eturn v).15 F .075
(alue means to ignore fe in further ar)-.25 F .075
(gument processing while a non-ne)-.18 F -.05(ga)-.15 G(ti).05 E .375
-.15(ve r)-.25 H .075(eturn v).15 F .075(alue is)-.25 F .679
(treated as the case rv == 0 belo)108 211.2 R 4.479 -.65(w. W)-.25 H .68
(hen pos$ is not present, fe->e).65 F .68(xtf is called per ar)-.15 F
.68(gument immediately)-.18 F
(before pattern processing and its return v)108 223.2 Q
(alues are treated as belo)-.25 E(w:)-.25 E(rv < 0:)108 240 Q(The en)
9.25 E(vironment stack is immediately popped.)-.4 E(rv == 0:)108 256.8 Q
.771(The e)144 268.8 R .771(xtension function has not consumed \(in a s\
canning case\) or output \(in a printing case\) data)-.15 F 1.319
(out of or into the gi)144 280.8 R -.15(ve)-.25 G 3.819(ns).15 G 1.319
(tream f.)-3.819 F 1.319
(The \214elds fmt, \215ags, size, width, precis and base of fe shall)
6.319 F(direct further processing.)144 292.8 Q -.15(Fo)144 316.8 S 2.562
(rs).15 G .062
(fprintf\(\) functions, if fe->\215ags has the bit SFFMT_V)-2.562 F .062
(ALUE, fe->e)-1.35 F .062(xtf should ha)-.15 F .362 -.15(ve s)-.2 H .062
(et *v to the).15 F -.25(va)144 328.8 S .195
(lue to be processed; otherwise, a v).25 F .195
(alue should be obtained from the ar)-.25 F .196(gument list.)-.18 F
(Lik)5.196 E -.25(ew)-.1 G .196(ise, for).25 F .6
(sfscanf\(\) functions, SFFMT_V)144 340.8 R .6
(ALUE means that *v should ha)-1.35 F .9 -.15(ve a s)-.2 H .6
(uitable address; otherwise, an).15 F(address to assign v)144 352.8 Q
(alue should be obtained from the ar)-.25 E(gument list.)-.18 E .392
(When pos$ is present, if fe->e)144 376.8 R .392
(xtf changes fe->fmt, this pattern shall be used re)-.15 F -.05(ga)-.15
G .392(rdless of the pat-).05 F .618(tern de\214ned in the format strin\
g. On the other hand, if fe->fmt is unchanged by fe->e)144 388.8 R .617
(xtf, the pat-)-.15 F .366(tern in the format string is used.)144 400.8
R .367(In an)5.367 F 2.867(yc)-.15 G .367(ase, the ef)-2.867 F(fecti)
-.25 E .667 -.15(ve p)-.25 H .367
(attern should be one of the standardly).15 F(de\214ned pattern.)144
412.8 Q(Otherwise, it shall be treated as unmatched.)5 E(rv > 0:)108
429.6 Q .535(The e)9.25 F .534
(xtension function has accessed the stream f to the e)-.15 F .534
(xtent of rv bytes.)-.15 F .534(Processing of the cur)5.534 F(-)-.2 E
2.62(rent pattern ceases e)144 441.6 R 2.621(xcept that, for scanning f\
unctions, if fe->\215ags does not contain the bit)-.15 F(SFFMT_SKIP)144
453.6 Q 2.5(,t)-1.11 G(he assignment count shall increase by 1.)-2.5 E
/F1 10/Times-Bold@0 SF -.1(vo)87 482.4 S(id v).1 E(a_copy\(v)-.1 E
(a_list to, v)-.1 E(a_list fr\))-.1 E F0 .328
(This macro function portably copies the ar)108 494.4 R .328
(gument list fr to the ar)-.18 F .328
(gument list to. It should be used to set the)-.18 F(\214eld Sf)108
506.4 Q(fmt_t.ar)-.25 E(gs.)-.18 E F1(long sffmtv)87 535.2 Q
(ersion\(Sffmt_t* fe, int type\))-.1 E F0 1.136
(This macro function initializes the formatting en)108 547.2 R 1.137
(vironment fe with a v)-.4 F 1.137(ersion number if type is non-zero.)
-.15 F .801(Otherwise, it returns the current v)108 559.2 R .801
(alue of the v)-.25 F .801(ersion number of fe.)-.15 F .8
(This is useful for applications to \214nd)5.8 F .128
(out when the format of the structure Sf)108 571.2 R .128
(fmt_t changes.)-.25 F .128(Note that the v)5.128 F .129
(ersion number corresponds to the S\214o)-.15 F -.15(ve)108 583.2 S
(rsion number which is de\214ned in the macro v).15 E
(alue SFIO_VERSION.)-.25 E F1(int sfprintf\(S\214o_t* f)92 612 Q 2.5(,c)
-.15 G(onst char* f)-2.5 E(ormat, ...\))-.25 E
(char* sfprints\(const char* f)92 624 Q(ormat, ...\))-.25 E
(int sfsprintf\(char* s, int n, const char* f)92 636 Q(ormat, ...\))-.25
E(int sfvsprintf\(char* s, int n, const char* f)92 648 Q(ormat, v)-.25 E
(a_list ar)-.1 E(gs\))-.1 E(int sfvprintf\(S\214o_t* f)92 660 Q 2.5(,c)
-.15 G(onst char* f)-2.5 E(ormat, v)-.25 E(a_list ar)-.1 E(gs\))-.1 E F0
1.934(These functions format output data.)108 672 R 1.933
(sfprintf\(\) and sfvprintf\(\) write to output stream f.)6.934 F 1.933
(sfsprintf\(\) and)6.933 F 1.208(sfvsprintf\(\) write to b)108 684 R(uf)
-.2 E 1.209(fer s which is of size n.)-.25 F 1.209
(sfprints\(\) constructs output in some S\214o-de\214ned b)6.209 F(uf)
-.2 E(fer)-.25 E(.)-.55 E .197(sfvprintf\(\) is the underlying primiti)
108 696 R .497 -.15(ve f)-.25 H .197(or the other functions.).15 F .196
(Except for sfprints\(\) which returns a null-ter)5.197 F(-)-.2 E(minat\
ed string or NULL, other functions return the number of output bytes or\
 -1 on f)108 708 Q(ailure.)-.1 E(05 August 1999)274.055 768 Q(12)192.055
E EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(The length o\
f string constructed by sfprints\(\), sfsprintf\(\), or sfvsprintf\(\) \
can be retrie)108 84 Q -.15(ve)-.25 G 2.5(db).15 G 2.5(ys)-2.5 G
(fslen\(\).)-2.5 E .709(The standard patterns are: n, s, c, %, h, i, d,\
 p, u, o, x, X, g, G, e, E, f and !.)108 100.8 R .71
(Except for ! which shall be)5.71 F .307(described belo)108 112.8 R
1.607 -.65(w, s)-.25 H .307(ee the ANSI-C speci\214cation of fprintf\(3\
\) for details on the other patterns.).65 F .306(Let z be some)5.306 F
(pattern type. A formatting pattern is de\214ned as belo)108 124.8 Q(w:)
-.25 E(%[pos$][\215ag][width][.precision][.base][\(type\)]z)118 148.8 Q
11.83(pos$: A)108 177.6 R .109(pattern can specify which ar)2.609 F .109
(gument in the ar)-.18 F .109(gument list to use.)-.18 F .11
(This is done via pos$ where pos)5.11 F 1.347(is the ar)144 189.6 R
1.347(gument position.)-.18 F(Ar)6.347 E 1.347
(guments are numbered so that the \214rst ar)-.18 F 1.346
(gument after format is at)-.18 F .134(position 1.)144 201.6 R .134
(If pos is not speci\214ed, the ar)5.134 F .135(gument follo)-.18 F .135
(wing the most recently used one will be used.)-.25 F .912
(The pattern %! \(see belo)144 213.6 R .912
(w\) cannot be used subsequent to a usage of pos$.)-.25 F .911
(Doing so may cause)5.911 F(une)144 225.6 Q(xpected beha)-.15 E(viors.)
-.2 E 15.72(\215ag: The)108 242.4 R
(\215ag characters are h, l, L, I, \255, +,)2.5 E/F1 10/Times-Italic@0
SF(space)2.5 E F0 2.5(,0)C 2.5(,'a)-2.5 G(nd #.)-2.5 E .808
(Flag I de\214nes the size or type of the object being formatted.)144
266.4 R .808(There are tw)5.808 F 3.308(oc)-.1 G .808
(ases: \(1\) I by itself)-3.308 F(and \(2\) I follo)144 278.4 Q
(wed by either a decimal number or `*'.)-.25 E 1.009
(In the \214rst case, for inte)144 302.4 R 1.008
(ger and \215oating point patterns, the object type is tak)-.15 F 1.008
(en to be the lar)-.1 F(gest)-.18 E .065
(appropriate type \(i.e., one of S\215ong_t, Sfulong_t or Sfdouble_t\).)
144 314.4 R -.15(Fo)5.065 G 2.565(rc).15 G(on)-2.565 E -.15(ve)-.4 G
.065(rsion speci\214ers s and c,).15 F(the \215ag is ignored.)144 326.4
Q .307(In the second case, a gi)144 350.4 R -.15(ve)-.25 G 2.807(nd).15
G .307(ecimal v)-2.807 F .307(alue w)-.25 F .307
(ould de\214ne a size while `*' w)-.1 F .306(ould cause the size to be)
-.1 F .492(obtained from the ar)144 362.4 R .492(gument list.)-.18 F
.492(Then, if the con)5.492 F -.15(ve)-.4 G .493
(rsion speci\214er is s, this size de\214nes the length).15 F .1(of the\
 string or strings being formatted \(see the discussion of base belo)144
374.4 R 2.6(w\). F)-.25 F .1(or inte)-.15 F .1(ger and \215oating)-.15 F
.329
(point patterns, the size is used to select a type from one of the belo)
144 386.4 R 2.829(wl)-.25 G .329(ists as indicated by the con-)-2.829 F
-.15(ve)144 398.4 S(rsion speci\214er:).15 E
(S\215ong_t, long, int, short)154 422.4 Q
(Sfulong_t, unsigned long, unsigned int, unsigned short)154 434.4 Q
(Sfdouble_t, double, \215oat)154 446.4 Q .36(The selection algorithm al)
144 470.4 R -.1(wa)-.1 G .36(ys matches types from left to right in an)
.1 F 2.86(yg)-.15 G -2.15 -.25(iv e)-2.86 H 2.86(nl).25 G 2.86
(ist. Although)-2.86 F(selec-)2.86 E 2.42(tion is generally based on si\
zes in bytes, for compatibility with Microsoft-C, the size 64 is)144
482.4 R .481
(matched with an appropriate type with the same number of bits, if an)
144 494.4 R 4.28 -.65(y. I)-.15 H 2.98(ft).65 G .48(he gi)-2.98 F -.15
(ve)-.25 G 2.98(ns).15 G .48(ize does not)-2.98 F .442(match an)144
506.4 R 2.942(yo)-.15 G 2.942(ft)-2.942 G .442(he listed types, it shal\
l match one of int, unsigned int, and double as de\214ned by the)-2.942
F(formatting pattern.)144 518.4 Q(Belo)144 542.4 Q 3.222(wa)-.25 G .722
(re a fe)-3.222 F 3.222(we)-.25 G .722(xamples of using the I \215ag.)
-3.372 F .722(The \214rst e)5.722 F .721
(xample prints an S\215ong_t inte)-.15 F(ger)-.15 E 5.721(.T)-.55 G(his)
-5.721 E -.15(ex)144 554.4 S 1.243
(ample is actually not portable and only w).15 F 1.244
(orks on platforms where sizeof\(S\215ong_t\) is 8.)-.1 F(The)6.244 E
1.964(second e)144 566.4 R 1.964(xample sho)-.15 F 1.964(ws ho)-.25 F
4.464(wt)-.25 G 4.464(ot)-4.464 G 1.964(hat portably)-4.464 F 6.964(.T)
-.65 G 1.964(he third e)-6.964 F 1.963
(xample speci\214es printing a string of)-.15 F 1.322(length 16.)144
578.4 R 1.322(This length shall be used re)6.322 F -.05(ga)-.15 G 1.322
(rdless of whether or not the gi).05 F -.15(ve)-.25 G 3.823(ns).15 G
1.323(tring is shorter or)-3.823 F 1.007(longer than 16.)144 590.4 R
1.007(The last e)6.007 F 1.007(xample sho)-.15 F 1.007
(ws the use of the pattern %n to assign the amount of data)-.25 F
(already output into a short inte)144 602.4 Q(ger n_output.)-.15 E
(sfprintf\(sfstdout,"%I8d", S\215ong_obj\);)154 626.4 Q
(sfprintf\(sfstdout,"%I*d", sizeof\(S\215ong_obj\), S\215ong_obj\);)154
638.4 Q(sfprintf\(sfstdout,"%I*s", 16, s\);)154 650.4 Q
(sfprintf\(sfstdout,"%d%I*n", 1001, sizeof\(short\), &n_output\);)154
662.4 Q .993(Flags h, l, and L are the ANSI-C con)144 686.4 R -.15(ve)
-.4 G .994(ntions to select the types of input objects.).15 F -.15(Fo)
5.994 G 3.494(re).15 G(xample,)-3.644 E .853
(%hd indicates a short int while %ld indicates a long int.)144 698.4 R
.853(The \215ags ll and L address respecti)5.853 F -.15(ve)-.25 G(ly).15
E(the lar)144 710.4 Q(gest inte)-.18 E(ger and \215oating v)-.15 E
(alue types, i.e., Sfulong_t, S\215ong_t, and Sfdouble_t.)-.25 E
(05 August 1999)274.055 768 Q(13)192.055 E EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(Flag - left-\
justi\214es data within the \214eld \(otherwise, right-justi\214cation\
\).)144 84 Q(Flag + means that a signed con)144 108 Q -.15(ve)-.4 G
(rsion will al).15 E -.1(wa)-.1 G(ys be).1 E
(gin with a plus or minus sign.)-.15 E(Flag)144 132 Q/F1 10
/Times-Italic@0 SF(space)3.587 E F0 1.088(is ignored if + is speci\214e\
d; otherwise, it means that if the \214rst character of a signed)3.587 F
(con)144 144 Q -.15(ve)-.4 G
(rsion is not a sign or if the result is empty).15 E 2.5(,as)-.65 G
(pace will be prepended.)-2.5 E
(Flag 0 means padding with zeros on the left.)144 168 Q .473
(Flag ' outputs thousands-separator used by the current locale.)144 192
R .473(setlocale\(3\) should ha)5.473 F .773 -.15(ve b)-.2 H .473
(een used).15 F(to set the desired locale.)144 204 Q .343
(Flag # indicates an alternati)144 228 R .643 -.15(ve f)-.25 H .343
(ormat processing.).15 F -.15(Fo)5.343 G 2.843(r%).15 G .344
(o, the \214rst digit is al)-2.843 F -.1(wa)-.1 G .344(ys a zero.).1 F
-.15(Fo)5.344 G 2.844(r%).15 G(x)-2.844 E .677
(and %X, a non-zero result will ha)144 240 R .977 -.15(ve a p)-.2 H .677
(re\214x 0x or 0X. F).15 F .676(or %e, %E, %f, %g, and %G, the result)
-.15 F(al)144 252 Q -.1(wa)-.1 G .484(ys contains a decimal point. F).1
F .485(or %g and %G, trailing zeros will not be remo)-.15 F -.15(ve)-.15
G .485(d. F).15 F .485(or %d, %i)-.15 F .189(and %u, the form is)144 264
R F1(base#number)2.689 E F0(where)2.689 E F1(base)2.689 E F0 .189
(is the con)2.689 F -.15(ve)-.4 G .189(rsion base and).15 F F1(number)
2.688 E F0 .188(is represented by)2.688 F 1.189(digits for this)144 276
R F1(base)3.689 E F0 6.189(.F)C 1.189(or e)-6.339 F 1.189
(xample, a base 2 con)-.15 F -.15(ve)-.4 G 1.19
(rsion with %#..2d for 10 is 2#1010 instead of).15 F
(1010 as printed with %..2d.)144 288 Q 7.94(width: This)108 304.8 R .92
(de\214nes the width of the printing \214eld. A v)3.42 F .919
(alue to be printed will be justi\214ed and padded if)-.25 F
(necessary to \214ll out the \214eld width.)144 316.8 Q 6.84
(precis: After)108 333.6 R 3.531<618c>3.531 G 1.031
(rst dot appears, an inte)-3.531 F 1.031(gral v)-.15 F 1.031
(alue de\214nes a precision.)-.25 F -.15(Fo)6.032 G 3.532<728d>.15 G
1.032(oating point v)-3.532 F 1.032(alue patterns,)-.25 F 1.709
(precision is the number of precision digits.)144 345.6 R -.15(Fo)6.709
G 4.209(r%).15 G 1.708(c, precision de\214nes the number of times to)
-4.209 F .737(repeat the character being formatted.)144 357.6 R -.15(Fo)
5.737 G 3.237(r%).15 G .737
(s, precision de\214nes the maximum number of charac-)-3.237 F
(ters to output.)144 369.6 Q 12.95(base: After)108 386.4 R 2.5(as)2.5 G
(econd dot appears, an inte)-2.5 E(gral v)-.15 E(alue de\214nes a con)
-.25 E -.15(ve)-.4 G(rsion base.).15 E -.15(Fo)144 410.4 S 3.272(r%).15
G .772(i, %d, and %u, a con)-3.272 F -.15(ve)-.4 G .772
(rsion base should be in the inclusi).15 F 1.071 -.15(ve r)-.25 H .771
(ange [2,64].).15 F .771(If base is not in)5.771 F
(this range, it is de\214ned to be 10.)144 422.4 Q
(The digits to represent numbers are:)5 E(01234567890)154 446.4 Q
(abcdefghijklmnopqrstuvwxyz)154 458.4 Q(ABCDEFGHIJKLMNOPQRSTUVWXYZ)154
470.4 Q(@_)154 482.4 Q -.15(Fo)144 506.4 S 2.577(r%).15 G .077
(s, when base is de\214ned \(i.e., at least tw)-2.577 F 2.577(od)-.1 G
.077(ots appeared in the pattern speci\214cation\), the input)-2.577 F
(ar)144 518.4 Q .951(gument is tak)-.18 F .951
(en as a NULL-terminated list of strings instead of a single string.)-.1
F .95(Each string is)5.95 F .882
(formatted based on the usual width and precision rules.)144 530.4 R
.883(If base is non-zero, it de\214nes an ASCII)5.883 F .8
(character used to separate the formatted strings.)144 542.4 R(Belo)5.8
E 3.3(wi)-.25 G 3.3(sa)-3.3 G 3.3(ne)-3.3 G .8(xample sho)-3.45 F .8
(wing both the call and)-.25 F(the result of printing a NULL-terminated\
 list of three strings apple, orange, and grape:)144 554.4 Q
(sfprintf\(sfstdout,"%..*s",)154 578.4 Q(',)-.7 E(',list\);)-.7 E
(apple,orange,grape)154 590.4 Q(Lik)144 614.4 Q -.25(ew)-.1 G 1.26
(ise, for %c, when base is de\214ned, the input ar).25 F 1.261
(gument is tak)-.18 F 1.261(en as a null-terminated string)-.1 F .203
(instead of a single character)144 626.4 R 5.203(.E)-.55 G .203
(ach character is formatted based on the normal width and precision)
-5.203 F 2.706(rules. In)144 638.4 R .207(addition, if base is non-zero\
, it de\214nes an ASCII character used to separate the formatted)2.706 F
(characters if there are more than one.)144 650.4 Q 14.06(\(str\): This)
108 667.2 R .745(de\214nes a string str to be passed to the e)3.246 F
.745(xtension function Sf)-.15 F(fmt_t.e)-.25 E 3.245(xtf. P)-.15 F .745
(arentheses shall be)-.15 F 2.5(balanced. If)144 679.2 R
(str is *, the string is obtained from the ar)2.5 E(gument list.)-.18 E
(05 August 1999)274.055 768 Q(14)192.055 E EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(int sfscanf\(S\214o_t* f)92 84 Q 2.5(,c)-.15 G
(onst char* f)-2.5 E(ormat, ...\))-.25 E
(int sfsscanf\(const char* s, const char* f)92 96 Q(ormat, ...\))-.25 E
(int sfvsscanf\(const char* s, const char* f)92 108 Q(ormat, v)-.25 E
(a_list ar)-.1 E(gs\))-.1 E(int sfvscanf\(S\214o_t* f)92 120 Q 2.5(,c)
-.15 G(onst char* f)-2.5 E(ormat, v)-.25 E(a_list ar)-.1 E(gs\))-.1 E F0
.936(These functions scan data items.)108 132 R .937(sfscanf\(\) scans \
from the input stream f while sfsscanf\(\) and sfvsscanf\(\))5.936 F
.332(scan from the null-terminated string s.)108 144 R .331
(sfvscanf\(\) is the underlying primiti)5.331 F .631 -.15(ve t)-.25 H
.331(hat performs the actual scan-).15 F 2.594(ning. Item)108 156 R .094
(types are determined from patterns in string format.)2.594 F .095
(These functions return the number of items)5.094 F
(successfully scanned or -1 on error)108 168 Q(.)-.55 E 2.89(Aw)108
184.8 S .39(hite space character \(blank, tab, or ne)-2.89 F .39
(w-line\) in format normally matches a maximal sequence of input)-.25 F
.005(white space characters.)108 196.8 R(Ho)5.005 E(we)-.25 E -.15(ve)
-.25 G .805 -.4(r, i).15 H 2.505(ft).4 G .006
(he input stream is in SF_LINE mode \(see sfset\(\)\), a ne)-2.505 F
.006(w-line character)-.25 F .634
(only matches white spaces up to an input ne)108 208.8 R .634
(w-line character)-.25 F 5.633(.T)-.55 G .633(his is useful to a)-5.633
F -.2(vo)-.2 G .633(id blocking when scan-).2 F(ning typed inputs.)108
220.8 Q .352(The standard scan patterns are: i, d, u, o, x, X, p, n, f,\
 e, E, g, G, c, %, s, [] and !.)108 237.6 R .353
(Except for ! which shall)5.353 F .536(be described belo)108 249.6 R
1.836 -.65(w, s)-.25 H .536(ee the ANSI-C speci\214cation of fscanf\(3\
\) for details on other patterns.).65 F .535(Let z be some)5.536 F
(pattern type. A formatting pattern is speci\214ed as belo)108 261.6 Q
(w:)-.25 E(%[*][pos$][width][.width.base][\(type\)][\215ag]z)118 285.6 Q
11.83(pos$: A)108 314.4 R .109(pattern can specify which ar)2.609 F .109
(gument in the ar)-.18 F .109(gument list to use.)-.18 F .11
(This is done via pos$ where pos)5.11 F 1.347(is the ar)144 326.4 R
1.347(gument position.)-.18 F(Ar)6.347 E 1.347
(guments are numbered so that the \214rst ar)-.18 F 1.346
(gument after format is at)-.18 F .134(position 1.)144 338.4 R .134
(If pos is not speci\214ed, the ar)5.134 F .135(gument follo)-.18 F .135
(wing the most recently used one will be used.)-.25 F
(The pattern %! \(see belo)144 350.4 Q
(w\) cannot be used subsequent to a usage of pos$.)-.25 E 25.72(*: This)
108 367.2 R(discards the corresponding scanned item.)2.5 E
(width and base:)108 384 Q .233(width de\214nes the maximum number of b\
ytes to scan and base de\214nes the base of an inte)144 396 R .232
(gral v)-.15 F(alue)-.25 E .853(being scanned.)144 408 R .853(The `.)
5.853 F 3.353('\()-.7 G .854(dot\) notation also allo)-3.353 F .854
(ws specifying a `*' \(star\) to obtain the v)-.25 F .854(alue from)-.25
F .631(the ar)144 420 R .631(gument list. The belo)-.18 F 3.131(we)-.25
G .631(xample speci\214es scanning 4 bytes to obtain the v)-3.281 F .63
(alue of an inte)-.25 F(ger)-.15 E
(in base 10. At the end of scanning, the v)144 432 Q
(ariable v should ha)-.25 E .3 -.15(ve t)-.2 H(he v).15 E(alue 1234.)
-.25 E(sfsscanf\("12345678","%.*.*d", 4, 10, &v\);)154 456 Q 14.06
(\(str\): This)108 484.8 R .745
(de\214nes a string str to be passed to the e)3.245 F .746
(xtension function Sf)-.15 F(fmt_t.e)-.25 E 3.246(xtf. P)-.15 F .746
(arentheses shall be)-.15 F 2.5(balanced. If)144 496.8 R
(str is *, the string is obtained from the ar)2.5 E(gument list.)-.18 E
15.72(\215ag: This)108 513.6 R
(is #, I, or some sequence of h, l, and L.)2.5 E .701
(Flag # is signi\214cant for pattern %i and %[.)144 537.6 R -.15(Fo)
5.701 G 3.201(r%).15 G .701(i, it means that the # symbol does not ha)
-3.201 F 1.001 -.15(ve i)-.2 H(ts).15 E .292
(usual meaning in an input sequence base#v)144 549.6 R 2.792(alue. F)
-.25 F .292(or e)-.15 F .292
(xample, the scanning result of %#i on input)-.15 F 1.484
(2#1001 is 2 and the ne)144 561.6 R 1.483
(xt sfgetc\(\) call will return #.)-.15 F -.15(Fo)6.483 G 3.983(r%).15 G
1.483([, if the ne)-3.983 F 1.483(xt character in the input)-.15 F .253
(stream does not match the gi)144 573.6 R -.15(ve)-.25 G 2.753(ns).15 G
.253
(can set of characters, # causes a match to a null string instead of)
-2.753 F 2.5(af)144 585.6 S(ailure.)-2.6 E .808
(Flag I de\214nes the size or type of the object being formatted.)144
609.6 R .808(There are tw)5.808 F 3.308(oc)-.1 G .808
(ases: \(1\) I by itself)-3.308 F(and \(2\) I follo)144 621.6 Q
(wed by either a decimal number or `*'.)-.25 E 1.008
(In the \214rst case, for inte)144 645.6 R 1.008
(ger and \215oating point patterns, the object type is tak)-.15 F 1.009
(en to be the lar)-.1 F(gest)-.18 E .819
(appropriate type \(i.e., one of S\215ong_t, Sfulong_t or Sfdouble_t\).)
144 657.6 R -.15(Fo)5.818 G 3.318(rs).15 G .818
(tring patterns such as %s,)-3.318 F(the \215ag is ignored.)144 669.6 Q
.306(In the second case, a gi)144 693.6 R -.15(ve)-.25 G 2.807(nd).15 G
.307(ecimal v)-2.807 F .307(alue w)-.25 F .307
(ould de\214ne a size while `*' w)-.1 F .307(ould cause the size to be)
-.1 F .44(obtained from the ar)144 705.6 R .44(gument list.)-.18 F -.15
(Fo)5.44 G 2.94(rs).15 G .44
(tring patterns such as %s or %[, this size de\214nes the length)-2.94 F
.361(of the b)144 717.6 R(uf)-.2 E .361(fer to store scanned data.)-.25
F .361(Specifying a b)5.361 F(uf)-.2 E .361
(fer size only limits the amount of data copied)-.25 F .846(into the b)
144 729.6 R(uf)-.2 E(fer)-.25 E 5.846(.S)-.55 G .846(canned data be)
-5.846 F .845(yond the b)-.15 F(uf)-.2 E .845
(fer limit will be discarded.)-.25 F -.15(Fo)5.845 G 3.345(ri).15 G(nte)
-3.345 E .845(ger and \215oating)-.15 F(05 August 1999)274.055 768 Q(15)
192.055 E EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R .329
(point patterns, the size is used to select a type from one of the belo)
144 84 R 2.829(wl)-.25 G .329(ists as indicated by the con-)-2.829 F
-.15(ve)144 96 S(rsion speci\214er:).15 E(S\215ong_t, long, int, short)
154 120 Q(Sfulong_t, unsigned long, unsigned int, unsigned short)154 132
Q(Sfdouble_t, double, \215oat)154 144 Q .36(The selection algorithm al)
144 168 R -.1(wa)-.1 G .36(ys matches types from left to right in an).1
F 2.86(yg)-.15 G -2.15 -.25(iv e)-2.86 H 2.86(nl).25 G 2.86
(ist. Although)-2.86 F(selec-)2.86 E 2.42(tion is generally based on si\
zes in bytes, for compatibility with Microsoft-C, the size 64 is)144 180
R .481
(matched with an appropriate type with the same number of bits, if an)
144 192 R 4.28 -.65(y. I)-.15 H 2.98(ft).65 G .48(he gi)-2.98 F -.15(ve)
-.25 G 2.98(ns).15 G .48(ize does not)-2.98 F .062(match an)144 204 R
2.562(yo)-.15 G 2.562(ft)-2.562 G .062(he listed types, it shall match \
one of int, unsigned int, and double as indicated by the)-2.562 F
(formatting pattern.)144 216 Q(Belo)144 240 Q 2.523(wa)-.25 G .023(re e)
-2.523 F .023(xamples of using the I \215ag.)-.15 F .022(The \214rst e)
5.022 F .022(xample scans a 64-bit inte)-.15 F(ger)-.15 E 5.022(.T)-.55
G .022(he second scans)-5.022 F .632(some \215oating point v)144 252 R
.632(alue whose size is e)-.25 F .633(xplicitly computed and gi)-.15 F
-.15(ve)-.25 G 3.133(n. The).15 F .633(last e)3.133 F .633
(xample scans a)-.15 F .1(string into a b)144 264 R(uf)-.2 E .1
(fer with the gi)-.25 F -.15(ve)-.25 G 2.6(ns).15 G .1(ize 128.)-2.6 F
.099(Note that if the scanned string is longer than 127, only)5.1 F
(the \214rst 127 bytes shall be copied into the b)144 276 Q(uf)-.2 E
(fer)-.25 E 2.5(.T)-.55 G
(he rest of the scanned data shall be discarded.)-2.5 E
(sfscanf\(sfstdin,"%I64d", &int64_obj\);)156.5 300 Q
(sfscanf\(sfstdin,"%I*f", sizeof\(\215oat_obj\), &\215oat_obj\);)156.5
312 Q(sfscanf\(sfstdin,"%I*s", 128, b)156.5 324 Q(uf)-.2 E(fer\);)-.25 E
.969(Flags h, l, and L are the ANSI-C con)144 348 R -.15(ve)-.4 G .97
(ntions for indicating the type of a scanned element.).15 F -.15(Fo)5.97
G(r).15 E -.15(ex)144 360 S .431(ample, %hd means scanning a short int.)
.15 F .431(The \215ags ll and L mean respecti)5.431 F -.15(ve)-.25 G .43
(ly scanning an inte-).15 F(ger or a \215oating point v)144 372 Q
(alue with lar)-.25 E(gest size \(i.e, S\215ong_t or Sfdouble_t\).)-.18
E .394(The %i, %d and %u patterns scan numbers in bases from 2 to 64.)
108 388.8 R .394(%i scans inte)5.394 F .394(gral v)-.15 F .394
(alues in self-describ-)-.25 F .648(ing formats.)108 400.8 R .648
(Except for octal, decimal and he)5.648 F .648
(xadecimal numbers with the usual formats, numbers in gen-)-.15 F .019
(eral bases are assumed to be of the form:)108 412.8 R/F1 10
/Times-Italic@0 SF(base#value)2.519 E F0(where)2.519 E F1(base)2.52 E F0
.02(is a number in base 10 and)2.52 F F1(value)2.52 E F0 .02(is a num-)
2.52 F .569(ber in the gi)108 424.8 R -.15(ve)-.25 G 3.069(nb).15 G
3.069(ase. F)-3.069 F .569(or e)-.15 F .568
(xample, 2#1001 is the binary representation of the decimal v)-.15 F
.568(alue 9.)-.25 F(If)5.568 E F1(base)3.068 E F0(is)3.068 E .863
(36 or less, the digits for)108 436.8 R F1(value)3.363 E F0 .864
(can be an)3.364 F 3.364(yc)-.15 G .864
(ombination of [0-9], [a-z], [A-Z] where upper and lo)-3.364 F .864
(wer case)-.25 F(digits are not distinguishable.)108 448.8 Q(If)5 E F1
(base)2.5 E F0(is lar)2.5 E(ger than 36, the set of digits is:)-.18 E
(0123456789)118 472.8 Q(abcdefghijklmnopqrstuvwxyz)118 484.8 Q
(ABCDEFGHIJKLMNOPQRSTUVWXYZ)118 496.8 Q(@_)118 508.8 Q/F2 10
/Times-Bold@0 SF -.1(BU)87 542.4 S(FFERING, SYNCHR).1 E(ONIZA)-.3 E
(TION)-.95 E -1(Vo)92 554.4 S(id_t* sfsetb)1 E(uf\(S\214o_t* f)-.2 E 2.5
(,V)-.15 G(oid_t* b)-3.5 E(uf)-.2 E 2.5(,s)-.15 G(ize_t size\))-2.5 E F0
.267(This function sets the b)108 566.4 R(uf)-.2 E .266
(fering scheme for the stream f.)-.25 F .266(Except for b)5.266 F(uf)-.2
E .266(fer inquiry \(see the case size == 0,\))-.25 F 2.745(fw)108 578.4
S .245(ill be synchronized before an)-2.745 F 2.745(yb)-.15 G(uf)-2.945
E .245(fer modi\214cation.)-.25 F .245(If a ne)5.245 F 2.745(wb)-.25 G
(uf)-2.945 E .245(fer is successfully set and the old b)-.25 F(uf)-.2 E
(fer)-.25 E(has not been deallocated, sfsetb)108 590.4 Q
(uf\(\) returns the address of the old b)-.2 E(uf)-.2 E(fer)-.25 E 5(.O)
-.55 G(therwise, it returns NULL.)-5 E(After a sfsetb)108 614.4 Q
(uf\(\) call, sfv)-.2 E(alue\(\) returns the size of the returned b)-.25
E(uf)-.2 E(fer)-.25 E(.)-.55 E(size == SF_UNBOUND:)108 631.2 Q 1.858
(S\214o will pick a suitable b)144 643.2 R(uf)-.2 E 1.858(fer size.)-.25
F 1.858(If b)6.858 F 1.857
(uf is NULL, S\214o will also pick a suitable b)-.2 F(uf)-.2 E(fering)
-.25 E .454(scheme \(such as memory mapping.\))144 655.2 R .454(If b)
5.454 F .454(uf is not NULL, its actual v)-.2 F .454(alue is ignored b)
-.25 F .455(ut the b)-.2 F(uf)-.2 E(fer)-.25 E
(will be allocated via malloc\(3\).)144 667.2 Q(This can be used to a)5
E -.2(vo)-.2 G(id memory mapping.).2 E(size > 0:)108 684 Q .202
(This is the suggested size to use for b)144 696 R(uf)-.2 E .202
(fering or memory mapping.)-.25 F .201(If b)5.202 F .201
(uf is NULL, S\214o will pick)-.2 F 2.664(as)144 708 S .164(uitable b)
-2.664 F(uf)-.2 E .164(fering scheme as discussed abo)-.25 F -.15(ve)
-.15 G 5.164(.I).15 G 2.664(fb)-5.164 G .164(uf is not NULL, then b)
-2.864 F .164(uf and size determine a)-.2 F -.2(bu)144 720 S -.25(ff).2
G(er of the gi).25 E -.15(ve)-.25 G 2.5(ns).15 G(ize.)-2.5 E
(05 August 1999)274.055 768 Q(16)192.055 E EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(size == 0:)
108 84 Q .697(If b)144 96 R .697(uf is NULL, the stream will be unb)-.2
F(uf)-.2 E 3.196(fered. If)-.25 F -.2(bu)3.196 G 3.196(fi).2 G 3.196(sn)
-3.196 G .696(ot NULL, sfsetb)-3.196 F .696(uf\(\) simply returns the)
-.2 F(stream b)144 108 Q(uf)-.2 E(fer)-.25 E 5(.I)-.55 G 2.5(nt)-5 G
(his case, no attempt will be made to synchronize the stream.)-2.5 E/F1
10/Times-Bold@0 SF(int sfsync\(S\214o_t* f\))92 136.8 Q F0
(This function synchronizes the logical and ph)108 148.8 Q(ysical vie)
-.05 E(ws of stream f.)-.25 E -.15(Fo)5 G 2.5(raS).15 G
(F_WRITE stream, this means)-2.5 E .854(to write out an)108 160.8 R
3.354(yb)-.15 G(uf)-3.554 E .854(fered data.)-.25 F -.15(Fo)5.854 G
3.354(ras).15 G .853(eekable SF_READ \214le stream, the ph)-3.354 F .853
(ysical \214le position is aligned)-.05 F 1.326
(with the logical stream position and, if SF_SHARE is on, b)108 172.8 R
(uf)-.2 E 1.327(fered data is discarded.)-.25 F 1.327(If f is NULL, all)
6.327 F .294(streams are synchronized.)108 184.8 R .294
(If f is the base of a stream stack \(see sfstack\(\)\), all stack)5.294
F .293(ed streams are synchro-)-.1 F 2.715(nized. Note)108 196.8 R .215
(that a stack)2.715 F .215(ed stream can only be synchronized this w)-.1
F(ay)-.1 E 5.215(.I)-.65 G 2.715(ffi)-5.215 G 2.715(si)-2.715 G -5.214
2.715(na p)-2.715 H .216(ool \(see sfpool\(\)\) b)-2.715 F .216(ut not)
-.2 F 3.602(being the head, the pool head is synchronized.)108 208.8 R
3.601(After a successful synchronization, if f has \215ag)8.601 F .283
(SF_IOCHECK, a SF_SYNC e)108 220.8 R -.15(ve)-.25 G .283(nt is raised.)
.15 F .284(sfsync\(\) returns a ne)5.284 F -.05(ga)-.15 G(ti).05 E .584
-.15(ve v)-.25 H .284(alue for f)-.1 F .284(ailure and 0 for success.)
-.1 F F1(int sfpoll\(S\214o_t** \215ist, int n, int timeout\))92 249.6 Q
F0 .963(This function polls a set of streams to see if I/O operations c\
an be performed on them without blocking.)108 261.6 R .081
(This is useful for multiple)108 273.6 R .081(xing I/O o)-.15 F -.15(ve)
-.15 G 2.581(ras).15 G .082(et of streams.)-2.581 F .082
(If a stream has a discipline, the e)5.082 F .082(xception function)-.15
F .395(may be called before and after the stream is polled \(see sfdisc\
\(\) for details\).)108 285.6 R .395(sfpoll\(\) returns the number of)
5.395 F(ready streams or -1 on f)108 297.6 Q(ailure.)-.1 E
(\215ist and n:)108 314.4 Q .92
(\215ist is an array of n streams to be polled.)144 326.4 R .92
(Upon return, ready streams are mo)5.92 F -.15(ve)-.15 G 3.42(dt).15 G
3.42(ot)-3.42 G .92(he front of)-3.42 F(\215ist in the same relati)144
338.4 Q .3 -.15(ve o)-.25 H(rder).15 E(.)-.55 E(timeout:)108 355.2 Q
.025(This de\214nes an ellapse time in milliseconds to w)144 367.2 R
.024(ait to see if an)-.1 F 2.524(ys)-.15 G .024
(tream is ready for I/O.)-2.524 F .024(If timeout)5.024 F .713(is ne)144
379.2 R -.05(ga)-.15 G(ti).05 E -.15(ve)-.25 G 3.213(,s).15 G .713
(fpoll\(\) will block until some stream become ready)-3.213 F 5.714(.N)
-.65 G .714(ote that SF_STRING and nor)-5.714 F(-)-.2 E 1.259
(mal \214le streams ne)144 391.2 R -.15(ve)-.25 G 3.759(rb).15 G 1.259
(lock and are al)-3.759 F -.1(wa)-.1 G 1.259(ys ready for I/O.).1 F
1.259(If a stream with discipline is being)6.259 F .505
(polled and its readiness is as yet undetermined \(e.g., empty b)144
403.2 R(uf)-.2 E(fer)-.25 E .505(,\) the discipline e)-.4 F .505
(xception func-)-.15 F
(tion will be called with SF_DPOLL before normal actions are tak)144
415.2 Q(en.)-.1 E F1(S\214o_t* sfpool\(S\214o_t* f)92 444 Q 2.5(,S)-.15
G(\214o_t* poolf)-2.5 E 2.5(,i)-.15 G(nt mode\))-2.5 E F0 .122
(This function manipulates pools of streams.)108 456 R .122
(In a pool, only one stream is at the head and can ha)5.122 F .422 -.15
(ve b)-.2 H(uf)-.05 E(fered)-.25 E 2.769(data. All)108 468 R .269
(other streams in the pool will be synchronized.)2.769 F 2.77(As)5.269 G
.27(tream becomes head when it is used for some)-2.77 F(I/O operation.)
108 480 Q(sfpool\(\) returns NULL on f)5 E(ailure.)-.1 E 2.5(fa)108
496.8 S(nd poolf:)-2.5 E .406(If f is NULL, sfpool\(\) simply returns t\
he head of the pool containing poolf.)144 508.8 R .406
(If f is not NULL and)5.406 F .441
(poolf is NULL, f is deleted from its pool.)144 520.8 R .442
(In this case, if no other stream from the same pool can)5.441 F .355(b\
ecome head, sfpool\(\) will return NULL; otherwise, it returns some str\
eam from the remainder of)144 532.8 R .177(the pool.)144 544.8 R .177
(If both f and poolf are not NULL, f is mo)5.177 F -.15(ve)-.15 G 2.678
(df).15 G .178(rom its current pool \(if an)-2.678 F .178
(y\) into the same)-.15 F(pool with poolf.)144 556.8 Q
(In this case, poolf is returned.)5 E 8.5(mode: If)108 573.6 R .96
(poolf is already in a pool, mode is ignored.)3.46 F .959
(Otherwise, mode should be 0 or SF_SHARE.)5.959 F(A)5.959 E .587
(SF_SHARE pool contains streams with SF_WRITE mode.)144 585.6 R .587
(In addition, on change to a ne)5.587 F 3.088(wh)-.25 G(ead)-3.088 E
(stream, b)144 597.6 Q(uf)-.2 E
(fered write data of the current head is transferred to the ne)-.25 E
2.5(wh)-.25 G(ead.)-2.5 E F1(int sfpur)92 626.4 Q(ge\(S\214o_t* f\))-.1
E F0 1.188(This function discards all b)108 638.4 R(uf)-.2 E 1.188
(fered data unless f is a SF_STRING stream.)-.25 F 1.187
(Note that if f is a SF_READ)6.188 F .167
(stream based on an unseekable de)108 650.4 R .167(vice, pur)-.25 F .168
(ged data will not be reco)-.18 F -.15(ve)-.15 G 2.668(rable. If).15 F
2.668(fi)2.668 G 2.668(sas)-2.668 G .168(fpopen-stream opened)-2.668 F
.565(for both read and write, data of both the read and write pipe ends\
 will be pur)108 662.4 R .564(ged \(see sfset\(\) to selecti)-.18 F -.15
(ve)-.25 G(ly).15 E .034(turn of)108 674.4 R 2.534(fr)-.25 G .034
(ead or write mode if one set of data is to be preserv)-2.534 F 2.534
(ed.\) After)-.15 F(pur)2.535 E .035(ging, if f has \215ag SF_IOCHECK,)
-.18 F(the e)108 686.4 Q -.15(ve)-.25 G(nt SF_PURGE is raised.).15 E
(sfpur)5 E(ge\(\) returns -1 for f)-.18 E(ailure and 0 for success.)-.1
E(05 August 1999)274.055 768 Q(17)192.055 E EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(DISCIPLINE, EVENT)87 84 Q(-HANDLING)-.92 E F0 2.832
<418c>108 96 S .332(le stream uses the system calls read\(2\), write\(2\
\) and lseek\(2\) to read, write and position in the underly-)-2.832 F
3.254(ing \214le.)108 108 R 3.254
(Disciplines enable application-de\214ned I/O methods including e)8.254
F 3.255(xception handling and data)-.15 F(pre/post-processing.)108 120 Q
F1(Sfdisc_t* sfdisc\(S\214o_t* f)92 148.8 Q 2.5(,S)-.15 G
(fdisc_t* disc\))-2.5 E F0 .25(Each stream has a discipline stack whose\
 bottom is a virtual discipline representing the actual system calls.)
108 160.8 R 1.352
(sfdisc\(\) manipulates the discipline stack of stream f.)108 172.8 R
3.852(fw)6.352 G 1.352(ill be synchronized before an)-3.852 F 3.852(yd)
-.15 G 1.352(iscipline stack)-3.852 F 3.557(manipulation. After)108
184.8 R 3.556(as)3.557 G 1.056(uccessful discipline stack manipulation,\
 the stream I/O position \(see sfseek\(\) and)-3.556 F 2.5
(sftell\(\)\) and e)108 196.8 R 2.501(xtent \(see sfsize\(\)\) are upda\
ted to re\215ect that de\214ned by the top discipline.)-.15 F 2.501
(If disc is)7.501 F 1
(SF_POPDISC or \(Sfdisc_t*\)0, the top element of the stack, if an)108
208.8 R 2.3 -.65(y, i)-.15 H 3.5(sp).65 G 1
(opped and its address is returned.)-3.5 F .111
(Otherwise, disc is pushed onto the discipline stack.)108 220.8 R .111
(In this case, if successful, sfdisc\(\) returns the discipline)5.111 F
(that w)108 232.8 Q(as pushed do)-.1 E 2.5(wn. sfdisc\(\))-.25 F
(returns NULL on f)2.5 E(ailure.)-.1 E .192
(Note that a discipline can be used only on one stream at a time.)108
256.8 R .192(An application should tak)5.192 F 2.692(ec)-.1 G .192
(are to allocate)-2.692 F(dif)108 268.8 Q .782
(ferent discipline structures for use with dif)-.25 F .782
(ferent streams.)-.25 F 3.282(Ad)5.782 G .782
(iscipline structure is of the type Sfdisc_t)-3.282 F
(which contains the follo)108 280.8 Q(wing public \214elds:)-.25 E 5
(Sfread_f readf;)118 304.8 R 2.5(Sfwrite_f writef;)118 316.8 R 5
(Sfseek_f seekf;)118 328.8 R(Sfe)118 340.8 Q(xcept_f e)-.15 E(xceptf;)
-.15 E .778(The \214rst three \214elds of Sfdisc_t specify alternati)108
369.6 R 1.077 -.15(ve I)-.25 H .777(/O functions.).15 F .777(If an)5.777
F 3.277(yo)-.15 G 3.277(ft)-3.277 G .777(hem is NULL, it is inherited)
-3.277 F .446(from a discipline pushed earlier on the stack.)108 381.6 R
.446(Note that a \214le stream al)5.446 F -.1(wa)-.1 G .446
(ys has read\(2\), write\(2\), lseek\(2\)).1 F .243(and NIL\(Sfe)108
393.6 R .243(xcept_f\) as the)-.15 F/F2 10/Times-Italic@0 SF(lo)2.742 E
.242(gical bottom discipline)-.1 F F0 5.242(.A)C -.18(rg)-5.242 G .242
(uments to I/O discipline functions ha).18 F .542 -.15(ve t)-.2 H .242
(he same).15 F(meaning as that of the functions sfrd\(\), sfwr\(\) and \
sfsk\(\) described belo)108 405.6 Q -.65(w.)-.25 G 1.337(The e)108 422.4
R 1.337(xception function, \(*e)-.15 F 1.337(xceptf\)\(\) announces e)
-.15 F 1.338(xceptional e)-.15 F -.15(ve)-.25 G 1.338
(nts during I/O operations.).15 F 1.338(It is called as)6.338 F(\(*e)108
434.4 Q .96(xceptf\)\(S\214o_t* f, int type, V)-.15 F .96(oid_t* v)-1.29
F .96(alue, Sfdisc_t* disc\).)-.25 F .96
(Unless noted otherwise, the return v)5.96 F .96(alue of)-.25 F(\(*e)108
446.4 Q(xceptf\)\(\) is used as follo)-.15 E(ws:)-.25 E 20.08(<0: The)
108 463.2 R(on-going operation shall terminate.)2.5 E 20.08(>0: If)108
480 R .436(the e)2.936 F -.15(ve)-.25 G .436(nt w).15 F .436
(as raised due to an I/O error)-.1 F 2.936(,t)-.4 G .436
(he error has been repaired and the on-going operation)-2.936 F
(shall continue normally)144 492 Q(.)-.65 E 20.08(=0: The)108 508.8 R
.233(on-going operation performs def)2.733 F .233
(ault actions with respect to the raised e)-.1 F -.15(ve)-.25 G 2.733
(nt. F).15 F .232(or e)-.15 F .232(xample, on)-.15 F 2.763(ar)144 520.8
S .263(eading error or reaching end of \214le, the top stream of a stac\
k will be popped and closed and the)-2.763 F
(on-going operation continue with the ne)144 532.8 Q 2.5(wt)-.25 G
(op stream.)-2.5 E(The ar)108 549.6 Q(gument type of \(*e)-.18 E
(xceptf\)\(\) identi\214es the particular e)-.15 E(xceptional e)-.15 E
-.15(ve)-.25 G(nt:).15 E(SF_LOCKED:)108 566.4 Q(The stream is in a lock)
144 578.4 Q(ed state.)-.1 E(SF_READ, SF_WRITE:)108 595.2 Q(These e)144
607.2 Q -.15(ve)-.25 G
(nts are raised around reading and writing operations.).15 E 1.593(If S\
F_IOCHECK is on, SF_READ and SF_WRITE are raised immediately before rea\
d\(2\) and)144 631.2 R .904(write\(2\) calls.)144 643.2 R .904
(In this case, *\(\(ssize_t*\)v)5.904 F .904
(alue\) is the amount of data to be processed.)-.25 F .904(The return)
5.904 F -.25(va)144 655.2 S .054(lue of \(*e).25 F .054
(xceptf\)\(\), if ne)-.15 F -.05(ga)-.15 G(ti).05 E -.15(ve)-.25 G 2.554
(,i).15 G .053
(ndicates that the stream is not ready for I/O and the calling oper)
-2.554 F(-)-.2 E .383(ation will abort with f)144 667.2 R 2.883
(ailure. If)-.1 F .384(it is positi)2.883 F -.15(ve)-.25 G 2.884(,t).15
G .384(he stream is ready for I/O b)-2.884 F .384
(ut the amount should be)-.2 F .084
(restricted to the amount speci\214ed by this v)144 679.2 R 2.583
(alue. If)-.25 F .083(the return v)2.583 F .083
(alue is zero, the I/O operation is car)-.25 F(-)-.2 E
(ried out normally)144 691.2 Q(.)-.65 E .024
(SF_READ and SF_WRITE are also raised on operation f)144 715.2 R 2.525
(ailures. In)-.1 F .025(such a case, *\(\(ssize_t*\)v)2.525 F(alue\))
-.25 E(is the return v)144 727.2 Q(alue from the f)-.25 E
(ailed operation.)-.1 E(05 August 1999)274.055 768 Q(18)192.055 E EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(SF_SEEK:)108
84 Q(This e)144 96 Q -.15(ve)-.25 G
(nt is raised when a seek operation f).15 E(ails.)-.1 E(SF_NEW)108 112.8
Q 2.5(,S)-.92 G(F_CLOSE, SF_FIN)-2.5 E(AL:)-.35 E .006(These e)144 124.8
R -.15(ve)-.25 G .006(nts are raised during a stream closing.).15 F .005
(SF_NEW is raised for a stream about to be closed)5.005 F .466
(to be rene)144 136.8 R .467(wed \(see sfne)-.25 F 2.967
(w\(\)\). SF_CLOSE)-.25 F .467
(is raised for a stream about to be closed.)2.967 F(SF_FIN)5.467 E .467
(AL is)-.35 F .914(raised after a stream has been closed and before its\
 space is to be destro)144 148.8 R .913(yed \(see sfclose\(\)\).)-.1 F
-.15(Fo)5.913 G(r).15 E .232(these e)144 160.8 R -.15(ve)-.25 G .232
(nts, a non-zero return v).15 F .232(alue from \(*e)-.25 F .233
(xceptf\)\(\) causes sfclose\(\) to return immediately with)-.15 F
(the same v)144 172.8 Q(alue.)-.25 E(SF_DPUSH, SF_DPOP)108 189.6 Q 2.5
(,S)-1.11 G(F_DB)-2.5 E(UFFER:)-.1 E(Ev)144 201.6 Q .708(ents SF_DPUSH \
and SF_DPOP are raised when a discipline is about to be pushed or poppe\
d.)-.15 F(\(Sfdisc_t*\)v)144 213.6 Q
(alue is the to-be top discipline, if an)-.25 E -.65(y.)-.15 G 3.416(As)
144 237.6 S .916(tream b)-3.416 F(uf)-.2 E .916(fer is al)-.25 F -.1(wa)
-.1 G .916(ys synchronized before pushing or popping a discipline.).1 F
.917(If this synchro-)5.917 F 1.019(nization f)144 249.6 R 1.019
(ails, SF_DB)-.1 F 1.018(UFFER will be raised with *\(\(size_t*\)v)-.1 F
1.018(alue\) being the amount of b)-.25 F(uf)-.2 E(fered)-.25 E 3.188
(data. If)144 261.6 R .688(the return v)3.188 F .689(alue of e)-.25 F
.689(xceptf is positi)-.15 F -.15(ve)-.25 G 3.189(,t).15 G .689
(he push or pop operation will continue normally;)-3.189 F
(otherwise, sfdisc\(\) returns f)144 273.6 Q(ailure.)-.1 E(SF_DPOLL:)108
290.4 Q .065(This e)144 302.4 R -.15(ve)-.25 G .065
(nt is raised by sfpoll\(\) to see if the stream is ready for I/O.).15 F
(*\(\(int*\)v)5.065 E .065(alue\) indicates a time-)-.25 F .216
(out interv)144 314.4 R .216(al to w)-.25 F 2.716(ait. A)-.1 F(ne)2.716
E -.05(ga)-.15 G(ti).05 E .516 -.15(ve r)-.25 H .216(eturn v).15 F .216
(alue from the e)-.25 F .216(xception function means blocking.)-.15 F
2.716(Ap)5.216 G(osi-)-2.716 E(ti)144 326.4 Q 1.433 -.15(ve r)-.25 H
1.133(eturn v).15 F 1.133(alue means non-blocking.)-.25 F 3.633(Az)6.133
G 1.133(ero return v)-3.633 F 1.133
(alue means that sfpoll\(\) should query the)-.25 F
(stream \214le descriptor using def)144 338.4 Q(ault methods.)-.1 E
(SF_READ)108 355.2 Q -.92(Y:)-.55 G .384(This e)144 367.2 R -.15(ve)-.25
G .384(nt is raised by sfpoll\(\) for each ready stream after the).15 F
2.885(ya)-.15 G .385(re determined.)-2.885 F 2.885(An)5.385 G -2.25 -.15
(eg a)-2.885 H(ti).15 E .685 -.15(ve r)-.25 H(eturn).15 E -.25(va)144
379.2 S .59(lue from the e).25 F -.15(xe)-.15 G .59(ption handler cause\
s sfpoll\(\) to return immediately with the same return v).15 F(alue.)
-.25 E 2.5(Ap)144 391.2 S(ositi)-2.5 E .3 -.15(ve r)-.25 H(eturn v).15 E
(alue causes sfpoll\(\) to retry polling the whole set of streams.)-.25
E(SF_SYNC, SF_PURGE:)108 408 Q(If SF_IOCHECK is set, these e)144 420 Q
-.15(ve)-.25 G(nts are raised immediately after sfsync\(\) or sfpur).15
E(ge\(\) successfully)-.18 E .047
(complete their operations and before the)144 432 R 2.547(yr)-.15 G
2.547(eturn. Note)-2.547 F .047
(that sfsync\(\) is implied when a SF_WRITE)2.547 F 1.08
(or SF_SHARE|SF_READ stream is closed.)144 444 R 1.08
(Note also that SF_SYNC is not raised for a stream)6.08 F
(synchronized during a call sfsync\(\(S\214o_t*\)0\).)144 456 Q(SF_A)108
472.8 Q(TEXIT)-1.11 E(:)-.5 E(This e)144 484.8 Q -.15(ve)-.25 G
(nt is raised for each open stream before the process e).15 E(xits.)-.15
E/F1 10/Times-Bold@0 SF(int sfraise\(S\214o_t* f)92 513.6 Q 2.5(,i)-.15
G(nt type, V)-2.5 E(oid_t* data\))-1 E F0 .464
(This function calls all e)108 525.6 R .464
(xception handlers of stream f with the e)-.15 F -.15(ve)-.25 G .464
(nt type and associated data.).15 F .463(If an e)5.464 F(xcep-)-.15 E
1.906(tion handler returns a non-zero v)108 537.6 R 1.906
(alue, sfraise\(\) immediate returns the same v)-.25 F 4.406
(alue. Application-de\214ned)-.25 F -2.15 -.25(ev e)108 549.6 T 2.412
(nts should start from the v).25 F 2.411(alue SF_EVENT so as to a)-.25 F
-.2(vo)-.2 G 2.411(id confusion with system-de\214ned e).2 F -.15(ve)
-.25 G(nts,).15 E(sfraise\(\) returns 0 on success and -1 on f)108 561.6
Q(ailure.)-.1 E F1(ssize_t sfrd\(S\214o_t* f)92 590.4 Q 2.5(,V)-.15 G
(oid_t* b)-3.5 E(uf)-.2 E 2.5(,s)-.15 G(ize_t n, Sfdisc_t* disc\))-2.5 E
(ssize_t sfwr\(S\214o_t* f)92 602.4 Q 2.5(,c)-.15 G(onst V)-2.5 E
(oid_t* b)-1 E(uf)-.2 E 2.5(,s)-.15 G(ize_t n, Sfdisc_t* disc\))-2.5 E
(Sf)92 614.4 Q(off_t sfsk\(S\214o_t* f)-.25 E 2.5(,S)-.15 G -.25(fo)-2.5
G(ff_t offset, int type, Sfdisc_t* disc\)).25 E F0 .954
(These functions pro)108 626.4 R .954
(vides safe methods for a discipline I/O function to in)-.15 F -.2(vo)
-.4 G 1.154 -.1(ke e).2 H .954(arlier discipline I/O func-).1 F .827
(tions and to properly handle e)108 638.4 R 3.327(xceptions. The)-.15 F
3.327(ys)-.15 G .827(hould not be used in an)-3.327 F 3.327(yo)-.15 G
.827(ther conte)-3.327 F 3.327(xt. sfrd\(\))-.15 F .827(and sfwr\(\))
3.327 F .724(return the number of bytes read or written.)108 650.4 R
.724(sfsk\(\) returns the ne)5.724 F 3.224(ws)-.25 G .724(eek position.)
-3.224 F .724(On error)5.724 F 3.224(,a)-.4 G .724(ll three func-)-3.224
F(tions return a ne)108 662.4 Q -.05(ga)-.15 G(ti).05 E .3 -.15(ve v)
-.25 H(alue which should be -1 or the v)-.1 E(alue returned by the e)
-.25 E(xception handler)-.15 E(.)-.55 E F1(STREAM CONTR)87 696 Q(OL)-.3
E F0(05 August 1999)274.055 768 Q(19)192.055 E EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(int sfset\(S\214o_t* f)92 84 Q 2.5(,i)-.15 G
(nt \215ags, int set\))-2.5 E F0
(This function sets control \215ags for the stream f.)108 96 Q
(It returns the pre)5 E(vious set of \215ags or 0 on error)-.25 E(.)-.55
E 4.969(Settable \215ags are: SF_READ, SF_WRITE, SF_IOCHECK, SF_LINE, S\
F_SHARE, SF_PUBLIC,)108 120 R .521(SF_MALLOC, SF_ST)108 132 R -1.11(AT)
-.93 G .521(IC and SF_B)1.11 F(UFCONST)-.1 E 5.521(.N)-.74 G .522
(ote that SF_READ and SF_WRITE can be turned on)-5.521 F 1.029(or of)108
144 R 3.529(fo)-.25 G 1.029(nly if the stream w)-3.529 F 1.029
(as opened as SF_READ|SF_WRITE.)-.1 F -.45(Tu)6.029 G 1.029(rning of).45
F 3.529(fo)-.25 G 1.028(ne of them means that the)-3.529 F .343
(stream is to be treated e)108 156 R(xclusi)-.15 E -.15(ve)-.25 G .343
(ly in the other mode. It is not possible to turn of).15 F 2.844(fb)-.25
G 2.844(oth. If)-2.844 F(le)2.844 E -.05(ga)-.15 G .344(l, an attempt)
.05 F(to turn on either SF_READ or SF_WRITE will cause the stream to be\
 in the gi)108 168 Q -.15(ve)-.25 G 2.5(nI).15 G(/O mode.)-2.5 E
(set == 0:)108 184.8 Q .246
(If \215ags is zero, the current set of \215ags is simply returned.)144
196.8 R .245(Note that when a stream is \214rst opened,)5.246 F .463
(not all of its \215ags are initialized yet \(more belo)144 208.8 R .463
(w\). If \215ags is non-zero, an attempt is made to turn)-.25 F(of)144
220.8 Q 2.5(ft)-.25 G(he speci\214ed \215ags.)-2.5 E(set != 0:)108 237.6
Q .109
(If \215ags is zero, the stream is initialized if not yet done so.)144
249.6 R .108(Then the current set of \215ags is returned.)5.108 F(If \
\215ags is non-zero, an attempt is made to turn on the speci\214ed \215\
ags.)144 261.6 Q F1(int sfsetfd\(S\214o_t* f)92 290.4 Q 2.5(,i)-.15 G
(nt fd\))-2.5 E F0 .906
(This function changes the \214le descriptor of f.)108 302.4 R .906
(Before a change is realized, \(*notify\)\(f,SF_SETFD,ne)5.906 F(wfd\))
-.25 E(\(see sfnotify\(\)\) is called.)108 314.4 Q
(sfsetfd\(\) returns -1 on f)5 E(ailure and the ne)-.1 E 2.5<778c>-.25 G
(le descriptor on success.)-2.5 E(fd >= 0:)108 331.2 Q .909
(If the current \214le descriptor is non-ne)144 343.2 R -.05(ga)-.15 G
(ti).05 E -.15(ve)-.25 G 3.408(,i).15 G 3.408(tw)-3.408 G .908
(ill be changed using dup\(3\) to a v)-3.408 F .908(alue lar)-.25 F .908
(ger or)-.18 F .795(equal to fd.)144 355.2 R .795
(Upon a successful change, the pre)5.795 F .795
(vious \214le descriptor will be closed.)-.25 F .795(If the current)
5.795 F(\214le descriptor is ne)144 367.2 Q -.05(ga)-.15 G(ti).05 E -.15
(ve)-.25 G 2.5(,i).15 G 2.5(tw)-2.5 G
(ill be set to fd and the stream will be reinitialized.)-2.5 E(fd < 0:)
108 384 Q 1.106(The stream is synchronized \(see sfsync\(\)\) and its \
\214le descriptor will be set to this v)9.25 F 3.606(alue. Then,)-.25 F
-.15(ex)144 396 S 1.971(cept for sfclose\(\), the stream will be inacce\
ssible until a future sfsetfd\(\) call resets the \214le).15 F .063
(descriptor to a non-ne)144 408 R -.05(ga)-.15 G(ti).05 E .363 -.15
(ve v)-.25 H 2.563(alue. Thus,)-.1 F .063
(sfsetfd\(f,-1\) can be used to a)2.563 F -.2(vo)-.2 G .062
(id closing the \214le descrip-).2 F(tor of f when f is closed.)144 420
Q F1(S\214o_t* sfstack\(S\214o_t* base, S\214o_t* top\))92 448.8 Q F0
.154(This function stacks or unstacks stream.)108 460.8 R(Ev)5.154 E
.154
(ery stream stack is identi\214ed by a base stream via which all I/O)
-.15 F 1.5(operations are performed.)108 472.8 R(Ho)6.5 E(we)-.25 E -.15
(ve)-.25 G 2.3 -.4(r, a).15 H 4(nI).4 G 1.5(/O operation al)-4 F -.1(wa)
-.1 G 1.499(ys tak).1 F 1.499(es ef)-.1 F 1.499(fect on the top stream.)
-.25 F 1.499(If the top)6.499 F .108
(stream reaches the end of \214le or has an unreco)108 484.8 R -.15(ve)
-.15 G .108
(rable error condition, it is automatically popped and closed).15 F
(\(see also sfdisc\(\) for alternati)108 496.8 Q .3 -.15(ve h)-.25 H
(andling of these conditions\).).15 E 12.95(base: This)108 513.6 R
(is the base stream of the stack.)2.5 E
(If it is NULL, sfstack\(\) does nothing and returns top.)5 E 17.94
(top: If)108 530.4 R 2.053(this is SF_POPST)4.553 F -.4(AC)-.93 G 4.553
(Ko).4 G 4.553(r\()-4.553 G 2.053
(S\214o_t*\)0, the stack is popped and sfstack\(\) returns the popped)
-4.553 F 3.416(stream. Otherwise,)144 542.4 R .917(top is pushed on top\
 of the stack identi\214ed by base and sfstack\(\) returns the)3.416 F
(base stream.)144 554.4 Q F1
(S\214o_t* sfswap\(S\214o_t* f1, S\214o_t* f2\))92 583.2 Q F0 .845
(This function sw)108 595.2 R .845(aps contents of f1 and f2.)-.1 F .844
(This f)5.844 F .844(ails if either stream is in a stream stack b)-.1 F
.844(ut not being a)-.2 F 1.164(base stream.)108 607.2 R 1.164
(If f2 is NULL, a ne)6.164 F 3.664(ws)-.25 G 1.165
(tream is constructed as a duplicate of f1.)-3.664 F(sfsw)6.165 E 1.165
(ap\(\) returns f2 or f1)-.1 F(duplicate on success and NULL on f)108
619.2 Q(ailure.)-.1 E F1(STREAM INFORMA)87 652.8 Q(TION)-.95 E(Sf)92
664.8 Q(off_t sfsize\(S\214o_t* f\))-.25 E F0 .112
(This function returns the size of stream f \(see sfne)108 676.8 R 2.611
(w\(\)\). If)-.25 F 2.611(fi)2.611 G 2.611(sn)-2.611 G .111
(ot seekable or if its size is not determinable,)-2.611 F
(sfsize\(\) returns -1.)108 688.8 Q(05 August 1999)274.055 768 Q(20)
192.055 E EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(Sf)92 84 Q(off_t sftell\(S\214o_t* f\))-.25 E F0 .132
(This function returns the current I/O position in stream f.)108 96 R
.133(Note that if f is SF_APPEND and a writing oper)5.133 F(-)-.2 E
1.096(ation w)108 108 R 1.096
(as just performed, the current I/O position is at the ph)-.1 F 1.096
(ysical end of \214le.)-.05 F 1.095(If f is unseekable, sftell)6.096 F
(returns the number of bytes read from or written to f.)108 120 Q
(See also sfungetc\(\).)5 E F1(ssize_t sfv)92 148.8 Q
(alue\(S\214o_t* f\))-.1 E F0(This function returns the string or b)108
160.8 Q(uf)-.2 E(fer length for sfreserv)-.25 E(e\(\), sfsetb)-.15 E
(uf\(\), and sfgetr\(\).)-.2 E F1(int sf\214leno\(S\214o_t* f\))92 189.6
Q F0(This function returns the \214le descriptor of stream f.)108 201.6
Q F1(int sfstack)92 230.4 Q(ed\(S\214o_t* f\))-.1 E F0
(This function returns a non-zero v)108 242.4 Q
(alue if stream f has been stack)-.25 E(ed.)-.1 E F1
(int sfeof\(S\214o_t* f\))92 271.2 Q(int sferr)92 283.2 Q
(or\(S\214o_t* f\))-.18 E(int sfclr)92 295.2 Q(err\(S\214o_t* f\))-.18 E
F0 .237(sfeof\(\) tells whether or not the stream has an end-of-\214le \
condition.)108 307.2 R .238(sferror\(\) tells whether or not the stream)
5.238 F .05(has an error condition.)108 319.2 R .049
(sfclrerr\(\) clears both end-of-\214le and error conditions.)5.05 F
.049(The end-of-\214le and error con-)5.049 F
(ditions are also cleared on an I/O operation.)108 331.2 Q F1
(int sfclrlock\(S\214o_t* f\))92 360 Q F0 .491
(This function restores the stream back to a normal state.)108 372 R
.492(This means clearing locks and possibly thro)5.491 F(wing)-.25 E
-2.3 -.15(aw a)108 384 T 3.488(yu).15 G .988(nprocessed data.)-3.488 F
.988(As such, this operation is unsafe and should be used with care.)
5.988 F -.15(Fo)5.987 G 3.487(re).15 G .987(xample, it)-3.637 F 1.118(m\
ay be used before a long jump \(longjmp\(3\)\) out of some discipline I\
/O function to restore the internal)108 396 R(stream states.)108 408 Q
(sfclrlock\(\) returns the current set of \215ags.)5 E F1
(int sfnotify\(\(v)92 436.8 Q
(oid\(*\)notify\)\(S\214o_t*, int, int\) \))-.1 E F0 .545(This sets a f\
unction \(*notify\)\(\) to be called as \(*notify\)\(f,type,\214le\) on\
 v)108 448.8 R .545(arious stream e)-.25 F -.15(ve)-.25 G 3.045(nts. Ar)
.15 F .545(guments f)-.18 F
(and \214le are stream and related \214le descriptor)108 460.8 Q 5(.A)
-.55 G -.18(rg)-5 G(ument type indicates the reason for the call:).18 E
(SF_NEW)108 477.6 Q(:)-.37 E 2.5(fi)144 489.6 S 2.5(sb)-2.5 G
(eing opened and \214le is the underlying \214le descriptor)-2.5 E(.)
-.55 E(SF_CLOSE:)108 506.4 Q 2.5(fa)144 518.4 S
(nd \214le are being closed.)-2.5 E(SF_SETFD:)108 535.2 Q(The \214le de\
scriptor of f is being changed to \214le \(see sfsetfd\(\).\))144 547.2
Q(SF_READ:)108 564 Q(An attempt to change f to read mode f)144 576 Q
(ailed.)-.1 E(SF_WRITE:)108 592.8 Q
(An attempt to change f to write mode f)144 604.8 Q(ailed.)-.1 E F1
(MISCELLANEOUS FUNCTIONS)87 638.4 Q(ssize_t sfslen\(\))92 650.4 Q F0(Th\
is function returns the length of a string just constructed by sfsprint\
f\(\) or sfprints\(\).)108 662.4 Q(See also sfv)5 E(alue\(\).)-.25 E F1
(int sfulen\(Sfulong_t v\))92 691.2 Q F0(05 August 1999)274.055 768 Q
(21)192.055 E EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(int s\215len\(S\215ong_t v\))92 84 Q
(int sfdlen\(Sfdouble_t v\))92 96 Q F0 .386
(These functions return respecti)108 108 R -.15(ve)-.25 G .386(ly the n\
umber of bytes required to code the Sfulong_t, S\215ong_t or Sfdou-).15
F(ble_t v)108 120 Q(alue v by sfputu\(\), sfputl\(\) or sfputd\(\).)-.25
E F1(ssize_t sfpkrd\(int fd, char* b)92 148.8 Q(uf)-.2 E 2.5(,s)-.15 G
(ize_t n, int rsc, long tm, int action\))-2.5 E F0 .207
(This function acts directly on the \214le descriptor fd.)108 160.8 R
.206(It does a combination of peeking on incoming data and)5.207 F 2.848
(at)108 172.8 S .349(ime-out read.)-2.848 F .349
(Upon success, it returns the number of bytes recei)5.349 F -.15(ve)-.25
G 2.849(d. A).15 F .349(return v)2.849 F .349(alue of 0 means that the)
-.25 F(end-of-\214le condition has been detected.)108 184.8 Q 2.5(An)5 G
-2.25 -.15(eg a)-2.5 H(ti).15 E .3 -.15(ve v)-.25 H
(alue represents an error)-.1 E(.)-.55 E -.2(bu)108 201.6 S(f, n:).2 E
(These de\214ne a b)10.09 E(uf)-.2 E
(fer and its size to read data into.)-.25 E 19.06(rsc: If)108 218.4 R
(>=0, this de\214nes a record separator)2.5 E 5(.S)-.55 G
(ee action for detail.)-5 E 20.16(tm: If)108 235.2 R
(>=0, this de\214nes a time interv)2.5 E(al in milliseconds to w)-.25 E
(ait for incoming data.)-.1 E 6.28(action: When)108 252 R .976
(rsc >= 0, the absolute v)3.476 F .976(alue of action,)-.25 F/F2 10
/Times-Italic@0 SF(r)3.476 E F0 3.476(,d)C .975
(etermines the number of records to be read.)-3.476 F(If)5.975 E .791
(action > 0, sfpkrd\(\) will peek on incoming data b)144 264 R .791
(ut will not read past it. Therefore, a future sfp-)-.2 F .295
(krd\(\) or read\(2\) will see the same data ag)144 276 R 2.795(ain. If)
-.05 F .294(action == 0, sfpkrd\(\) will not peek.)2.795 F .294
(If action < 0,)5.294 F 1.042(there are tw)144 288 R 3.542(oc)-.1 G
1.043(ases: if rsc < 0, sfpkrd\(\) reads n bytes; otherwise, e)-3.542 F
(xactly)-.15 E F2(r)3.543 E F0 1.043(records will be read.)3.543 F .404
(Note that, in the last case, reading records from an unseekable de)144
300 R .404(vice may be slo)-.25 F 2.904(wi)-.25 G 2.904(ft)-2.904 G .404
(he underly-)-2.904 F(ing platform does not allo)144 312 Q 2.5(wp)-.25 G
(eeking on such a de)-2.5 E(vice.)-.25 E F1(FULL STR)87 345.6 Q
(UCTURE SFIO_T)-.3 E(#include <s\214o_t.h>)92 357.6 Q F0 1.133(Most app\
lications based on S\214o only need to include the header \214le s\214o\
.h which de\214nes an abbre)108 369.6 R(viated)-.25 E .754
(S\214o_t structure without certain \214elds pri)108 381.6 R -.25(va)
-.25 G .754(te to S\214o.).25 F(Ho)5.754 E(we)-.25 E -.15(ve)-.25 G
1.554 -.4(r, t).15 H .754(here are times \(e.g., deb).4 F .754
(ugging\) when an)-.2 F .719(application may require more details about\
 the full S\214o_t structure.)108 393.6 R .719
(In such cases, the header \214le s\214o_t.h)5.719 F .626
(can be used in place of s\214o.h.)108 405.6 R .626
(Note that an application doing this will become sensiti)5.626 F .925
-.15(ve t)-.25 H 3.125(oc).15 G .625(hanges in the)-3.125 F
(internal architecture of S\214o.)108 417.6 Q F1(#de\214ne SFNEW\(b)92
446.4 Q(uf)-.2 E(,size,\214le,\215ags,disc\))-.15 E F0 .903(This macro \
function is de\214ned in s\214o_t.h for use in static initialization of\
 an S\214o_t structure.)108 458.4 R .904(It requires)5.904 F<8c76>108
470.4 Q 2.5(ea)-.15 G -.18(rg)-2.5 G(uments:).18 E -.2(bu)108 487.2 S
(f, size:).2 E(These de\214ne a b)144 499.2 Q(uf)-.2 E
(fer and its size.)-.25 E 17.94(\214le: This)108 516 R
(de\214nes the underlying \214le descriptor if an)2.5 E -.65(y.)-.15 G
11.83(\215ags: This)108 532.8 R
(is composed from bit \215ags described abo)2.5 E -.15(ve)-.15 G(.).15 E
14.61(disc: This)108 549.6 R(de\214nes a discipline if an)2.5 E -.65(y.)
-.15 G F1(EXAMPLE DISCIPLINES)87 583.2 Q F0 .193(The belo)108 595.2 R
2.693(wf)-.25 G .193
(unctions create disciplines and insert them into the gi)-2.693 F -.15
(ve)-.25 G 2.692(ns).15 G .192(treams f. These functions return 0 on)
-2.692 F(success and -1 on f)108 607.2 Q(ailure.)-.1 E F1
(int sfdcdio\(S\214o_t* f)87 636 Q 2.5(,s)-.15 G(ize_t b)-2.5 E
(ufsize\))-.2 E F0 .088
(This creates a discipline that uses the direct IO feature a)108 648 R
-.25(va)-.2 G .089(ilable on \214le systems such as SGI').25 F 2.589(sX)
-.55 G .089(FS to speed)-2.589 F(up IO.)108 660 Q(The ar)5 E(gument b)
-.18 E(ufsize suggests a b)-.2 E(uf)-.2 E
(fer size to use for data transfer)-.25 E(.)-.55 E F1
(int sfdcdos\(S\214o_t* f\))87 688.8 Q F0
(This creates a discipline to read DOS te)108 700.8 Q(xt \214les.)-.15 E
(It basically transforms pairs of \\r\\n to \\n.)5 E(05 August 1999)
274.055 768 Q(22)192.055 E EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(int sfdc\214lter\(S\214o_t* f)87 84 Q 2.5(,c)-.15 G
(onst char* cmd\))-2.5 E F0 .569
(This creates a discipline that sends data from f to the gi)108 96 R
-.15(ve)-.25 G 3.069(nc).15 G .569
(ommand cmd to process, then reads back the)-3.069 F(processed data.)108
108 Q F1(int sfdclzw\(S\214o_t* f\))87 136.8 Q F0 1.159
(This creates a discipline that w)108 148.8 R 1.159
(ould decompress data in f.)-.1 F 1.16(The stream f should ha)6.159 F
1.46 -.15(ve d)-.2 H 1.16(ata from a source).15 F
(compressed by the Unix)108 160.8 Q F1(compr)2.5 E(ess)-.18 E F0
(program.)2.5 E F1(int sfdcseekable\(S\214o_t* f\))87 189.6 Q F0
(This creates a discipline that mak)108 201.6 Q
(es an unseekable reading stream seekable.)-.1 E F1(int sfdcslo)87 230.4
Q(w\(S\214o_t* f\))-.1 E F0 .603(This creates a discipline that mak)108
242.4 R .602(es all S\214o operations return immediately on interrupts.\
 This is useful for)-.1 F(dealing with slo)108 254.4 Q 2.5(wd)-.25 G
-.25(ev)-2.5 G(ices.).25 E F1(int sfdcsubstr)87 283.2 Q
(eam\(S\214o_t* f)-.18 E 2.5(,S)-.15 G(\214o_t* par)-2.5 E(ent, Sf)-.18
E(off_t offset, Sf)-.25 E(off_t extent\))-.25 E F0 .341
(This creates a discipline that mak)108 295.2 R .342
(es f acts as if it corresponds e)-.1 F .342
(xactly to the subsection of parent starting at)-.15 F(of)108 307.2 Q
(fset with size e)-.25 E(xtent.)-.15 E F1(int sfdctee\(S\214o_t* f)87
336 Q 2.5(,S)-.15 G(\214o_t* tee\))-2.5 E F0
(This creates a discipline that copies to the stream tee an)108 348 Q
2.5(yd)-.15 G(ata written to f.)-2.5 E F1(int sfdcunion\(S\214o_t* f)87
376.8 Q 2.5(,S)-.15 G(\214o_t** array)-2.5 E 2.5(,i)-.55 G(nt n\))-2.5 E
F0(This creates a discipline that mak)108 388.8 Q
(es f act as if it is the concatenation of the n streams gi)-.1 E -.15
(ve)-.25 G 2.5(ni).15 G 2.5(na)-2.5 G(rray)-2.5 E(.)-.65 E F1
(STDIO-COMP)87 422.4 Q -.95(AT)-.74 G(IBILITY).95 E F0 .499(S\214o pro)
108 434.4 R .499(vides tw)-.15 F 2.999(oc)-.1 G .499
(ompatibility packages to Stdio-based applications, a source le)-2.999 F
-.15(ve)-.25 G 2.998(li).15 G(nterf)-2.998 E .498(ace and a binary)-.1 F
(le)108 446.4 Q -.15(ve)-.25 G 2.5(ll).15 G(ibrary)-2.5 E 5(.T)-.65 G
(hese packages pro)-5 E
(vide a union of functions in popular Stdio implementations.)-.15 E
1.524(The source Stdio-compatibility interf)108 463.2 R 1.524(ace pro)
-.1 F 1.525
(vides the header \214le stdio.h that de\214nes a set of macros or)-.15
F .439(inlined functions to map Stdio calls to S\214o ones.)108 475.2 R
.438(This mapping may benignly e)5.438 F .438(xtend or change the mean-)
-.15 F .243(ing of certain original Stdio operations. F)108 487.2 R .243
(or e)-.15 F .243(xample, the S\214o')-.15 F 2.744(sv)-.55 G .244
(ersion of popen\(\) allo)-2.894 F .244(ws a coprocess to be)-.25 F .166
(opened for both reading and writing unlik)108 499.2 R 2.666(et)-.1 G
.166(he original call which only allo)-2.666 F .165
(ws a coprocess to be opened for)-.25 F 3.93(as)108 511.2 S 1.43
(ingle mode.)-3.93 F(Similarly)6.43 E 3.93(,t)-.65 G 1.43(he S\214o')
-3.93 F 3.93(sf)-.55 G 1.43(open\(\) call can be used to create string \
streams in addition to \214le)-3.93 F(streams.)108 523.2 Q 1.165
(The binary Stdio-compatibility library)108 540 R 3.665(,l)-.65 G 1.165
(ibstdio.a, pro)-3.665 F 1.164
(vides a complete implementation of Stdio functions)-.15 F .058
(suitable for linking applications already compiled with nati)108 552 R
.359 -.15(ve h)-.25 H .059(eader stdio.h.).15 F .059
(Functions in this implementa-)5.059 F
(tion are also slightly altered or e)108 564 Q(xtended as discussed abo)
-.15 E -.15(ve)-.15 G(.).15 E(Belo)108 580.8 Q 2.5(wa)-.25 G
(re the supported Stdio functions:)-2.5 E 2.5(FILE* fopen\(const)108
597.6 R(char* \214le, const char* mode\);)2.5 E 2.5
(FILE* freopen\(const)108 609.6 R
(char* \214le, const char* mode, FILE* stream\);)2.5 E 2.5
(FILE* fdopen\(int)108 621.6 R(\214ledesc, const char* mode\);)2.5 E 2.5
(FILE* popen\(const)108 633.6 R(char* command, const char* mode\);)2.5 E
2.5(FILE* tmp\214le\(\);)108 645.6 R 7.5(int fclose\(FILE*)108 657.6 R
(stream\);)2.5 E 7.5(int pclose\(FILE*)108 669.6 R(stream\);)2.5 E -.2
(vo)108 693.6 S 5(id setb).2 F(uf\(FILE* stream, char* b)-.2 E(uf\);)-.2
E 7.5(int setvb)108 705.6 R(uf\(FILE* stream, char* b)-.2 E
(uf, int mode, size_t size\);)-.2 E -.2(vo)108 717.6 S 5(id setb).2 F
(uf)-.2 E(fer\(FILE* stream, char* b)-.25 E(uf, size_t size\);)-.2 E 7.5
(int setlineb)108 729.6 R(uf\(FILE* stream\);)-.2 E(05 August 1999)
274.055 768 Q(23)192.055 E EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R 7.5(int f)108
84 R(\215ush\(FILE* stream\);)-.25 E 7.5(int fpur)108 96 R
(ge\(FILE* stream\);)-.18 E 7.5(int fseek\(FILE*)108 120 R
(stream, long of)2.5 E(fset, int whence\);)-.25 E -.2(vo)108 132 S 5
(id re).2 F(wind\(FILE* stream\);)-.25 E 7.5(int fgetpos\(FILE*)108 144
R(stream, fpos_t* pos\);)2.5 E 7.5(int fsetpos\(FILE*)108 156 R
(stream, fpos_t* pos\);)2.5 E 5(long ftell\(FILE*)108 168 R(stream\);)
2.5 E 7.5(int getc\(FILE*)108 192 R(stream\);)2.5 E 7.5
(int fgetc\(FILE*)108 204 R(stream\);)2.5 E 7.5(int getchar\(v)108 216 R
(oid\);)-.2 E 7.5(int ungetc\(int)108 228 R(c, FILE* stream\);)2.5 E 7.5
(int getw\(FILE*)108 240 R(stream\);)2.5 E 2.5(char* gets\(char*)108 252
R(s\);)2.5 E 2.5(char* fgets\(char*)108 264 R(s, int n, FILE* stream\);)
2.5 E(size_t fread\(V)108 276 Q(oid_t* ptr)-1.29 E 2.5(,s)-.4 G
(ize_t size, size_t nelt, FILE* stream\);)-2.5 E 7.5(int putc\(int)108
300 R(c, FILE* stream\);)2.5 E 7.5(int fputc\(int)108 312 R
(c, FILE* stream\);)2.5 E 7.5(int putchar\(int)108 324 R(c\);)2.5 E 7.5
(int putw\(int)108 336 R 1.3 -.65(w, F)2.5 H(ILE* stream\);).65 E 7.5
(int puts\(const)108 348 R(char* s, FILE* stream\);)2.5 E 7.5
(int fputs\(const)108 360 R(char* s, FILE* stream\);)2.5 E
(size_t fwrite\(const V)108 372 Q(oid_t* ptr)-1.29 E 2.5(,s)-.4 G
(ize_t size, size_t nelt, FILE* stream\);)-2.5 E 7.5(int fscanf\(FILE*)
108 396 R(stream, const char* format, ...\);)2.5 E 7.5
(int vfscanf\(FILE*)108 408 R(stream, const char* format, v)2.5 E
(a_list ar)-.25 E(gs\);)-.18 E 7.5(int _doscan\(FILE*)108 420 R
(stream, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18 E 7.5
(int scanf\(const)108 432 R(char* format, ...\);)2.5 E 7.5
(int vscanf\(const)108 444 R(char* format, v)2.5 E(a_list ar)-.25 E
(gs\);)-.18 E 7.5(int sscanf\(const)108 456 R
(char* s, const char* format, ...\);)2.5 E 7.5(int vsscanf\(const)108
468 R(char* s, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18 E
7.5(int fprintf\(FILE*)108 492 R(stream, const char* format, ...\);)2.5
E 7.5(int vfprintf\(FILE*)108 504 R(stream, const char* format, v)2.5 E
(a_list ar)-.25 E(gs\);)-.18 E 7.5(int _doprnt\(FILE*)108 516 R
(stream, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18 E 7.5
(int printf\(const)108 528 R(char* format, ...\);)2.5 E 7.5
(int vprintf\(const)108 540 R(char* format, v)2.5 E(a_list ar)-.25 E
(gs\);)-.18 E 7.5(int sprintf\(const)108 552 R
(char* s, const char* format, ...\);)2.5 E 7.5(int snprintf\(const)108
564 R(char* s, int n, const char* format, ...\);)2.5 E 7.5
(int vsprintf\(const)108 576 R(char* s, const char* format, v)2.5 E
(a_list ar)-.25 E(gs\);)-.18 E 7.5(int vsnprintf\(const)108 588 R
(char* s, int n, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18
E 7.5(int feof\(FILE*)108 612 R(stream\);)2.5 E 7.5(int ferror\(FILE*)
108 624 R(stream\);)2.5 E 7.5(int clearerr\(FILE*)108 636 R(stream\);)
2.5 E/F1 10/Times-Bold@0 SF(RECENT CHANGES)87 669.6 Q F0 2.56(Af)108
681.6 S .56 -.25(ew e)-2.56 H .06(xception types ha).1 F .36 -.15(ve b)
-.2 H .059(een added. In particular).15 F 2.559(,e)-.4 G .059
(xception handlers shall be raised with SF_LOCKED)-2.709 F .113
(on accessing a lock)108 693.6 R .113(ed stream.)-.1 F .113
(Before a process e)5.113 F .113(xits, the e)-.15 F -.15(ve)-.25 G .113
(nt SF_A).15 F .113(TEXIT is raised for each open stream.)-1.11 F 3.29
(An)108 710.4 S .79(umber of disciplines ha)-3.29 F 1.09 -.15(ve b)-.2 H
.789(een added for v).15 F .789(arious processing functions.)-.25 F .789
(Of interests are disciplines to)5.789 F 1.892
(use the direct I/O feature on IRIX6.2, read DOS te)108 722.4 R 1.893
(xt \214les, and decompress \214les compressed by Unix)-.15 F
(05 August 1999)274.055 768 Q(24)192.055 E EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Italic@0 SF(compr)108 84 Q(ess)-.37 E F0(.)A -1.11(Va)108 100.8 S
.316(rious ne)1.11 F 2.816(ws)-.25 G .316(tream and function \215ags ha)
-2.816 F .615 -.15(ve b)-.2 H .315(een added. F).15 F .315(or e)-.15 F
.315(xample, the third ar)-.15 F .315(gument of sfgetr\(\) is no)-.18 F
(w)-.25 E 2.677(as)108 112.8 S .177
(et of bit \215ags and not just a three-v)-2.677 F .177(alue object. Ho)
-.25 F(we)-.25 E -.15(ve)-.25 G .978 -.4(r, t).15 H .178
(he old semantics of this ar).4 F .178(gument of sfgetr\(\) is)-.18 F
(still supported.)108 124.8 Q .803(The sfopen\(\) call has been e)108
141.6 R .803(xtended so that sfopen\(f,NULL,mode\) can be used to chang\
ed the mode of a)-.15 F(\214le stream before an)108 153.6 Q 2.5(yI)-.15
G(/O operations.)-2.5 E
(This is most useful for changing the modes of the standard streams.)5 E
1.756(The b)108 170.4 R(uf)-.2 E 1.757(fering strate)-.25 F 1.757
(gy has been signi\214cantly enhanced for streams that perform man)-.15
F 4.257(ys)-.15 G 1.757(eek operations.)-4.257 F .501
(Also, the handling of stream and \214le positions ha)108 182.4 R .801
-.15(ve b)-.2 H .5
(een better clari\214ed so that applications that share \214le).15 F(de\
scriptors across streams and/or processes can be sure that the \214le s\
tates will be consistent.)108 194.4 Q/F2 9/Times-Bold@0 SF -.45(AU)72
223.2 S(THORS).45 E F0(Kiem-Phong V)108 235.2 Q
(o, kpv@research.att.com,)-1.29 E(Da)108 247.2 Q(vid G. K)-.2 E
(orn, dgk@research.att.com, and)-.35 E(Glenn S. F)108 259.2 Q -.25(ow)
-.15 G(ler).25 E 2.5(,g)-.4 G(sf@research.att.com.)-2.5 E
(05 August 1999)274.055 768 Q(25)192.055 E EP
%%Trailer
end
%%EOF
