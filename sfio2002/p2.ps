%!PS-Adobe-3.0
%%Creator: groff version 1.17.2
%%CreationDate: Tue Jul  2 11:40:42 2002
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.17 2
%%Pages: 29
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.17 2
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/FL{
currentgray exch setgray fill setgray
}bind def
/BL/fill load def
/LW/setlinewidth load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10.95
/Times-Bold@0 SF -.219(NA)72 84 S(ME).219 E/F2 10/Times-Bold@0 SF
(s\214o)108 96 Q F0 2.5<ad73>2.5 G(afe/f)-2.5 E
(ast string/\214le input/output)-.1 E F1(SYNOPSIS)72 112.8 Q F2
(LIBRARIES)87 124.8 Q F0 12.5(#include <s\214o.h>)108 136.8 R 10
(libs\214o.a -ls\214o)108 160.8 R 7.5(libstdio.a -lstdio)108 172.8 R 2.5
(libs\214o-mt.a -ls\214o-mt)108 184.8 R(libstdio-mt.a -lstdio-mt)108
196.8 Q F2 -.35(DA)87 213.6 S 1.8 -.9(TA T)-.6 H(YPES).9 E F0 -1.29(Vo)
108 225.6 S(id_t;)1.29 E(Sfof)108 237.6 Q(f_t;)-.25 E(S\215ong_t;)108
249.6 Q(Sfulong_t;)108 261.6 Q(Sfdouble_t;)108 273.6 Q(S\214o_t;)108
297.6 Q(Sfdisc_t;)108 321.6 Q 7.5(ssize_t \(*Sfread_f\)\(S\214o_t*,)108
333.6 R -1.29(Vo)2.5 G(id_t*, size_t, Sfdisc_t*\);)1.29 E 7.5
(ssize_t \(*Sfwrite_f\)\(S\214o_t*,)108 345.6 R(const V)2.5 E
(oid_t*, size_t, Sfdisc_t*\);)-1.29 E(Sfof)108 357.6 Q 7.5
(f_t \(*Sfseek_f\)\(S\214o_t*,)-.25 F(Sfof)2.5 E(f_t, int, Sfdisc_t*\);)
-.25 E 17.5(int \(*Sfe)108 369.6 R(xcept_f\)\(S\214o_t*, int, V)-.15 E
(oid_t*, Sfdisc_t*\);)-1.29 E(Sf)108 393.6 Q(fmt_t;)-.25 E 17.5
(int \(*Sf)108 405.6 R(fmte)-.25 E(xt_f\)\(S\214o_t*, V)-.15 E
(oid_t*, Sf)-1.29 E(fmt_t*\);)-.25 E 17.5(int \(*Sf)108 417.6 R(fmte)
-.25 E -.15(ve)-.25 G(nt_f\)\(S\214o_t*, int, V).15 E(oid_t*, Sf)-1.29 E
(fmt_t*\);)-.25 E(SFIO_VERSION)108 441.6 Q F2(BIT FLA)87 458.4 Q(GS)-.55
E F0(SF_STRING)108 470.4 Q(SF_READ)108 482.4 Q(SF_WRITE)108 494.4 Q
(SF_APPEND)108 506.4 Q(WR \(SF_APPEND\))-.3 E(SF_LINE)108 518.4 Q
(SF_SHARE)108 530.4 Q(SF_PUBLIC)108 542.4 Q(SF_MALLOC)108 554.4 Q(SF_ST)
108 566.4 Q -1.11(AT)-.93 G(IC)1.11 E(SF_IOCHECK)108 578.4 Q(SF_WHOLE)
108 590.4 Q(SF_MTSAFE)108 602.4 Q F2(OPENING/CLOSING STREAMS)87 619.2 Q
F0 7.5(S\214o_t* sfne)108 631.2 R(w\(S\214o_t* f, V)-.25 E(oid_t* b)
-1.29 E(uf, size_t size, int fd, int \215ags\);)-.2 E 7.5
(S\214o_t* sfopen\(S\214o_t*)108 643.2 R
(f, const char* string, const char* mode\);)2.5 E 7.5
(S\214o_t* sfpopen\(S\214o_t*)108 655.2 R
(f, const char* cmd, const char* mode\);)2.5 E 7.5
(S\214o_t* sftmp\(size_t)108 667.2 R(size\);)2.5 E 17.5
(int sfclose\(S\214o_t*)108 679.2 R(f\);)2.5 E(01 August 2001)274.055
768 Q(1)197.055 E EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(THREAD SAFETY)87 84 Q F0 17.5(int sfmute)108 96 R
(x\(S\214o_t* f, int type\);)-.15 E(SFMTX_LOCK)108 120 Q(SFMTX_TR)108
132 Q(YLOCK)-.65 E(SFMTX_UNLOCK)108 144 Q(SFMTX_CLRLOCK)108 156 Q F1
(INPUT/OUTPUT OPERA)87 172.8 Q(TIONS)-.95 E F0 17.5
(int sfgetc\(S\214o_t*)108 184.8 R(f\);)2.5 E 17.5
(int sfputc\(S\214o_t*)108 196.8 R(f, int c\);)2.5 E 17.5
(int sfnputc\(S\214o_t*)108 208.8 R(f, int c, int n\);)2.5 E 17.5
(int sfungetc\(S\214o_t*)108 220.8 R(f, int c\);)2.5 E 2.5
(Sfulong_t sfgetm\(S\214o_t*)108 244.8 R(f, Sfulong_t max\);)2.5 E 17.5
(int sfputm\(S\214o_t*)108 256.8 R(f, Sfulong_t v)2.5 E 2.5(,S)-.65 G
(fulong_t max\);)-2.5 E 2.5(Sfulong_t sfgetu\(S\214o_t*)108 268.8 R
(f\);)2.5 E 17.5(int sfputu\(S\214o_t*)108 280.8 R(f, Sfulong_t v\);)2.5
E 5(S\215ong_t sfgetl\(S\214o_t*)108 292.8 R(f\);)2.5 E 17.5
(int sfputl\(S\214o_t*)108 304.8 R(f, S\215ong_t v\);)2.5 E
(Sfdouble_t sfgetd\(S\214o_t* f\);)108 316.8 Q 17.5
(int sfputd\(S\214o_t*)108 328.8 R(f, Sfdouble_t v\);)2.5 E 12.5
(char* sfgetr\(S\214o_t*)108 352.8 R(f, int rsc, int type\);)2.5 E 7.5
(ssize_t sfputr\(S\214o_t*)108 364.8 R(f, const char* s, int rsc\);)2.5
E(Sfof)108 376.8 Q 7.5(f_t sfmo)-.25 F -.15(ve)-.15 G(\(S\214o_t* fr).15
E 2.5(,S)-.4 G(\214o_t* fw)-2.5 E 2.5(,S)-.65 G(fof)-2.5 E
(f_t n, int rsc\);)-.25 E 7.5(ssize_t sfread\(S\214o_t*)108 400.8 R
(f, V)2.5 E(oid_t* b)-1.29 E(uf, size_t n\);)-.2 E 7.5
(ssize_t sfwrite\(S\214o_t*)108 412.8 R(f, const V)2.5 E(oid_t* b)-1.29
E(uf, size_t n\);)-.2 E(Sfof)108 424.8 Q 7.5(f_t sfseek\(S\214o_t*)-.25
F(f, Sfof)2.5 E(f_t of)-.25 E(fset, int type\);)-.25 E -1.29(Vo)108
436.8 S 7.5(id_t* sfreserv)1.29 F
(e\(S\214o_t* f, ssize_t n, int type\);)-.15 E F1 -.35(DA)87 453.6 S 1.8
-.9(TA F)-.6 H(ORMA).9 E(TTING)-.95 E F0 17.5(int sfscanf\(S\214o_t*)108
465.6 R(f, const char* format, ...\);)2.5 E 17.5(int sfsscanf\(const)108
477.6 R(char* s, const char* format, ...\);)2.5 E 17.5
(int sfvsscanf\(const)108 489.6 R(char* s, const char* format, v)2.5 E
(a_list ar)-.25 E(gs\);)-.18 E 17.5(int sfvscanf\(S\214o_t*)108 501.6 R
(f, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18 E 17.5
(int sfprintf\(S\214o_t*)108 525.6 R(f, const char* format, ...\);)2.5 E
12.5(char* sfprints\(const)108 537.6 R(char* format, ...\);)2.5 E 17.5
(int sfsprintf\(char*)108 549.6 R(s, int n, const char* format, ...\);)
2.5 E 17.5(int sfvsprintf\(char*)108 561.6 R
(s, int n, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18 E
17.5(int sfvprintf\(S\214o_t*)108 573.6 R(f, const char* format, v)2.5 E
(a_list ar)-.25 E(gs\);)-.18 E(Sf)108 597.6 Q(fmt_t;)-.25 E(SFFMT_LEFT)
108 621.6 Q(SFFMT_SIGN)108 633.6 Q(SFFMT_BLANK)108 645.6 Q(SFFMT_ZER)108
657.6 Q(O)-.4 E(SFFMT_THOUSAND)108 669.6 Q(SFFMT_LONG)108 681.6 Q
(SFFMT_LLONG)108 693.6 Q(SFFMT_SHOR)108 705.6 Q(T)-.6 E(SFFMT_LDOUBLE)
108 717.6 Q(SFFMT_IFLA)108 729.6 Q(G)-.4 E(01 August 2001)274.055 768 Q
(2)197.055 E EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(SFFMT_AL)108
84 Q(TER)-.92 E(SFFMT_SKIP)108 96 Q(SFFMT_ARGPOS)108 108 Q(SFFMT_V)108
120 Q(ALUE)-1.35 E 17.5(int \(*Sf)108 144 R(fmte)-.25 E
(xt_f\)\(S\214o_t* f, V)-.15 E(oid_t* v)-1.29 E 2.5(,S)-.65 G -.25(ff)
-2.5 G(mt_t* fe\);).25 E 17.5(int \(*Sf)108 156 R(fmte)-.25 E -.15(ve)
-.25 G(nt_f\)\(S\214o_t* f, int type, V).15 E(oid_t* v)-1.29 E 2.5(,S)
-.65 G -.25(ff)-2.5 G(mt_t* fe\);).25 E -.2(vo)108 168 S 15(id v).2 F
(a_cop)-.25 E(y\(v)-.1 E(a_list to, v)-.25 E(a_list fr\);)-.25 E 15
(long sf)108 180 R(fmtv)-.25 E(ersion\(Sf)-.15 E(fmt_t* fe, type\);)-.25
E/F1 10/Times-Bold@0 SF -.1(BU)87 196.8 S(FFERING, SYNCHR).1 E(ONIZA)-.3
E(TION)-.95 E F0 -1.29(Vo)108 208.8 S 7.5(id_t* sfsetb)1.29 F
(uf\(S\214o_t* f, V)-.2 E(oid_t* b)-1.29 E(uf, size_t size\);)-.2 E 17.5
(int sfsync\(S\214o_t*)108 220.8 R(f\);)2.5 E 17.5
(int sfpoll\(S\214o_t**)108 232.8 R(\215ist, int n, int timeout\);)2.5 E
7.5(S\214o_t* sfpool\(S\214o_t*)108 244.8 R
(f, S\214o_t* poolf, int mode\);)2.5 E 17.5(int sfpur)108 256.8 R
(ge\(S\214o_t* f\);)-.18 E F1(DISCIPLINE, EVENT HANDLING)87 273.6 Q F0
2.5(Sfdisc_t* sfdisc\(S\214o_t*)108 285.6 R(f, Sfdisc_t* disc\);)2.5 E
17.5(int sfraise\(S\214o_t*)108 297.6 R(f, int type, V)2.5 E
(oid_t* data\);)-1.29 E 7.5(ssize_t sfrd\(S\214o_t*)108 309.6 R(f, V)2.5
E(oid_t* b)-1.29 E(uf, size_t n, Sfdisc_t* disc\);)-.2 E 7.5
(ssize_t sfwr\(S\214o_t*)108 321.6 R(f, const V)2.5 E(oid_t* b)-1.29 E
(uf, size_t n, Sfdisc_t* disc\);)-.2 E(Sfof)108 333.6 Q 7.5
(f_t sfsk\(S\214o_t*)-.25 F(f, Sfof)2.5 E(f_t of)-.25 E
(fset, int type, Sfdisc_t* disc\);)-.25 E(SF_NEW)108 357.6 Q(SF_READ)108
369.6 Q(SF_WRITE)108 381.6 Q(SF_SEEK)108 393.6 Q
(SF_CLOSING \(SF_CLOSE\))108 405.6 Q(SF_DPUSH)108 417.6 Q(SF_DPOP)108
429.6 Q(SF_DPOLL)108 441.6 Q(SF_DB)108 453.6 Q(UFFER)-.1 E(SF_SYNC)108
465.6 Q(SF_PURGE)108 477.6 Q(SF_FIN)108 489.6 Q(AL)-.35 E(SF_READ)108
501.6 Q(Y)-.55 E(SF_LOCKED)108 513.6 Q(SF_A)108 525.6 Q(TEXIT)-1.11 E
(SF_EVENT)108 537.6 Q F1(STREAM CONTR)87 554.4 Q(OL)-.3 E F0 17.5
(int sfresize\(S\214o_t*)108 566.4 R(f, Sfof)2.5 E(f_t size\);)-.25 E
17.5(int sfset\(S\214o_t*)108 578.4 R(f, int \215ags, int i\);)2.5 E
17.5(int sfsetfd\(S\214o_t*)108 590.4 R(f, int fd\);)2.5 E 7.5
(S\214o_t* sfstack\(S\214o_t*)108 602.4 R(base, S\214o_t* top\);)2.5 E
7.5(S\214o_t* sfsw)108 614.4 R(ap\(S\214o_t* f1, S\214o_t* f2\);)-.1 E
F1(STREAM INFORMA)87 631.2 Q(TION)-.95 E F0(Sfof)108 643.2 Q 7.5
(f_t sfsize\(S\214o_t*)-.25 F(f\);)2.5 E(Sfof)108 655.2 Q 7.5
(f_t sftell\(S\214o_t*)-.25 F(f\);)2.5 E 7.5(ssize_t sfv)108 667.2 R
(alue\(S\214o_t* f\);)-.25 E 17.5(int sf)108 679.2 R
(\214leno\(S\214o_t* f\);)-.25 E 17.5(int sfstack)108 703.2 R
(ed\(S\214o_t* f\);)-.1 E 17.5(int sfeof\(S\214o_t*)108 715.2 R(f\);)2.5
E 17.5(int sferror\(S\214o_t*)108 727.2 R(f\);)2.5 E(01 August 2001)
274.055 768 Q(3)197.055 E EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R 17.5
(int sfclrerr\(S\214o_t*)108 84 R(f\);)2.5 E 17.5
(int sfclrlock\(S\214o_t*)108 96 R(f\);)2.5 E 17.5(int sfnotify\(v)108
120 R(oid \(*notify\)\(S\214o_t* f, int type, int fd\)\);)-.2 E/F1 10
/Times-Bold@0 SF(MISCELLANEOUS FUNCTIONS)87 136.8 Q F0 7.5
(ssize_t sfslen\(\);)108 148.8 R 17.5(int sfulen\(Sfulong_t)108 160.8 R
(v\);)2.5 E 17.5(int s\215len\(S\215ong_t)108 172.8 R(v\);)2.5 E 17.5
(int sfdlen\(Sfdouble_t)108 184.8 R(v\);)2.5 E 7.5(ssize_t sfpkrd\(int)
108 196.8 R(fd, V)2.5 E(oid_t* b)-1.29 E(uf, size_t n,)-.2 E
(int rsc, long tm, int peek\);)153 208.8 Q F1(FULL STR)87 225.6 Q
(UCTURE SFIO_T)-.3 E F0 5(#include <s\214o_t.h>)108 237.6 R 7.5
(#de\214ne SFNEW\(b)108 249.6 R(uf,size,\214le,\215ags,disc\))-.2 E F1
(EXAMPLE DISCIPLINES)87 266.4 Q F0 5(#include <sfdisc.h>)108 278.4 R
17.5(int sfdcdio\(S\214o_t*)108 302.4 R(f, size_t b)2.5 E(ufsize\);)-.2
E 17.5(int sfdcdos\(S\214o_t*)108 314.4 R(f\);)2.5 E 17.5
(int sfdc\214lter\(S\214o_t*)108 326.4 R(f, const char* cmd\);)2.5 E
17.5(int sfdclzw\(S\214o_t*)108 338.4 R(f\);)2.5 E 17.5
(int sfdcseekable\(S\214o_t*)108 350.4 R(f\);)2.5 E 17.5(int sfdcslo)108
362.4 R(w\(S\214o_t* f\);)-.25 E 17.5(int sfdcsubstream\(S\214o_t*)108
374.4 R(f, S\214o_t* parent,)2.5 E(Sfof)170.5 386.4 Q(f_t of)-.25 E
(fset, Sfof)-.25 E(f_t e)-.25 E(xtent\);)-.15 E 17.5
(int sfdctee\(S\214o_t*)108 398.4 R(f, S\214o_t* tee\);)2.5 E 17.5
(int sfdcunion\(S\214o_t*)108 410.4 R(f, S\214o_t** array)2.5 E 2.5(,i)
-.65 G(nt n\);)-2.5 E F1(STDIO-COMP)87 427.2 Q -.95(AT)-.74 G(IBILITY)
.95 E F0 5(#include <stdio.h>)108 439.2 R(cc ... -lstdio -ls\214o)108
451.2 Q(cc ... -lstdio-mt -ls\214o-mt)108 463.2 Q/F2 10.95/Times-Bold@0
SF(DESCRIPTION)72 480 Q F0 .867(S\214o pro)108 492 R .867
(vides I/O functions to manage b)-.15 F(uf)-.2 E .867(fered streams.)
-.25 F .867(Each S\214o stream is a)5.867 F/F3 10/Times-Italic@0 SF .867
(\214le str)3.367 F(eam)-.37 E F0 3.366(,r)C .866(epresenting a)-3.366 F
.379(\214le \(see open\(2\)\), or a)108 504 R F3 .379(string str)2.879 F
(eam)-.37 E F0 2.879(,r)C .379(epresenting a memory se)-2.879 F 2.88
(gment. Be)-.15 F .38(yond the usual I/O operations on)-.15 F .398
(streams, S\214o pro)108 516 R .397(vides I/O disciplines for e)-.15 F
.397(xtended data processing, stream stacks for recursi)-.15 F .697 -.15
(ve s)-.25 H .397(tream pro-).15 F 1.134
(cessing, and stream pools for automatic data synchronization.)108 528 R
1.134(Applications can e)6.134 F 1.135(xtend the sfprintf\(\)/sfs-)-.15
F(canf\(\) functions to de\214ne their o)108 540 Q(wn con)-.25 E -.15
(ve)-.4 G(rsion patterns as well as rede\214ne e).15 E(xisting ones.)
-.15 E 2.682(Ad)108 556.8 S .182(iscipline de\214nes analogues of the s\
ystem calls read\(2\), write\(2\) and lseek\(2\).)-2.682 F .182
(Such system calls or their)5.182 F 1.054
(discipline replacements are used to process stream data.)108 568.8 R
1.055(Henceforth, `)6.055 F(`)-.74 E F3 1.055(system call)B F0 2.535
-.74('' w)D 1.055(ill refer to either a).74 F
(system call or its discipline replacement.)108 580.8 Q 2.932(As)108
597.6 S .431(ystem call is said to cause an e)-2.932 F .431
(xception if its return v)-.15 F .431(alue is non-positi)-.25 F -.15(ve)
-.25 G 5.431(.U).15 G .431(nless o)-5.431 F -.15(ve)-.15 G .431
(rridden by e).15 F(xcep-)-.15 E .901(tion handlers \(see sfdisc\(\)\),\
 an interrupted system call \(errno == EINTR on UNIX systems\) will be \
auto-)108 609.6 R(matically rein)108 621.6 Q -.2(vo)-.4 G -.1(ke).2 G
2.5(dt).1 G 2.5(oc)-2.5 G(ontinue the ongoing operation.)-2.5 E .828
(The b)108 638.4 R(uf)-.2 E .828
(fer of a stream is typically a memory se)-.25 F .827
(gment allocated via malloc\(3\) or supplied by the applica-)-.15 F
2.713(tion. File)108 650.4 R .213
(streams may also use memory mapping \(mmap\(2\)\) if that is more ef)
2.713 F 2.713(\214cient. When)-.25 F .214(memory map-)2.714 F .601(ping\
 is used, the underlying \214le should not be truncated while the strea\
m is acti)108 662.4 R -.15(ve)-.25 G 5.601(.M).15 G .601
(emory mapping can)-5.601 F(be turned of)108 674.4 Q 2.5(fu)-.25 G
(sing sfsetb)-2.5 E(uf\(\).)-.2 E .226(There are three)108 691.2 R F3
(standar)2.727 E 2.727(ds)-.37 G(tr)-2.727 E(eams)-.37 E F0 2.727(:s)C
.227(fstdin for input \(\214le descriptor 0 on UNIX systems\), sfstdout\
 for normal)-2.727 F(output \(\214le descriptor 1\), and sfstderr for e\
rror output \(\214le descriptor 2\).)108 703.2 Q(01 August 2001)274.055
768 Q(4)197.055 E EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(LIBRARIES)87 84 Q F0 .992(This v)108 96 R .992
(ersion of S\214o can be b)-.15 F .991
(uilt and used for both uni-threaded and multi-threaded en)-.2 F .991
(vironments. In the)-.4 F .339(former case, streams are not protected f\
rom simultaneous accesses by dif)108 108 R .34
(ferent threads. In the latter case, a)-.25 F 1.591
(stream is typically lock)108 120 R 1.591(ed with a mute)-.1 F 4.091(xd)
-.15 G 1.59
(uring access so that another thread trying to access the same)-4.091 F
(stream will block until the mute)108 132 Q 2.5(xi)-.15 G 2.5(sr)-2.5 G
(eleased.)-2.5 E 3.697(Ap)108 156 S 1.197
(rogram that does not use multiple threads can link with)-3.697 F F1
(libs\214o.a)3.697 E F0 1.197(while a program that uses multiple)3.697 F
1.712(threads should link with)108 168 R F1(libs\214o-mt.a)4.212 E F0
6.712(.T)C 1.712(he libraries)-6.712 F F1(libstdio.a)4.212 E F0(and)
4.212 E F1(libstdio-mt.a)4.212 E F0(pro)4.211 E 1.711
(vide corresponding)-.15 F .666
(Stdio functions to link with code already compiled using the nati)108
180 R .967 -.15(ve h)-.25 H(eader).15 E F1(stdio.h)3.167 E F0 .667
(instead of the one pro-)3.167 F(vided by S\214o.)108 192 Q F1 -.35(DA)
87 225.6 S 1.8 -.9(TA T)-.6 H(YPES).9 E -1(Vo)92 237.6 S(id_t*)1 E F0
.662(This de\214nes a type suitable to e)108 249.6 R .661
(xchange data of unkno)-.15 F .661
(wn types between application and S\214o.)-.25 F -1.29(Vo)5.661 G .661
(id_t is a)1.29 F(macro de\214ned as v)108 261.6 Q
(oid for ANSI-C and C++ and char for other compilation en)-.2 E
(vironments.)-.4 E F1(Sf)92 283.2 Q(off_t)-.25 E F0
(This de\214nes an inte)108 295.2 Q
(gral type suitable to address the lar)-.15 E(gest possible \214le e)
-.18 E(xtent.)-.15 E F1(Sfulong_t, S\215ong_t, Sfdouble_t)92 316.8 Q F0
1.322(These are respecti)108 328.8 R -.15(ve)-.25 G 1.322(ly the lar).15
F 1.322(gest unsigned inte)-.18 F(ger)-.15 E 3.822(,s)-.4 G 1.322
(igned inte)-3.822 F(ger)-.15 E 3.822(,a)-.4 G 1.322
(nd \215oating point v)-3.822 F 1.322(alue types on the)-.25 F
(local platform.)108 340.8 Q F1(S\214o_t)92 362.4 Q F0
(This de\214nes the type of a stream handle.)108 374.4 Q F1(Sfdisc_t)92
396 Q(ssize_t \(*Sfr)92 408 Q(ead_f\)\(S\214o_t*, V)-.18 E
(oid_t*, size_t, Sfdisc_t*\))-1 E
(ssize_t \(*Sfwrite_f\)\(S\214o_t*, const V)92 420 Q
(oid_t*, size_t, Sfdisc_t*\))-1 E(Sf)92 432 Q
(off_t \(*Sfseek_f\)\(S\214o_t*, Sf)-.25 E(off_t, int, Sfdisc_t*\))-.25
E(int \(*Sfexcept_f\)\(S\214o_t*, int, V)92 444 Q(oid_t*, Sfdisc_t*\))-1
E F0 .645(Sfdisc_t de\214nes a stream discipline structure.)108 456 R
.644(Sfread_f, Sfwrite_f and Sfseek_f are the types of discipline)5.644
F .149(functions to replace the system calls: read\(2\), write\(2\) and\
 lseek\(2\).)108 468 R(Sfe)5.149 E .149(xcept_f is the type of an e)-.15
F -.15(ve)-.25 G(nt-han-).15 E(dling function.)108 480 Q
(See sfdisc\(\) for more details.)5 E F1(Sffmt_t)92 501.6 Q
(int \(*Sffmtext_f\)\(S\214o_t*, V)92 513.6 Q(oid_t*, Sffmt_t*\))-1 E
(int \(*Sffmte)92 525.6 Q -.1(ve)-.15 G(nt_f\)\(S\214o_t*, int, V).1 E
(oid_t*, Sffmt_t*\))-1 E F0(Sf)108 537.6 Q 3.097
(fmt_t de\214nes a formatting en)-.25 F 3.097
(vironment that can be used to e)-.4 F 3.096
(xtend scanning and printing in the)-.15 F .6
(sfprint\(\)/sfscanf\(\) functions. Sf)108 549.6 R(fmte)-.25 E .6
(xt_f and Sf)-.15 F(fmte)-.25 E -.15(ve)-.25 G .6
(nt_f de\214ne the types of e).15 F .6(xtension functions de\214nable)
-.15 F(in Sf)108 561.6 Q 2.5(fmt_t. See)-.25 F(Sf)2.5 E(fmt_t belo)-.25
E 2.5(wf)-.25 G(or more details.)-2.5 E F1(SFIO_VERSION)92 583.2 Q F0
1.183(This is a macro v)108 595.2 R 1.183
(alue of type long int that de\214nes the current v)-.25 F 1.182
(ersion number of S\214o. F)-.15 F 1.182(or e)-.15 F 1.182(xample, the)
-.15 F(S\214o2000')108 607.2 Q 2.5(sv)-.55 G
(ersion number is 20000515L \(which also indicates its latest v)-2.65 E
(ersion date: 05/15/2000\).)-.15 E F1(BIT FLA)87 636 Q(GS)-.55 E F0 3.43
(An)108 648 S .93(umber of bit \215ags control stream operations.)-3.43
F(The)5.931 E 3.431(ya)-.15 G .931
(re set either at stream initialization or by calling)-3.431 F 2.5
(sfset\(\). F)108 660 R(ollo)-.15 E(wing are the \215ags:)-.25 E
(SF_STRING:)108 676.8 Q(The stream is memory-based.)144 688.8 Q
(01 August 2001)274.055 768 Q(5)197.055 E EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R
(SF_READ, SF_WRITE, SF_APPEND)108 84 Q(WR \(SF_APPEND\):)-.3 E 2.531
(Flags SF_READ and SF_WRITE indicate readability and writability)144 96
R 7.531(.F)-.65 G 2.531(lag SF_APPEND)-7.531 F(WR)-.3 E .924(asserts th\
at the stream is a \214le opened in append mode \(see open\(2\) and fcn\
tl\(2\)\) so that data is)144 108 R(al)144 120 Q -.1(wa)-.1 G 1.067
(ys output at the end of \214le.).1 F 1.066
(On systems without direct support for append mode, S\214o uses)6.066 F
(lseek\(2\) or its discipline replacement to approximate this beha)144
132 Q(vior)-.2 E(.)-.55 E(SF_LINE:)108 148.8 Q 1.447
(The stream is line-oriented.)144 160.8 R -.15(Fo)6.447 G 3.947(raS).15
G 1.447(F_WRITE stream, this means that b)-3.947 F(uf)-.2 E 1.448
(fered data is \215ushed)-.25 F(whene)144 172.8 Q -.15(ve)-.25 G 2.601
(ran).15 G -.25(ew)-2.601 G .101(-line character).25 F 2.601(,\\)-.4 G
.101(n, is output.)-2.601 F -.15(Fo)5.101 G 2.601(raS).15 G .1
(F_READ stream, SF_LINE is only signi\214cant)-2.601 F 1.147
(during calls to functions in the sfscanf\(\) f)144 184.8 R(amily)-.1 E
6.147(.S)-.65 G 1.148(F_LINE is set on initialization of an)-6.147 F
3.648(ys)-.15 G(tream)-3.648 E(representing a terminal de)144 196.8 Q
(vice.)-.25 E(SF_SHARE, SF_PUBLIC:)108 213.6 Q .955(Flag SF_SHARE means\
 that the underlying \214le descriptor is shared by independent entitie\
s \(for)144 225.6 R -.15(ex)144 237.6 S(ample, multiple processes\).).15
E -.15(Fo)144 261.6 S 3.545(ras).15 G 1.045(eekable \214le stream, SF_S\
HARE means that the logical stream and the ph)-3.545 F 1.046
(ysical \214le posi-)-.05 F .229
(tions will be made the same before a system call to perform ph)144
273.6 R .229(ysical I/O.)-.05 F .228(There are dif)5.229 F .228
(ferent pos-)-.25 F 3.207(sibilities. If)144 285.6 R .707
(SF_PUBLIC is not set, the ph)3.207 F .708
(ysical \214le position is made equal to the logical stream)-.05 F 2.731
(position. If)144 297.6 R .231(SF_PUBLIC is set, there are tw)2.731 F
2.731(oc)-.1 G 2.731(ases. If)-2.731 F .23(the ph)2.731 F .23
(ysical \214le position has changed from)-.05 F .34(its last kno)144
309.6 R .34
(wn position, the logical stream position is made equal to the ne)-.25 F
2.84(wp)-.25 G -.05(hy)-2.84 G .34(sical \214le position.).05 F(Finally)
144 321.6 Q 3.32(,i)-.65 G 3.32(ft)-3.32 G .82(he ph)-3.32 F .82
(ysical \214le location remains the same as its last kno)-.05 F .82
(wn position, the ph)-.25 F .82(ysical \214le)-.05 F
(position is made the same as the logical stream position.)144 333.6 Q
-.15(Fo)144 357.6 S 2.861(ra).15 G 2.861(nu)-2.861 G .361
(nseekable stream \(e.g., pipes or terminal de)-2.861 F .362
(vices\), if possible, SF_SHARE means that the)-.25 F 1.382
(block and record I/O operations \(sfread\(\), sfwrite\(\), sfmo)144
369.6 R -.15(ve)-.15 G 1.382(\(\), sfgetr\(\), sfputr\(\), sfreserv).15
F 1.381(e\(\), sfs-)-.15 F .218(canf\(\) and sfvprintf\(\)\) will ensur\
e: \(1\) after each writing operation, the stream is synchronized and)
144 381.6 R .323
(\(2\) each reading operation only reads the requested amount.)144 393.6
R .323(Note, ho)5.323 F(we)-.25 E -.15(ve)-.25 G 1.122 -.4(r, t).15 H
.322(hat \(2\) is not al).4 F -.1(wa)-.1 G(ys).1 E
(possible without proper OS f)144 405.6 Q
(acilities such as recv\(2\) or streamio\(4\).)-.1 E 2.5(As)144 429.6 S
(tandard stream that is seekable will be initialized with SF_SHARE|SF_P\
UBLIC.)-2.5 E(SF_MALLOC:)108 446.4 Q(The stream b)144 458.4 Q(uf)-.2 E
(fer w)-.25 E
(as obtained via malloc\(3\) and can be reallocated or freed.)-.1 E
(SF_ST)108 475.2 Q -1.11(AT)-.93 G(IC:)1.11 E .415
(The stream structure should not be freed when closed \(sfclose\(\)\).)
144 487.2 R .415(This \215ag is used by an applica-)5.415 F .688
(tions that allocate their o)144 499.2 R .687(wn stream structures. Suc\
h applications must use the header \214le s\214o_t.h)-.25 F
(instead of s\214o.h.)144 511.2 Q(SF_IOCHECK:)108 528 Q .446
(If the stream has a discipline e)144 540 R .446(xception handler)-.15 F
2.946(,e)-.4 G .446(xceptions will be raised in sfsync\(\), sfpur)-3.096
F .446(ge\(\) or)-.18 F
(before a system call read\(2\) or write\(2\) \(see sfdisc\(\)\).)144
552 Q(SF_WHOLE:)108 568.8 Q .575
(This \215ag guarantees that data written in an)144 580.8 R 3.074(ys)
-.15 G .574(ingle sfwrite\(\) or sfputr\(\) call will al)-3.074 F -.1
(wa)-.1 G .574(ys be output).1 F .765(as a whole to the output de)144
592.8 R 3.266(vice. This)-.25 F .766
(is useful in certain applications \(e.g., netw)3.266 F .766
(orking\) where a)-.1 F(comple)144 604.8 Q 2.948(xo)-.15 G .448
(bject must be output without being split in dif)-2.948 F .447
(ferent system calls.)-.25 F .447(Note that the respec-)5.447 F(ti)144
616.8 Q .3 -.15(ve s)-.25 H(tream still b).15 E(uf)-.2 E
(fers data as the b)-.25 E(uf)-.2 E(fer can accomodate.)-.25 E
(SF_MTSAFE:)108 633.6 Q .24(This \215ag indicates that the respecti)144
645.6 R .54 -.15(ve s)-.25 H .241
(tream may be accessed by more than one threads.).15 F 2.741(Am)5.241 G
(ute)-2.741 E(x)-.15 E .262(lock will be used to ensure that only one t\
hread at a time can access the stream. Note that this \215ag)144 657.6 R
.689(can only be set at stream opening time \(see sfopen\(\), sfpopen\(\
\) and sfne)144 669.6 R 3.19(w\(\)\). Certain)-.25 F -.1(fa)3.19 G .69
(st macro).1 F .558
(functions such as sfgetc\(\) and sfputc\(\) will no longer beha)144
681.6 R .858 -.15(ve a)-.2 H 3.058(sm).15 G .558
(acros. Thus, an application that)-3.058 F 1.176(requires such f)144
693.6 R 1.176(ast macro functions should lea)-.1 F 1.477 -.15(ve S)-.2 H
1.177(F_MTSAFE of).15 F 3.677(fa)-.25 G 1.177(nd performs e)-3.677 F
1.177(xplicit locking)-.15 F(with sfmute)144 705.6 Q(x\(\).)-.15 E
(01 August 2001)274.055 768 Q(6)197.055 E EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(OPENING/CLOSING STREAMS)87 84 Q
(S\214o_t* sfnew\(S\214o_t* f)92 96 Q 2.5(,V)-.15 G(oid_t* b)-3.5 E(uf)
-.2 E 2.5(,s)-.15 G(ize_t size, int fd, int \215ags\))-2.5 E F0
(This function creates or rene)108 108 Q(ws a stream.)-.25 E
(It returns the ne)5 E 2.5(ws)-.25 G(tream on success and NULL on error)
-2.5 E(.)-.55 E 27.39(f: If)108 124.8 R 3.015(fi)3.015 G 3.015(sN)-3.015
G .515(ULL, a ne)-3.015 F 3.015(ws)-.25 G .515(tream is created.)-3.015
F .515(Otherwise, f is reused.)5.515 F .515
(In this case, if \215ags does not ha)5.515 F -.15(ve)-.2 G(SF_EOF)144
136.8 Q 2.632(,fs)-.8 G .132
(hall be closed via sfclose\(\) before being reused.)-2.632 F .132
(During a stream rene)5.132 F -.1(wa)-.25 G .132(l, b).1 F(uf)-.2 E(fer)
-.25 E 2.632(,p)-.4 G(ool)-2.632 E .689
(and discipline stack are preserv)144 148.8 R 3.189(ed. Note)-.15 F .688
(that, e)3.189 F .688(xcept for SF_ST)-.15 F -1.11(AT)-.93 G .688
(IC streams, rene)1.11 F .688(wing a stream)-.25 F
(already closed will result in unde\214ned beha)144 160.8 Q(vior)-.2 E
(.)-.55 E -.2(bu)108 177.6 S(f, size:).2 E(These determine a b)144 189.6
Q(uf)-.2 E(fering scheme.)-.25 E(See sfsetb)5 E
(uf\(\) for more details.)-.2 E 22.39(fd: If)108 206.4 R .845
(SF_STRING is speci\214ed in \215ags, this is ignored.)3.345 F .846
(Otherwise, fd is a \214le descriptor \(e.g., from)5.846 F 1.026
(open\(2\)\) to use for ra)144 218.4 R 3.526(wd)-.15 G 1.026(ata I/O.)
-3.526 F 1.026
(Note that S\214o supports unseekable \214le descriptors opened for)
6.026 F(both read and write, e.g., sock)144 230.4 Q(ets.)-.1 E 11.83
(\215ags: This)108 247.2 R .49(is composed from SF_EOF and bit v)2.99 F
.49(alues de\214ned in the)-.25 F F1 .49(BIT FLA)2.99 F(GS)-.55 E F0
2.99(section. Note,)2.99 F .49(in par)2.99 F(-)-.2 E(ticular)144 259.2 Q
2.759(,t)-.4 G .259(hat a multi-threaded application should set the bit\
 SF_MTSAFE to protect the ne)-2.759 F 2.758(ws)-.25 G(tream)-2.758 E
(from being simultaneously accessed by multiple threads.)144 271.2 Q F1
(S\214o_t* sf)92 300 Q(open\(S\214o_t* f)-.25 E 2.5(,c)-.15 G
(onst char* string, const char* mode\))-2.5 E F0 1.237(If string is NUL\
L and f is a \214le stream that has not been operated on, sfopen\(\) ch\
anges the modes of f)108 312 R .236(according to mode.)108 324 R .235
(In this case, sfopen\(\) returns f on success and NULL on error)5.236 F
5.235(.T)-.55 G .235(his some)-5.235 F .235(what unusual)-.25 F .797(us\
age of sfopen\(\) is good for resetting certain prede\214ned modes in s\
tandard streams including)108 336 R/F2 10/Times-Italic@0 SF(te)3.298 E
(xt/binary)-.2 E F0(and)108 348 Q F2(append)2.5 E F0
(that are inherited from some parent process.)2.5 E .435
(sfopen\(\) is normally used to create a ne)108 372 R 2.935(ws)-.25 G
.435(tream or rene)-2.935 F 2.934(was)-.25 G 2.934(tream. In)-2.934 F
.434(this case, it returns the ne)2.934 F 2.934(ws)-.25 G(tream)-2.934 E
(on success and NULL on error)108 384 Q 5(.B)-.55 G(elo)-5 E 2.5(wa)-.25
G(re the meanings of the ar)-2.5 E(guments:)-.18 E 27.39(f: This)108
400.8 R(is treated as in sfne)2.5 E(w\(\).)-.25 E 7.94(string: This)108
417.6 R(is a \214le name or a string to perform I/O on.)2.5 E(See abo)5
E .3 -.15(ve f)-.15 H(or when this is NULL.).15 E 8.5(mode: This)108
434.4 R .405(is composed from the set of letters {s, r)2.905 F 2.905(,w)
-.4 G 2.905(,+)-3.555 G 2.905(,a)-2.905 G 2.905(,b)-2.905 G 2.905(,t)
-2.905 G 2.905(,x)-2.905 G 2.905(,m)-2.905 G 2.906(,u)-2.905 G 2.906
(}. When)-2.906 F .406(con\215icting options are)2.906 F
(present in the same mode string, the last one will tak)144 446.4 Q 2.5
(ee)-.1 G -.25(ff)-2.5 G(ect.).25 E 2.959(ss)144 470.4 S .459
(peci\214es opening a string stream.)-2.959 F .459
(string can be a null-terminated string or NULL.)5.459 F .458
(Specifying s)5.458 F(alone is equi)144 482.4 Q -.25(va)-.25 G
(lent to specifying sr).25 E 5(.I)-.55 G 2.5(fsi)-5 G 2.5(sn)-2.5 G
(ot speci\214ed, string de\214nes a \214le name.)-2.5 E 2.838(ra)144
506.4 S .339(nd w specify read and write modes.)-2.838 F .339
(Write mode creates and/or truncates the gi)5.339 F -.15(ve)-.25 G 2.839
<6e8c>.15 G .339(le to mak)-2.839 F(e)-.1 E(an empty \214le.)144 518.4 Q
(The + modi\214er indicates that the stream is opened for both read and\
 write.)5 E 2.5(as)144 542.4 S(peci\214es append mode, i.e., data is al)
-2.5 E -.1(wa)-.1 G(ys output at end of \214le.).1 E 2.5(ba)144 566.4 S
(nd t specify binary and te)-2.5 E(xt modes.)-.15 E 2.5(xs)144 590.4 S
(peci\214es e)-2.5 E(xclusi)-.15 E .3 -.15(ve m)-.25 H
(ode, i.e., a \214le opened for writing should not already e).15 E
(xist.)-.15 E 2.993(ms)144 614.4 S .492(peci\214es that the stream need\
s to be protected from simultaneous accesses by multiple threads.)-2.993
F(This turns on the bit \215ag SF_MTSAFE.)144 626.4 Q 3.141(us)144 650.4
S .641(peci\214es that the stream is guaranteed to be accessed by only \
one thread at a time. The bit \215ag)-3.141 F(SF_MTSAFE is left of)144
662.4 Q 2.5(f. The)-.25 F
(absence of option m is the same as the presence of option u.)2.5 E F1
(S\214o_t* sfpopen\(S\214o_t* f)92 691.2 Q 2.5(,c)-.15 G
(onst char* cmd, const char* mode\))-2.5 E F0 .592
(This function opens a stream that corresponds to the coprocess cmd.)108
703.2 R .592(The ar)5.592 F .592(gument mode should be com-)-.18 F .549
(posed from r)108 715.2 R 3.049(,w)-.4 G 3.049(,a)-3.699 G .549(nd +.)
-3.049 F .549(The ar)5.549 F .549
(gument f, if not NULL, is a stream to be rene)-.18 F .549
(wed \(see sfne)-.25 F 3.049(w\(\)\). sfpopen\(\))-.25 F(returns the ne)
108 727.2 Q 2.5(ws)-.25 G(tream or NULL on error)-2.5 E(.)-.55 E
(01 August 2001)274.055 768 Q(7)197.055 E EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R .182(The sta\
ndard input/output of cmd is connected to the application via a pipe if\
 the stream is opened for writ-)108 84 R 2.773(ing/reading. If)108 96 R
.273
(the stream is opened for both reading and writing, there will be tw)
2.773 F 2.774(od)-.1 G(if)-2.774 E .274(ferent associated \214le)-.25 F
(descriptors, one for each type of I/O \(note the ef)108 108 Q
(fect on sf)-.25 E(\214leno\(\)\).)-.25 E .247(On opening a coprocess f\
or writing \(i.e., mode contains w or +\), the signal handler for SIGPI\
PE in the par)108 132 R(-)-.2 E .73
(ent application will be set to SIG_IGN if it is SIG_DFL at that time.)
108 144 R .73(This protects the parent application)5.73 F .337(from bei\
ng accidentally killed on writing to a coprocess that closes its readin\
g end.)108 156 R .336(Applications that need)5.337 F
(to detect such write errors should use disciplines and e)108 168 Q
(xception handlers \(see sfdisc\(\)\).)-.15 E .328(The command cmd is e)
108 192 R -.15(xe)-.15 G .329(cuted by an).15 F/F1 10/Times-Italic@0 SF
(interpr)2.829 E(eter)-.37 E F0 .329(which is either /bin/sh or an e)
2.829 F -.15(xe)-.15 G .329(cutable command de\214ned).15 F 1.038
(by the en)108 204 R 1.038(vironment v)-.4 F 1.038(ariable SHELL.)-.25 F
1.037(In either case, the interpreter is in)6.038 F -.2(vo)-.4 G -.1(ke)
.2 G 3.537(dw).1 G 1.037(ith 2 ar)-3.537 F 1.037(guments, respec-)-.18 F
(ti)108 216 Q -.15(ve)-.25 G .857(ly -c and the gi).15 F -.15(ve)-.25 G
3.357(nc).15 G .858(ommand cmd. When the interpreter is /bin/sh or /bin\
/ksh, sfpopen\(\) may e)-3.357 F -.15(xe)-.15 G(cute).15 E
(the command cmd itself if there are no shell meta-characters in cmd.)
108 228 Q/F2 10/Times-Bold@0 SF(S\214o_t* sftmp\(size_t size\))92 256.8
Q F0(This function creates a stream for temporary data.)108 268.8 Q
(It returns the ne)5 E 2.5(ws)-.25 G(tream or NULL on error)-2.5 E(.)
-.55 E 3.542(As)108 292.8 S 1.042(tream created by sftmp\(\) can be com\
pletely or partially memory-resident.)-3.542 F 1.041
(If size is SF_UNBOUND,)6.041 F .35(the stream is a pure string stream.)
108 304.8 R .351(If size is zero, the stream is a pure \214le stream.)
5.35 F .351(Otherwise, the stream is)5.351 F .333
(\214rst created as a string stream b)108 316.8 R .333(ut when its b)-.2
F(uf)-.2 E .333(fer gro)-.25 F .332(ws lar)-.25 F .332
(ger than size or on an)-.18 F 2.832(ya)-.15 G .332
(ttempt to change disci-)-2.832 F .066
(plines, a temporary \214le is created.)108 328.8 R -1 -.8(Tw o)5.066 H
(en)3.366 E .066(vironment v)-.4 F .067(ariables, TMPP)-.25 F -1.11(AT)
-.92 G 2.567(Ha)1.11 G .067(nd TMPDIR, direct where tem-)-2.567 F .227
(porary \214les are created.)108 340.8 R(TMPP)5.227 E -1.11(AT)-.92 G
.226(H, if de\214ned, speci\214es a colon-separated set of directories \
to be used in a)1.11 F 1.077(round-robin f)108 352.8 R 1.077
(ashion to create \214les.)-.1 F 1.077(If TMPP)6.077 F -1.11(AT)-.92 G
3.577(Hi)1.11 G 3.577(su)-3.577 G 1.078
(nde\214ned, TMPDIR can be used to specify a single)-3.577 F
(directory to create \214les.)108 364.8 Q(If neither of TMPP)5 E -1.11
(AT)-.92 G 2.5(Ha)1.11 G(nd TMPDIR are de\214ned, /tmp is used.)-2.5 E
F2(int sfclose\(S\214o_t* f\))92 393.6 Q F0 .321
(This function closes the stream f and frees its resources.)108 405.6 R
(SF_ST)5.321 E -1.11(AT)-.93 G .32
(IC should be used if the stream space is)1.11 F .037(to be preserv)108
417.6 R 2.537(ed. If)-.15 F 2.537(fi)2.537 G 2.537(st)-2.537 G .037(he \
base of a stream stack \(see sfstack\(\)\), all streams on the stack ar\
e closed.)-2.537 F .038(If f is a)5.037 F 3.155
(sfpopen-stream, sfclose\(\) w)108 429.6 R 3.155
(aits until the associated command terminates and returns its e)-.1 F
3.155(xit status.)-.15 F(sfclose\(\) returns -1 for f)108 441.6 Q
(ailure and 0 for success.)-.1 E 1.256(SF_READ|SF_SHARE and SF_WRITE st\
reams are synchronized before closing \(see sfsync\(\)\).)108 465.6 R
1.256(If f has)6.256 F .143(disciplines, their e)108 477.6 R .143
(xception handlers will be called twice.)-.15 F .142(The \214rst e)5.143
F .142(xception handler call has the type ar)-.15 F(gu-)-.18 E .929
(ment as one of SF_CLOSING or SF_NEW \(see sfdisc\(\).\))108 489.6 R
.929(The latter)5.929 F 3.429(,S)-.4 G .929
(F_NEW is used when a stream is)-3.429 F .871(being closed via sfne)108
501.6 R .871(w\(\) so that it can be rene)-.25 F 3.371(wed. The)-.25 F
.87(second call uses type as SF_FIN)3.37 F .87(AL and is done)-.35 F .45
(after all closing operations ha)108 513.6 R .75 -.15(ve s)-.2 H .45
(ucceeded b).15 F .451(ut before the stream itself is deallocated.)-.2 F
.451(In either case, if the)5.451 F -.15(ex)108 525.6 S 1.182
(ception handler returns a ne).15 F -.05(ga)-.15 G(ti).05 E 1.482 -.15
(ve v)-.25 H 1.181(alue, sfclose\(\) will immediately return this v)-.1
F 3.681(alue. If)-.25 F 1.181(the e)3.681 F(xception)-.15 E
(handler returns a positi)108 537.6 Q .3 -.15(ve v)-.25 H
(alue, sfclose\(\) will immediately return a zero v)-.1 E(alue.)-.25 E
F2(THREAD SAFETY)87 571.2 Q F0 .444
(The libraries libs\214o.a and libstdio.a \(pro)108 583.2 R .445
(viding binary compatibility to Stdio-based code\) only support uni-)
-.15 F 1.187(threaded code.)108 595.2 R 1.187(Multi-threaded applicatio\
ns should link with libs\214o-mt.a and libstdio-mt.a.)6.187 F 1.186
(When this is)6.186 F 1.241(done, certain platforms may require additio\
nal thread libraries for linkage. F)108 607.2 R 1.242(or e)-.15 F 1.242
(xample, Linux, Irix and)-.15 F .028
(Solaris require -lpthread while HPUX requires -lcma.)108 619.2 R .028
(Aside from linkage dif)5.028 F .028(ferences, the S\214o API remains)
-.25 F(identical in all cases.)108 631.2 Q 1.064(Note that unlik)108
655.2 R 3.564(eS)-.1 G 1.065
(tdio streams which are in thread-safe mode by def)-3.564 F 3.565
(ault. S\214o)-.1 F 1.065(streams can be opened in)3.565 F .543
(either uni-threaded or multi-threaded mode.)108 667.2 R 3.043(Au)5.543
G .543(ni-threaded stream is more ef)-3.043 F .543
(\214cient than a multi-threaded)-.25 F 3.588(one. F)108 679.2 R 1.088
(or e)-.15 F 1.088(xample, functions such as sfgetc\(\) and sfputc\(\) \
remain as macro or inline functions for a uni-)-.15 F 1.737
(threaded stream while the)108 691.2 R 4.237(yw)-.15 G 1.737
(ill act as full function calls in a multi-threaded case.)-4.237 F 1.736
(The three standard)6.737 F .609
(streams sfstdin/sfstdout/sfstderr are in multi-threaded mode by def)108
703.2 R .609(ault \(ho)-.1 F(we)-.25 E -.15(ve)-.25 G 1.409 -.4(r, s).15
H .61(ee sfopen\(\) for ho).4 F 3.11(wt)-.25 G(his)-3.11 E .045
(may be changed\).)108 715.2 R .045(Other S\214o streams are normally o\
pened uni-threaded unless the \215ag SF_MTSAFE or the)5.045 F .077
(option m were speci\214ed.)108 727.2 R .077
(Stdio-based code can also mak)5.077 F 2.578(eaS)-.1 G .078
(tdio stream uni-threaded by using the option u)-2.578 F(01 August 2001)
274.055 768 Q(8)197.055 E EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R
(when opening a \214le.)108 84 Q/F1 10/Times-Bold@0 SF
(int sfmutex\(S\214o_t* f)87 117.6 Q 2.5(,i)-.15 G(nt type\))-2.5 E F0
.776(This function acquires or releases a mute)108 129.6 R 3.275(x\()
-.15 G .775(mutually e)-3.275 F(xclusi)-.15 E -.15(ve)-.25 G 3.275(\)l)
.15 G .775(ock on the stream f.)-3.275 F .775(It can be used by a)5.775
F 1.021(thread to delineate)108 141.6 R 3.521(as)6.021 G 1.021
(equence of I/O operations e)-3.521 F -.15(xe)-.15 G 1.022
(cuted together in some critical section.).15 F(sfmute)6.022 E 1.022
(x\(\) is)-.15 F .568(implicitly used by all S\214o operations on a str\
eam with the \215ag SF_MTSAFE.)108 153.6 R(sfmute)5.568 E .568
(x\(\) returns 0 on suc-)-.15 F(cess and some non-zero v)108 165.6 Q
(alue on f)-.25 E(ailure.)-.1 E .012
(Each stream has a lock count which starts at 0.)108 189.6 R .012
(When the count is positi)5.012 F -.15(ve)-.25 G 2.512(,as).15 G .012
(ingle thread holds the stream.)-2.512 F 1.363
(Only this thread can further lock or unlock the stream.)108 201.6 R
3.863(Ad)6.363 G(if)-3.863 E 1.363
(ferent thread attempting to acquire such a)-.25 F(lock)108 213.6 Q .829
(ed stream will suspend until the lock count returns to 0.)-.1 F .83
(Each successful locking operation increases)5.83 F .8(the lock count w\
hile each successful unlocking operation decreases it, thus, allo)108
225.6 R .8(wing nesting of matching)-.25 F(lock/unlock operations.)108
237.6 Q(The type ar)108 261.6 Q(gument of sfmute)-.18 E(x\(\) tak)-.15 E
(es on the belo)-.1 E 2.5(wv)-.25 G(alues:)-2.75 E(SFMTX_LOCK:)108 278.4
Q .344(Locking a stream if it is unlock)144 290.4 R .344
(ed or increasing the lock count of the stream if it is already lock)-.1
F(ed)-.1 E(by the same thread.)144 302.4 Q(SFMTX_TR)108 319.2 Q(YLOCK:)
-.65 E .234(This is the non-blocking v)144 331.2 R .234
(ersion of SFMTX_LOCK.)-.15 F .233(If the stream is already lock)5.233 F
.233(ed by a dif)-.1 F(ferent)-.25 E(thread, sfmute)144 343.2 Q
(x\(\) will immediately return with an error status.)-.15 E
(SFMTX_UNLOCK:)108 360 Q .415(Decreasing the lock count and releasing t\
he stream when the lock count reaches 0.)144 372 R .415(An attempt to)
5.415 F .782(unlock a stream without a pre)144 384 R .782
(viously successful lock may result in unde\214ned beha)-.25 F .782
(vior in certain)-.2 F 2.5(implementations. The)144 396 R
(current S\214o implementation returns an error status.)2.5 E
(SFMTX_CLRLOCK:)108 412.8 Q 1.179
(Resetting the lock count to 0 and releasing the stream.)144 424.8 R
1.18(As with SFMTX_LOCK, an attempt to)6.179 F
(clear the lock count without a pre)144 436.8 Q
(viously successful lock may result in unde\214ned beha)-.25 E(vior)-.2
E(.)-.55 E F1(INPUT/OUPUT OPERA)87 458.4 Q(TIONS)-.95 E
(int sfgetc\(S\214o_t* f\))92 470.4 Q(int sfputc\(S\214o_t* f)92 482.4 Q
2.5(,i)-.15 G(nt c\))-2.5 E F0 .713(These functions read/write a byte)
108 494.4 R .713(from/to stream f.)5.713 F .712
(sfgetc\(\) returns the byte read or -1 on error)5.712 F 5.712(.s)-.55 G
(fputc\(\))-5.712 E(returns c on success and -1 on error)108 506.4 Q(.)
-.55 E F1(ssize_t sfnputc\(S\214o_t* f)92 535.2 Q 2.5(,i)-.15 G
(nt c, size_t n\))-2.5 E F0 .322
(This function attempts to write the byte c to f n times.)108 547.2 R
.323(It returns the number of bytes actually written or -1)5.322 F(on f)
108 559.2 Q(ailure.)-.1 E F1(int sfungetc\(S\214o_t* f)92 588 Q 2.5(,i)
-.15 G(nt c\))-2.5 E F0 .007
(This function pushes the byte c back into f.)108 600 R .006
(If c matches the byte immediately before the current position in)5.006
F -.2(bu)108 612 S -.25(ff).2 G .315
(ered data, the current position is simply back).25 F .316
(ed up \(note the ef)-.1 F .316
(fect on sftell\(\) and sfseek\(\)\). There is no)-.25 F .488(theoretic\
al limit on the number of bytes that can be pushed back into a stream. \
Pushed back bytes not part)108 624 R .043(of b)108 636 R(uf)-.2 E .043
(fered data will be discarded on an)-.25 F 2.543(yo)-.15 G .043
(peration that implies b)-2.543 F(uf)-.2 E .044(fer synchronization.)
-.25 F .044(sfungetc\(\) returns c)5.044 F(on success and -1 on f)108
648 Q(ailure.)-.1 E F1(Sfulong_t sfgetm\(S\214o_t* f)92 676.8 Q 2.5(,S)
-.15 G(fulong_t max\))-2.5 E(int sfputm\(S\214o_t* f)92 688.8 Q 2.5(,S)
-.15 G(fulong_t v)-2.5 E 2.5(,S)-.55 G(fulong_t max\))-2.5 E F0 .748
(These functions read and write Sfulong_t v)108 700.8 R .748
(alues encoded in a portable format gi)-.25 F -.15(ve)-.25 G 3.247(nt)
.15 G .747(hat the v)-3.247 F .747(alues are at)-.25 F .116(most max.)
108 712.8 R .117(Portability across a write architecture and a read arc\
hitecture requires that the bit order in a byte)5.116 F .454
(is the same on both architectures and the written v)108 724.8 R .453
(alue is storable in an Sfulong_t on the read architecture.)-.25 F
(01 August 2001)274.055 768 Q(9)197.055 E EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R
(sfgetm\(\) returns the v)108 84 Q(alue read or -1 on error)-.25 E 5(.s)
-.55 G(fputm\(\) returns the number of bytes written or -1 on error)-5 E
(.)-.55 E/F1 10/Times-Bold@0 SF(Sfulong_t sfgetu\(S\214o_t* f\))92 112.8
Q(int sfputu\(S\214o_t* f)92 124.8 Q 2.5(,S)-.15 G(fulong_t v\))-2.5 E
F0 .646(These functions read and write Sfulong_t v)108 136.8 R .646
(alues in a compact v)-.25 F .646(ariable-length portable format.)-.25 F
(Portability)5.647 E .689(across a write architecture and a read archit\
ecture requires that the bit order in a byte is the same on both)108
148.8 R .424(architectures and the written v)108 160.8 R .424
(alue is storable in an Sfulong_t on the read architecture.)-.25 F .425
(sfgetu\(\) returns the)5.425 F -.25(va)108 172.8 S
(lue read or -1 on error).25 E 5(.s)-.55 G
(fputu\(\) returns the number of bytes written or -1 on error)-5 E 5(.S)
-.55 G(ee also sfulen\(\).)-5 E F1(S\215ong_t sfgetl\(S\214o_t* f\))92
201.6 Q(int sfputl\(S\214o_t* f)92 213.6 Q 2.5(,S)-.15 G(\215ong_t v\))
-2.5 E F0 1.094
(These functions are similar to sfgetu\(\) and sfputu\(\) b)108 225.6 R
1.093(ut for reading and writing \(signed\) S\215ong_t v)-.2 F(alues.)
-.25 E(See also s\215len\(\).)108 237.6 Q F1
(Sfdouble_t sfgetd\(S\214o_t* f\))92 266.4 Q(int sfputd\(S\214o_t* f)92
278.4 Q 2.5(,S)-.15 G(fdouble_t v\))-2.5 E F0 .3
(These functions read and write Sfdouble_t v)108 290.4 R 2.8(alues. In)
-.25 F .3(this case, portability depends on the input and output)2.8 F
1.713(architectures ha)108 302.4 R 1.713
(ving the same \215oating point v)-.2 F 1.712(alue representation.)-.25
F -1.11(Va)6.712 G 1.712(lues are coded and decoded using)1.11 F(lde)108
314.4 Q(xp\(3\) and fre)-.15 E(xp\(3\) so the)-.15 E 2.5(ya)-.15 G
(re constrained to the sizes supported by these functions.)-2.5 E
(See also sfdlen\(\).)5 E F1(char* sfgetr\(S\214o_t* f)92 343.2 Q 2.5
(,i)-.15 G(nt rsc, int type\))-2.5 E F0 .411(This function reads a reco\
rd of data ending in the record separator rsc.)108 355.2 R .411
(After sfgetr\(\) returns, the length of)5.411 F .115(the record e)108
367.2 R -.15(ve)-.25 G 2.615(ni).15 G 2.615(fi)-2.615 G 2.615(ti)-2.615
G 2.615(si)-2.615 G .115(ncomplete can be retrie)-2.615 F -.15(ve)-.25 G
2.614(dw).15 G .114(ith sfv)-2.614 F 2.614(alue\(\). sfgetr\(\))-.25 F
.114(returns the record on success and)2.614 F(NULL on error)108 379.2 Q
(.)-.55 E(The type ar)108 403.2 Q
(gument is composed of some subset of the belo)-.18 E 2.5(wb)-.25 G
(it \215ags:)-2.5 E(SF_STRING:)108 420 Q 3.517(An)144 432 S 1.017
(ull byte will replace the record separator to mak)-3.517 F 3.517(et)-.1
G 1.017(he record into a C string.)-3.517 F 1.018(Otherwise, the)6.017 F
(record separator is left alone.)144 444 Q(SF_LOCKR:)108 460.8 Q 1.157
(Upon successfully obtaining a record r)144 472.8 R 3.657(,t)-.4 G 1.157
(he stream will be lock)-3.657 F 1.157
(ed from further access until it is)-.1 F
(released with a call sfread\(f,r)144 484.8 Q(,0\).)-.4 E(SF_LASTR:)108
501.6 Q .567(This should be used only after a f)144 513.6 R .567
(ailed sfgetr\(\) to retrie)-.1 F .867 -.15(ve t)-.25 H .567
(he last incomplete record. In this case,).15 F(rsc is ignored.)144
525.6 Q F1(ssize_t sfputr\(S\214o_t* f)92 554.4 Q 2.5(,c)-.15 G
(onst char* s, int rsc\))-2.5 E F0 1.052
(This function writes the null-terminated string s to f.)108 566.4 R
1.051(If rsc is non-ne)6.051 F -.05(ga)-.15 G(ti).05 E -.15(ve)-.25 G
3.551(,\().15 G 1.051(unsigned char\)rsc is output)-3.551 F
(after the string.)108 578.4 Q
(sfputr\(\) returns the number of bytes written or -1 on f)5 E(ailure.)
-.1 E F1(Sf)92 607.2 Q(off_t sfmo)-.25 E -.1(ve)-.1 G(\(S\214o_t* fr).1
E 2.5(,S)-.92 G(\214o_t* fw)-2.5 E 2.5(,S)-.55 G -.25(fo)-2.5 G
(ff_t n, int rsc\)).25 E F0 1.491(This function mo)108 619.2 R -.15(ve)
-.15 G 3.991(so).15 G 1.491
(bjects from input stream fr to output stream fw)-3.991 F 6.491(.s)-.65
G(fmo)-6.491 E -.15(ve)-.15 G 1.492(\(\) returns the number of).15 F
(objects mo)108 631.2 Q -.15(ve)-.15 G 2.5(do).15 G 2.5(r-)-2.5 G 2.5
(1o)-2.5 G 2.5(nf)-2.5 G(ailure.)-2.6 E .288
(An object is either a byte or a record.)108 655.2 R .287
(The latter is indicated by a non-ne)5.288 F -.05(ga)-.15 G(ti).05 E
.587 -.15(ve v)-.25 H .287(alue for the record separa-)-.1 F .51
(tor character rsc.)108 667.2 R .51(If n is ne)5.51 F -.05(ga)-.15 G(ti)
.05 E -.15(ve)-.25 G 3.01(,a).15 G .51(ll of fr will be mo)-3.01 F -.15
(ve)-.15 G 3.011(d. Otherwise,).15 F 3.011(ni)3.011 G .511
(ndicates the number of objects to)-3.011 F(mo)108 679.2 Q -.15(ve)-.15
G 5.812(.I).15 G 3.312(fe)-5.812 G .811(ither fr or fw is NULL, it acts\
 as if it is a stream corresponding to /de)-3.312 F .811
(v/null, the UNIX de)-.25 F(vice)-.25 E 9.243
(that has no read data and thro)108 691.2 R 9.244(ws a)-.25 F -.1(wa)
-.15 G 11.744(ya).1 G 9.544 -.15(ny w)-11.744 H 9.244(rite data.).15 F
-.15(Fo)14.244 G 11.744(re).15 G 9.244(xample, the call)-11.894 F(sfmo)
108 703.2 Q -.15(ve)-.15 G(\(f,\(S\214o_t*\)0,\(Sfof).15 E(f_t\)\(-1\),)
-.25 E('\\n'\) simply counts the number of lines in stream f.)-.7 E
(01 August 2001)274.055 768 Q(10)192.055 E EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(ssize_t sfr)92 84 Q(ead\(S\214o_t* f)-.18 E 2.5(,V)-.15
G(oid_t* b)-3.5 E(uf)-.2 E 2.5(,s)-.15 G(ize_t n\))-2.5 E F0 .54
(This function reads up to n bytes from f into b)108 96 R(uf)-.2 E .54
(fer b)-.25 F 3.04(uf. It)-.2 F .54
(returns the number of bytes actually read or -1)3.04 F(on error)108 108
Q(.)-.55 E F1(ssize_t sfwrite\(S\214o_t* f)92 136.8 Q 2.5(,c)-.15 G
(onst V)-2.5 E(oid_t* b)-1 E(uf)-.2 E 2.5(,s)-.15 G(ize_t n\))-2.5 E F0
1.449(This function writes n bytes from b)108 148.8 R 1.449(uf to f.)-.2
F 1.45(If f is SF_STRING, and the b)6.449 F(uf)-.2 E 1.45
(fer is not lar)-.25 F 1.45(ge enough, an)-.18 F(SF_WRITE e)108 160.8 Q
(xception shall be raised.)-.15 E
(sfwrite\(\) returns the number of bytes written or -1 on f)5 E(ailure.)
-.1 E F1(Sf)92 189.6 Q(off_t sfseek\(S\214o_t* f)-.25 E 2.5(,S)-.15 G
-.25(fo)-2.5 G(ff_t offset, int type\)).25 E F0(This function sets a ne)
108 201.6 Q 2.5(wI)-.25 G(/O position for f.)-2.5 E(It returns the ne)5
E 2.5(wp)-.25 G(osition or -1 on f)-2.5 E(ailure.)-.1 E .032
(If the stream is a SF_STRING stream and the ne)108 225.6 R 2.532(wa)
-.25 G .032(ddress is be)-2.532 F .031(yond the current b)-.15 F(uf)-.2
E .031(fer e)-.25 F .031(xtent, an SF_SEEK)-.15 F -.15(ex)108 237.6 S
(ception will be raised \(see sfdisc\(\)\).).15 E(The ne)108 261.6 Q 2.5
(wp)-.25 G(osition is determined based on of)-2.5 E
(fset and type which is composed from the bit \215ags:)-.25 E 2.5(0o)108
278.4 S 2.5(rS)-2.5 G(EEK_SET)-2.5 E(:)-.5 E(of)144 290.4 Q
(fset is the desired position.)-.25 E 2.5(1o)108 307.2 S 2.5(rS)-2.5 G
(EEK_CUR:)-2.5 E(of)144 319.2 Q(fset is relati)-.25 E .3 -.15(ve t)-.25
H 2.5(ot).15 G(he current position \(see SF_PUBLIC belo)-2.5 E(w\).)-.25
E 2.5(2o)108 336 S 2.5(rS)-2.5 G(EEK_END:)-2.5 E(of)144 348 Q
(fset is relati)-.25 E .3 -.15(ve t)-.25 H 2.5(ot).15 G(he ph)-2.5 E
(ysical end of \214le.)-.05 E(SF_SHARE:)108 364.8 Q .982
(The stream is treated as if it has the control bit SF_SHARE on.)144
376.8 R .983(This implies that a system call)5.982 F
(seek will be done to ensure that the location seeking to is v)144 388.8
Q(alid.)-.25 E(SF_PUBLIC:)108 405.6 Q .739
(The stream is treated as if it has the control bit SF_PUBLIC on.)144
417.6 R .738(If the ph)5.738 F .738(ysical \214le position has)-.05 F
.982(changed from its last kno)144 429.6 R .983
(wn location, the current position is tak)-.25 F .983(en as the ne)-.1 F
3.483(wp)-.25 G -.05(hy)-3.483 G .983(sical position.).05 F
(Otherwise, the current position is the logical stream position.)144
441.6 Q F1 -1(Vo)92 470.4 S(id_t* sfr)1 E(eser)-.18 E -.1(ve)-.1 G
(\(S\214o_t* f).1 E 2.5(,s)-.15 G(size_t n, int type\))-2.5 E F0 .643
(This function reserv)108 482.4 R .643
(es a data block from the stream f.)-.15 F .642
(If f is a SF_READ stream, the data block is a se)5.642 F(g-)-.15 E .944
(ment of input data and if it is a SF_WRITE stream, the data block is a\
 b)108 494.4 R(uf)-.2 E .944(fer suitable for writing output)-.25 F
3.202(data. F)108 506.4 R .702(or consistenc)-.15 F 2.002 -.65(y, i)-.15
H 3.202(ffi).65 G 3.202(so)-3.202 G .702
(pened with SF_READ|SF_WRITE, it will be treated as if it is a SF_READ)
-3.202 F .029(stream \(see sfset\(\) for forcing a particular mode.\))
108 518.4 R .029(Note that a reserv)5.029 F .03(ed data block is only v)
-.15 F .03(alid until a future)-.25 F .313
(access to the stream f. Thus, after a successful reserv)108 530.4 R
.313(ation, the application should process the reserv)-.25 F .313
(ed data)-.15 F(block before accessing the stream f ag)108 542.4 Q(ain.)
-.05 E 2.579(As)108 566.4 S(freserv)-2.579 E .079
(e\(\) call is successful if it can reserv)-.15 F 2.579(ead)-.15 G .08
(ata block of size at least the absolute v)-2.579 F .08
(alue of n when n is)-.25 F(ne)108 578.4 Q -.05(ga)-.15 G(ti).05 E .512
-.15(ve o)-.25 H 2.712(re).15 G .212(xactly n when n is non-ne)-2.862 F
-.05(ga)-.15 G(ti).05 E -.15(ve)-.25 G 5.212(.A).15 G .212
(fter a sfreserv)-5.212 F .211
(e\(\) call, whether or not it succeeds, sfv)-.15 F(alue\(f\))-.25 E
.277(can be used to obtain the size of the w)108 590.4 R(ould-ha)-.1 E
-.15(ve)-.2 G .278(-been a).15 F -.25(va)-.2 G .278(ilable data block.)
.25 F(sfreserv)5.278 E .278(e\(\) returns the reserv)-.15 F(ed)-.15 E
(data block on success and NULL on f)108 602.4 Q(ailure.)-.1 E .609
(When type <= 0 and f is in SF_READ mode, e)108 626.4 R -.15(ve)-.25 G
3.109(ni).15 G 3.109(fs)-3.109 G(freserv)-3.109 E .609(e\(\) f)-.15 F
.609(ails to obtain a lar)-.1 F .609(ge enough data block,)-.18 F .539
(the I/O position of f will be adv)108 638.4 R .539
(anced by the size of the a)-.25 F -.25(va)-.2 G .54
(ilable data block \(b).25 F .54(ut only up to n if n is posi-)-.2 F(ti)
108 650.4 Q -.15(ve)-.25 G 4.852(.\) Such).15 F 4.852(ap)4.852 G 2.352
(artial data block can be obtained using a subsequent sfreserv)-4.852 F
2.352(e\(\) call with type being)-.15 F(SF_LASTR.)108 662.4 Q
(When type > 0, there are tw)108 686.4 Q 2.5(oc)-.1 G(ases:)-2.5 E
(01 August 2001)274.055 768 Q(11)192.055 E EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R
(type == SF_LASTR:)108 84 Q 1.246(The last partially reserv)144 96 R
1.246(ed data block, if an)-.15 F 2.546 -.65(y, i)-.15 H 3.746(sr).65 G
3.747(eturned. This)-3.746 F 1.247(call should be used only after a)
3.747 F -.1(fa)144 108 S(iled sfreserv).1 E(e\(\) call.)-.15 E
(The second ar)5 E(gument to sfreserv)-.18 E(e\(\) will be ignored.)-.15
E(type == 1 or type == SF_LOCKR:)108 124.8 Q .282
(The I/O position of stream f remains unchanged after the sfreserv)144
136.8 R .282(e\(\) call.)-.15 F .282(In addition, if the reser)5.282 F
(-)-.2 E -.25(va)144 148.8 S 2.058(tion is successful, f will be lock)
.25 F 2.058(ed from further access.)-.1 F 2.058
(As appropriate to the stream type)7.058 F 2.683
(\(SF_READ, SF_WRITE or both\), f can be unlock)144 160.8 R 2.683
(ed later with one of sfread\(f,rsrv)-.1 F 2.683(,size\) or)-.65 F
(sfwrite\(f,rsrv)144 172.8 Q .586(,size\) where rsrv is the reserv)-.65
F .586(ed data block and size is the amount of data to be con-)-.15 F
1.29(sumed. F)144 184.8 R 1.29(or e)-.15 F 1.29(xample, if f is a lock)
-.15 F 1.289(ed SF_READ stream, the call sfread\(f,rsrv)-.1 F 1.289
(,0\) will reopen the)-.65 F .853(stream without adv)144 196.8 R .853
(ancing the stream I/O position. Finally)-.25 F 3.354(,as)-.65 G .854
(tream opened for both reading and)-3.354 F .213(writing can release th\
e lock with either call \(with associated operational semantics!\))144
208.8 R -.15(Fo)5.213 G 2.713(re).15 G(xample,)-2.863 E(the belo)144
220.8 Q 2.5(wc)-.25 G(ode modify data in place:)-2.5 E(rsrv = sfreserv)
154 244.8 Q(e\(f, 10, 1\);)-.15 E(memset\(rsrv)154 256.8 Q 2.5(,0)-.65 G
2.5(,1)-2.5 G(0\);)-2.5 E(sfwrite\(f, rsrv)154 268.8 Q 2.5(,1)-.65 G
(0\);)-2.5 E 1.524
(Note that when f is SF_SHARE and unseekable, sfreserv)144 292.8 R 1.525
(e\(\) will attempt to peek at input data)-.15 F .933
(without consuming it. This allo)144 304.8 R .933
(ws processes that share unseekable \214le descriptors \(e.g., pipes or)
-.25 F(de)144 316.8 Q 1.601(vices\) to properly share input data.)-.25 F
1.602(Since peeking on unseekable \214le descriptors is not uni-)6.601 F
.641(formly supported on all platforms, sfreserv)144 328.8 R .641
(e\(\) may f)-.15 F .641(ail in some cases.)-.1 F(Finally)5.64 E 3.14
(,s)-.65 G .64(ince SF_SHARE)-3.14 F .355
(is automatically on for sfstdin, applications that do not share sf)144
340.8 R .356(\214leno\(sfstdin\) with other processes)-.25 F
(should turn this bit of)144 352.8 Q 2.5(ft)-.25 G 2.5(or)-2.5 G
(educe system calls.)-2.5 E/F1 10/Times-Bold@0 SF -.35(DA)87 386.4 S 1.8
-.9(TA F)-.6 H(ORMA).9 E(TTING)-.95 E F0 .979(Data printing and scannin\
g are done via the sfprintf\(\) and sfscanf\(\) f)108 398.4 R .979
(amily of functions.)-.1 F .979(These functions)5.979 F 2.026
(are similar to their ANSI-C fprintf\(\) and fscanf\(\) counterparts.)
108 410.4 R(Ho)7.027 E(we)-.25 E -.15(ve)-.25 G 2.827 -.4(r, t).15 H
2.027(he S\214o v).4 F 2.027(ersions ha)-.15 F 2.327 -.15(ve b)-.2 H
(een).15 E -.15(ex)108 422.4 S 1.17
(tended for both portability and generality).15 F 6.17(.I)-.65 G 3.67
(np)-6.17 G(articular)-3.67 E 3.67(,an)-.4 G 1.17
(otion of a formatting en)-3.67 F 1.17(vironment stack is)-.4 F 3.027
(introduced. Each)108 434.4 R .527
(formatting element on the stack de\214nes a separate)3.027 F/F2 10
/Times-Italic@0 SF .528(formatting pair)3.027 F F0 .528
(of a format speci\214ca-)3.028 F 1.42
(tion string, char* format \(the usual second ar)108 446.4 R 1.42
(gument in the formatting functions\), and an ar)-.18 F 1.42
(gument list,)-.18 F -.25(va)108 458.4 S .343(_list ar).25 F .344
(gs \(the third ar)-.18 F .344
(gument in functions sfvprintf\(\) and sfvscanf\(\)\).)-.18 F 2.844(Af)
5.344 G .344(ormatting en)-2.844 F .344(vironment element)-.4 F .695
(may also specify e)108 470.4 R .695
(xtension functions to obtain or assign ar)-.15 F .695
(guments and to pro)-.18 F .695(vide ne)-.15 F 3.195(ws)-.25 G .695
(emantics for pat-)-3.195 F .566(tern processing.)108 482.4 R 2.166 -.8
(To s)5.566 H .566(implify the description belo).8 F 1.867 -.65(w, w)
-.25 H(hene).65 E -.15(ve)-.25 G 3.067(rw).15 G 3.067(et)-3.067 G .567
(alk about an ar)-3.067 F .567(gument list, unless noted)-.18 F .368
(otherwise, it is understood that this means either the true ar)108
494.4 R .368(gument list when there is no e)-.18 F .368
(xtension function)-.15 F .676(or the action to be tak)108 506.4 R .676
(en by such a function in processing ar)-.1 F 3.177(guments. The)-.18 F
.677(manipulation of the formatting)3.177 F(en)108 518.4 Q
(vironment stack is done via the pattern ! discussed belo)-.4 E -.65(w.)
-.25 G F1(%! and Sffmt_t)87 547.2 Q F0 .751
(The pattern %! manipulates the formatting en)108 559.2 R .751
(vironment stack to \(1\) change the top en)-.4 F .75(vironment to a ne)
-.4 F(w)-.25 E(en)108 571.2 Q .751(vironment, \(2\) stack a ne)-.4 F
3.251(we)-.25 G -.4(nv)-3.251 G .751
(ironment on top of the current top, or \(3\) pop the top en).4 F 3.252
(vironment. The)-.4 F 1.21(bottom of the en)108 583.2 R 1.21
(vironment stack al)-.4 F -.1(wa)-.1 G 1.209(ys contains a virtual en).1
F 1.209(vironment with the original formatting pair)-.4 F
(and without an)108 595.2 Q 2.5(ye)-.15 G(xtension functions.)-2.65 E
.942(The top en)108 619.2 R .942
(vironment of a stack, say fe, is automatically popped whene)-.4 F -.15
(ve)-.25 G 3.443(ri).15 G .943(ts format string is completely)-3.443 F
16.07(processed. In)108 631.2 R 13.57(this case, its e)16.07 F -.15(ve)
-.25 G 13.57(nt-handling function \(if an).15 F 13.57(y\) is called as)
-.15 F(\(*e)108 643.2 Q -.15(ve)-.25 G(ntf\)\(f,SF_FIN).15 E(AL,NIL\(V)
-.35 E 3.252(oid_t*\),fe\). The)-1.29 F .752(top en)3.252 F .753
(vironment can also be popped by gi)-.4 F .753(ving an ar)-.25 F(gument)
-.18 E .516(NULL to %!)108 655.2 R .516(or by returning a ne)5.516 F
-.05(ga)-.15 G(ti).05 E .815 -.15(ve v)-.25 H .515(alue in an e)-.1 F
.515(xtension function.)-.15 F .515(In these cases, the e)5.515 F -.15
(ve)-.25 G(nt-handling).15 E .009(function is called as \(*e)108 667.2 R
-.15(ve)-.25 G(ntf\)\(f,SF_DPOP).15 E .009
(,form,fe\) where form is the remainder of the format string. A ne)-1.11
F(g-)-.15 E(ati)108 679.2 Q .3 -.15(ve r)-.25 H(eturn v).15 E
(alue from the e)-.25 E -.15(ve)-.25 G(nt handling function will pre).15
E -.15(ve)-.25 G(nt the en).15 E(vironment from being popped.)-.4 E 2.5
(Af)108 703.2 S(ormatting en)-2.5 E(vironment is a structure of type Sf)
-.4 E(fmt_t which contains the follo)-.25 E(wing elements:)-.25 E(Sf)118
727.2 Q(fmte)-.25 E 5(xt_f e)-.15 F 5(xtf; /*)-.15 F -.15(ex)2.5 G
(tension processor).15 E(*/)20 E(01 August 2001)274.055 768 Q(12)192.055
E EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(Sf)118 84 Q
(fmte)-.25 E -.15(ve)-.25 G(nt_f e).15 E -.15(ve)-.25 G(ntf; /* e).15 E
-.15(ve)-.25 G(nt handler).15 E(*/)35 E 17.5(char* form;)118 108 R
(/* format string to stack)7.5 E(*/)12.5 E -.25(va)118 120 S 12.5
(_list ar).25 F 5(gs; /*)-.18 F(corresponding ar)2.5 E 2.5(gl)-.18 G 10
(ist */)-2.5 F 22.5(int fmt;)118 144 R(/* pattern being processed)10 E
(*/)10 E 12.5(ssize_t size;)118 156 R(/* object size)7.5 E(*/)40 E 22.5
(int \215ags;)118 168 R(/* formatting control \215ags)5 E(*/)7.5 E 22.5
(int width;)118 180 R(/* width of \214eld)5 E(*/)32.5 E 22.5
(int precis;)118 192 R(/* precision required)2.5 E(*/)22.5 E 22.5
(int base;)118 204 R(/* con)7.5 E -.15(ve)-.4 G(rsion base).15 E(*/)30 E
17.5(char* t_str;)118 228 R(/* e)5 E(xtfdata string)-.15 E(*/)30 E 22.5
(int n_str;)118 240 R(/* length of t_str)5 E(*/)30 E .235
(The \214rst four elements of Sf)108 264 R .235(fmt_t must be de\214ned\
 by the application before the structure is passed to a for)-.25 F(-)-.2
E 1.422(matting function.)108 276 R 1.423(The tw)6.422 F 3.923(of)-.1 G
1.423(unction \214elds should not be changed during processing.)-3.923 F
1.423(Other elements of)6.423 F(Sf)108 288 Q .31
(fmt_t are set by the respecti)-.25 F .61 -.15(ve f)-.25 H .31
(ormatting function before it calls the e).15 F .31
(xtension function Sf)-.15 F(fmt_t.e)-.25 E .31(xtf and,)-.15 F
(subsequently)108 300 Q 2.904(,c)-.65 G .404
(an be modi\214ed by this function to redirect formatting or scanning.)
-2.904 F -.15(Fo)5.404 G 2.904(re).15 G .404(xample, consider a)-3.054 F
1.359(call from a sfprintf\(\) function to process an unkno)108 312 R
1.358(wn pattern %t \(which we may tak)-.25 F 3.858(et)-.1 G 3.858(om)
-3.858 G 1.358(ean `)-3.858 F(`time')-.74 E('\))-.74 E .194
(based on a formatting en)108 324 R .194(vironment fe.)-.4 F(fe->e)5.195
E .195
(xtf may reset fe->fmt to `d' upon returing to cause sfprintf\(\) to)
-.15 F(process the v)108 336 Q(alue being formatted as an inte)-.25 E
(ger)-.15 E(.)-.55 E(Belo)108 360 Q 2.5(wa)-.25 G(re the \214elds of Sf)
-2.5 E(fmt_t:)-.25 E -.15(ex)108 376.8 S 15.32(tf: e).15 F
(xtf is a function to e)-.15 E(xtend scanning and formatting patterns.)
-.15 E(Its usage is discussed belo)5 E -.65(w.)-.25 G -2.15 -.25(ev e)
108 393.6 T 6.13(ntf: This).25 F(is a function to process e)2.5 E -.15
(ve)-.25 G(nts as discussed earlier).15 E(.)-.55 E(form and ar)108 410.4
Q(gs:)-.18 E 1.477(This is the formatting pair of a speci\214cation str\
ing and corresponding ar)144 422.4 R 1.476(gument list.)-.18 F 1.476
(When an)6.476 F(en)144 434.4 Q 1.951(vironment fe is being inserted in\
to the stack, if fe->form is NULL, the top en)-.4 F 1.951(vironment is)
-.4 F .697(changed to fe and its associated e)144 446.4 R .696
(xtension functions b)-.15 F .696
(ut processing of the current formatting pair)-.2 F 3.191(continues. On)
144 458.4 R .691(the other hand, if fe->form is not NULL, the ne)3.191 F
3.191(we)-.25 G -.4(nv)-3.191 G .692(ironment is pushed onto the).4 F
.925(stack so that pattern processing will start with the ne)144 470.4 R
3.424(wf)-.25 G .924(ormatting pair as well as an)-3.424 F 3.424(ya)-.15
G(ssociated)-3.424 E -.15(ex)144 482.4 S .74(tension functions.).15 F
.74(During processing, whene)5.74 F -.15(ve)-.25 G 3.24(re).15 G .741
(xtf is called, form and ar)-3.39 F .741(gs will be set to the)-.18 F
(current v)144 494.4 Q(alues of the formatting pair in use.)-.25 E 16.83
(fmt: This)108 511.2 R
(is set to the pattern being processed or one of '.)2.5 E(', 'I', '\('.)
-.7 E 15.17(size: This)108 528 R
(is the size of the object being processed.)2.5 E 11.83(\215ags: This)
108 544.8 R(is a collection of bits de\214ning the formatting \215ags s\
peci\214ed for the pattern.)2.5 E(The bits are:)5 E(SFFMT_LEFT)144 568.8
Q 2.5(:F)-.5 G(lag - in sfprintf\(\).)-2.5 E
(SFFMT_SIGN: Flag + in sfprintf\(\).)144 592.8 Q(SFFMT_BLANK: Flag)144
616.8 Q/F1 10/Times-Italic@0 SF(space)2.5 E F0(in sfprintf\(\).)2.5 E
(SFFMT_ZER)144 640.8 Q(O: Flag 0 in sfprintf\(\).)-.4 E
(SFFMT_THOUSAND: Flag ' in sfprintf\(\).)144 664.8 Q
(SFFMT_LONG: Flag l in sfprintf\(\) and sfscanf\(\).)144 688.8 Q
(SFFMT_LLONG: Flag ll in sfprintf\(\) and sfscanf\(\).)144 712.8 Q
(01 August 2001)274.055 768 Q(13)192.055 E EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(SFFMT_SHOR)
144 84 Q 1 -.5(T: F)-.6 H(lag h in sfprintf\(\) and sfscanf\(\).).5 E
(SFFMT_LDOUBLE: Flag L in sfprintf\(\) and sfscanf\(\).)144 108 Q
(SFFMT_IFLA)144 132 Q(G: \215ag I in sfprintf\(\) and sfscanf\(\).)-.4 E
(SFFMT_AL)144 156 Q(TER: Flag # in sfprintf\(\) and sfscanf\(\).)-.92 E
(SFFMT_SKIP: Flag * in sfscanf\(\).)144 180 Q
(SFFMT_ARGPOS: This indicates ar)144 204 Q(gument processing for pos$.)
-.18 E(SFFMT_V)144 228 Q .6(ALUE: This is set by fe->e)-1.35 F .6
(xtf to indicate that it is returning a v)-.15 F .6
(alue to be formatted or)-.25 F
(the address of an object to be assigned.)144 240 Q 7.94(width: This)108
268.8 R(is the \214eld width.)2.5 E 6.84(precis: This)108 285.6 R
(is the precision.)2.5 E 12.95(base: This)108 302.4 R(is the con)2.5 E
-.15(ve)-.4 G(rsion base.).15 E(t_str and n_str:)108 319.2 Q
(This is the type string and its size.)144 331.2 Q/F1 10/Times-Bold@0 SF
(int \(*Sffmtext_f\)\(S\214o_t* f)92 360 Q 2.5(,V)-.15 G(oid_t* v)-3.5 E
2.5(,S)-.55 G(ffmt_t* fe\))-2.5 E F0 1.972(This is the type of the e)108
372 R 1.973(xtension function fe->e)-.15 F 1.973
(xtf to process patterns and ar)-.15 F 4.473(guments. Ar)-.18 F 1.973
(guments are)-.18 F(al)108 384 Q -.1(wa)-.1 G .48
(ys processed in order and fe->e).1 F .48(xtf is called e)-.15 F .48
(xactly once per ar)-.15 F 2.98(gument. Note)-.18 F .48
(that, when pos$ \(belo)2.98 F(w\))-.25 E .127(is not used an)108 396 R
.128(ywhere in a format string, each ar)-.15 F .128(gument is used e)
-.18 F .128(xactly once per a corresponding pattern.)-.15 F(In)5.128 E
.33(that case, fe->e)108 408 R .33
(xtf is called as soon as the pattern is recognized and before an)-.15 F
2.829(ys)-.15 G .329(canning or formatting.)-2.829 F(On)5.329 E .153
(the other hand, when pos$ is used in a format string, an ar)108 420 R
.153(gument may be used multiple times.)-.18 F .153(In this case,)5.153
F .56(all ar)108 432 R .56
(guments shall be processed in order by calling fe->e)-.18 F .559(xtf e)
-.15 F .559(xactly once per ar)-.15 F .559(gument before an)-.18 F 3.059
(yp)-.15 G(attern)-3.059 E 2.5(processing. This)108 444 R
(case is signi\214ed by the \215ag SFFMT_ARGPOS in fe->\215ags.)2.5 E
1.318(In addition to the prede\214ned formatting patterns and other app\
lication-de\214ned patterns, fe->e)108 468 R 1.319(xtf may be)-.15 F
(called with fe->fmt being one of `\(' \(left parenthesis\), `.)108 480
Q 2.5('\()-.7 G(dot\), and `I'.)-2.5 E .714
(The left parenthesis requests a string to be used as the e)108 504 R
.713(xtfdata string discussed belo)-.15 F 4.513 -.65(w. I)-.25 H 3.213
(nt).65 G .713(his case, upon)-3.213 F .076(returning, fe->e)108 516 R
.076(xtf should set the fe->size \214eld to be the length of the string\
 or a ne)-.15 F -.05(ga)-.15 G(ti).05 E .376 -.15(ve v)-.25 H .076
(alue to indicate a)-.1 F(null-terminated string.)108 528 Q
(The `I' requests an inte)108 552 Q(ger to de\214ne the object size.)
-.15 E 1.015(The dot requests an inte)108 576 R 1.015
(ger for width, precision, base, or a separator)-.15 F 6.014(.I)-.55 G
3.514(nt)-6.014 G 1.014(his case, the fe->size \214eld will)-3.514 F
.697(indicate ho)108 588 R 3.197(wm)-.25 G(an)-3.197 E 3.197(yd)-.15 G
.697(ots ha)-3.197 F .997 -.15(ve a)-.2 H .698
(ppeared in the pattern speci\214cation. Note that, if the actual con)
.15 F -.15(ve)-.4 G .698(rsion pat-).15 F(tern is 'c' or ')108 600 Q
(s', the v)-.55 E(alue *form will be one of these characters.)-.25 E
27.39(f: This)108 616.8 R 1.11
(is the input/output stream in the calling formatting function.)3.61 F
1.11(During a call to fe->e)6.11 F 1.11(xtf, the)-.15 F
(stream shall be unlock)144 628.8 Q(ed so that fe->e)-.1 E
(xtf can read from or write to it as appropriate.)-.15 E 25.72(v: F)108
645.6 R .311(or both sfscanf\(\) and sfprintf\(\) functions, v points t\
o a location suitable for storing an)-.15 F 2.811(ys)-.15 G .311
(calars or)-2.811 F 2.5(pointers. On)144 657.6 R(return, fe->e)2.5 E
(xtf treats v as discussed belo)-.15 E -.65(w.)-.25 G 22.95(fe: This)108
674.4 R(is the current formatting en)2.5 E(vironment.)-.4 E .967
(The return v)108 691.2 R .967(alue rv of fe->e)-.25 F .967
(xtf directs further processing.)-.15 F .966(There are tw)5.966 F 3.466
(oc)-.1 G 3.466(ases. When)-3.466 F .966(pos$ is present, a)3.466 F(ne)
108 703.2 Q -.05(ga)-.15 G(ti).05 E .375 -.15(ve r)-.25 H .075(eturn v)
.15 F .075(alue means to ignore fe in further ar)-.25 F .075
(gument processing while a non-ne)-.18 F -.05(ga)-.15 G(ti).05 E .375
-.15(ve r)-.25 H .075(eturn v).15 F .075(alue is)-.25 F .68
(treated as the case rv == 0 belo)108 715.2 R 4.48 -.65(w. W)-.25 H .679
(hen pos$ is not present, fe->e).65 F .679(xtf is called per ar)-.15 F
.679(gument immediately)-.18 F
(before pattern processing and its return v)108 727.2 Q
(alues are treated as belo)-.25 E(w:)-.25 E(01 August 2001)274.055 768 Q
(14)192.055 E EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(rv < 0:)108
84 Q(The en)9.25 E(vironment stack is immediately popped.)-.4 E
(rv == 0:)108 100.8 Q .77(The e)144 112.8 R .771(xtension function has \
not consumed \(in a scanning case\) or output \(in a printing case\) da\
ta)-.15 F 1.319(out of or into the gi)144 124.8 R -.15(ve)-.25 G 3.819
(ns).15 G 1.319(tream f.)-3.819 F 1.319
(The \214elds fmt, \215ags, size, width, precis and base of fe shall)
6.319 F(direct further processing.)144 136.8 Q -.15(Fo)144 160.8 S 2.562
(rs).15 G .062
(fprintf\(\) functions, if fe->\215ags has the bit SFFMT_V)-2.562 F .062
(ALUE, fe->e)-1.35 F .062(xtf should ha)-.15 F .362 -.15(ve s)-.2 H .062
(et *v to the).15 F -.25(va)144 172.8 S .196
(lue to be processed; otherwise, a v).25 F .195
(alue should be obtained from the ar)-.25 F .195(gument list.)-.18 F
(Lik)5.195 E -.25(ew)-.1 G .195(ise, for).25 F .6
(sfscanf\(\) functions, SFFMT_V)144 184.8 R .6
(ALUE means that *v should ha)-1.35 F .9 -.15(ve a s)-.2 H .6
(uitable address; otherwise, an).15 F(address to assign v)144 196.8 Q
(alue should be obtained from the ar)-.25 E(gument list.)-.18 E .392
(When pos$ is present, if fe->e)144 220.8 R .392
(xtf changes fe->fmt, this pattern shall be used re)-.15 F -.05(ga)-.15
G .391(rdless of the pat-).05 F .618(tern de\214ned in the format strin\
g. On the other hand, if fe->fmt is unchanged by fe->e)144 232.8 R .618
(xtf, the pat-)-.15 F .367(tern in the format string is used.)144 244.8
R .367(In an)5.367 F 2.867(yc)-.15 G .367(ase, the ef)-2.867 F(fecti)
-.25 E .667 -.15(ve p)-.25 H .366
(attern should be one of the standardly).15 F(de\214ned pattern.)144
256.8 Q(Otherwise, it shall be treated as unmatched.)5 E(rv > 0:)108
273.6 Q .534(The e)9.25 F .534
(xtension function has accessed the stream f to the e)-.15 F .534
(xtent of rv bytes.)-.15 F .535(Processing of the cur)5.534 F(-)-.2 E
2.621(rent pattern ceases e)144 285.6 R 2.621(xcept that, for scanning \
functions, if fe->\215ags does not contain the bit)-.15 F(SFFMT_SKIP)144
297.6 Q 2.5(,t)-1.11 G(he assignment count shall increase by 1.)-2.5 E
/F1 10/Times-Bold@0 SF -.1(vo)87 326.4 S(id v).1 E(a_copy\(v)-.1 E
(a_list to, v)-.1 E(a_list fr\))-.1 E F0 .328
(This macro function portably copies the ar)108 338.4 R .328
(gument list fr to the ar)-.18 F .328
(gument list to. It should be used to set the)-.18 F(\214eld Sf)108
350.4 Q(fmt_t.ar)-.25 E(gs.)-.18 E F1(long sffmtv)87 379.2 Q
(ersion\(Sffmt_t* fe, int type\))-.1 E F0 1.137
(This macro function initializes the formatting en)108 391.2 R 1.137
(vironment fe with a v)-.4 F 1.136(ersion number if type is non-zero.)
-.15 F .8(Otherwise, it returns the current v)108 403.2 R .8
(alue of the v)-.25 F .801(ersion number of fe.)-.15 F .801
(This is useful for applications to \214nd)5.801 F .129
(out when the format of the structure Sf)108 415.2 R .128
(fmt_t changes.)-.25 F .128(Note that the v)5.128 F .128
(ersion number corresponds to the S\214o)-.15 F -.15(ve)108 427.2 S
(rsion number which is de\214ned in the macro v).15 E
(alue SFIO_VERSION.)-.25 E F1(int sfprintf\(S\214o_t* f)92 456 Q 2.5(,c)
-.15 G(onst char* f)-2.5 E(ormat, ...\))-.25 E
(char* sfprints\(const char* f)92 468 Q(ormat, ...\))-.25 E
(int sfsprintf\(char* s, int n, const char* f)92 480 Q(ormat, ...\))-.25
E(int sfvsprintf\(char* s, int n, const char* f)92 492 Q(ormat, v)-.25 E
(a_list ar)-.1 E(gs\))-.1 E(int sfvprintf\(S\214o_t* f)92 504 Q 2.5(,c)
-.15 G(onst char* f)-2.5 E(ormat, v)-.25 E(a_list ar)-.1 E(gs\))-.1 E F0
1.933(These functions format output data.)108 516 R 1.934
(sfprintf\(\) and sfvprintf\(\) write to output stream f.)6.933 F 1.934
(sfsprintf\(\) and)6.934 F 1.209(sfvsprintf\(\) write to b)108 528 R(uf)
-.2 E 1.209(fer s which is of size n.)-.25 F 1.208
(sfprints\(\) constructs output in some S\214o-de\214ned b)6.209 F(uf)
-.2 E(fer)-.25 E(.)-.55 E .196(sfvprintf\(\) is the underlying primiti)
108 540 R .496 -.15(ve f)-.25 H .197(or the other functions.).15 F .197
(Except for sfprints\(\) which returns a null-ter)5.197 F(-)-.2 E(minat\
ed string or NULL, other functions return the number of output bytes or\
 -1 on f)108 552 Q(ailure.)-.1 E(The length of string constructed by sf\
prints\(\), sfsprintf\(\), or sfvsprintf\(\) can be retrie)108 576 Q
-.15(ve)-.25 G 2.5(db).15 G 2.5(ys)-2.5 G(fslen\(\).)-2.5 E .709(The st\
andard patterns are: n, s, c, %, h, i, d, p, u, o, x, X, g, G, e, E, f \
and !.)108 592.8 R .709(Except for ! which shall be)5.709 F .306
(described belo)108 604.8 R 1.606 -.65(w, s)-.25 H .306(ee the ANSI-C s\
peci\214cation of fprintf\(3\) for details on the other patterns.).65 F
.307(Let z be some)5.307 F
(pattern type. A formatting pattern is de\214ned as belo)108 616.8 Q(w:)
-.25 E(%[pos$][\215ag][width][.precision[.base]][\(e)118 640.8 Q
(xtfdata\)]z)-.15 E 11.83(pos$: A)108 669.6 R .11
(pattern can specify which ar)2.61 F .11(gument in the ar)-.18 F .109
(gument list to use.)-.18 F .109(This is done via pos$ where pos)5.109 F
1.346(is the ar)144 681.6 R 1.346(gument position.)-.18 F(Ar)6.346 E
1.347(guments are numbered so that the \214rst ar)-.18 F 1.347
(gument after format is at)-.18 F .135(position 1.)144 693.6 R .135
(If pos is not speci\214ed, the ar)5.135 F .135(gument follo)-.18 F .134
(wing the most recently used one will be used.)-.25 F .911
(The pattern %! \(see belo)144 705.6 R .912
(w\) cannot be used subsequent to a usage of pos$.)-.25 F .912
(Doing so may cause)5.912 F(une)144 717.6 Q(xpected beha)-.15 E(viors.)
-.2 E(01 August 2001)274.055 768 Q(15)192.055 E EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R 15.72
(\215ag: The)108 84 R
(\215ag characters are h, hh, l, ll, L, I, j, t, z, \255, +,)2.5 E/F1 10
/Times-Italic@0 SF(space)2.5 E F0 2.5(,0)C 2.5(,'a)-2.5 G(nd #.)-2.5 E
.808(Flag I de\214nes the size or type of the object being formatted.)
144 108 R .808(There are tw)5.808 F 3.308(oc)-.1 G .808
(ases: \(1\) I by itself)-3.308 F(and \(2\) I follo)144 120 Q
(wed by either a decimal number or `*'.)-.25 E 1.008
(In the \214rst case, for inte)144 144 R 1.008
(ger and \215oating point patterns, the object type is tak)-.15 F 1.009
(en to be the lar)-.1 F(gest)-.18 E .065
(appropriate type \(i.e., one of S\215ong_t, Sfulong_t or Sfdouble_t\).)
144 156 R -.15(Fo)5.065 G 2.565(rc).15 G(on)-2.565 E -.15(ve)-.4 G .065
(rsion speci\214ers s and c,).15 F(the \215ag is ignored.)144 168 Q .306
(In the second case, a gi)144 192 R -.15(ve)-.25 G 2.807(nd).15 G .307
(ecimal v)-2.807 F .307(alue w)-.25 F .307
(ould de\214ne a size while `*' w)-.1 F .307(ould cause the size to be)
-.1 F .493(obtained from the ar)144 204 R .493(gument list.)-.18 F .493
(Then, if the con)5.493 F -.15(ve)-.4 G .492
(rsion speci\214er is s, this size de\214nes the length).15 F .1(of the\
 string or strings being formatted \(see the discussion of base belo)144
216 R 2.6(w\). F)-.25 F .1(or inte)-.15 F .1(ger and \215oating)-.15 F
.329
(point patterns, the size is used to select a type from one of the belo)
144 228 R 2.829(wl)-.25 G .329(ists as indicated by the con-)-2.829 F
-.15(ve)144 240 S(rsion speci\214er:).15 E(S\215ong_t, long, int, short)
154 264 Q(Sfulong_t, unsigned long, unsigned int, unsigned short)154 276
Q(Sfdouble_t, double, \215oat)154 288 Q .36(The selection algorithm al)
144 312 R -.1(wa)-.1 G .36(ys matches types from left to right in an).1
F 2.86(yg)-.15 G -2.15 -.25(iv e)-2.86 H 2.86(nl).25 G 2.86
(ist. Although)-2.86 F(selec-)2.86 E 2.42(tion is generally based on si\
zes in bytes, for compatibility with Microsoft-C, the size 64 is)144 324
R .48
(matched with an appropriate type with the same number of bits, if an)
144 336 R 4.281 -.65(y. I)-.15 H 2.981(ft).65 G .481(he gi)-2.981 F -.15
(ve)-.25 G 2.981(ns).15 G .481(ize does not)-2.981 F .443(match an)144
348 R 2.943(yo)-.15 G 2.942(ft)-2.943 G .442(he listed types, it shall \
match one of int, unsigned int, and double as de\214ned by the)-2.942 F
(formatting pattern.)144 360 Q(Belo)144 384 Q 3.221(wa)-.25 G .721
(re a fe)-3.221 F 3.221(we)-.25 G .722(xamples of using the I \215ag.)
-3.371 F .722(The \214rst e)5.722 F .722
(xample prints an S\215ong_t inte)-.15 F(ger)-.15 E 5.722(.T)-.55 G(his)
-5.722 E -.15(ex)144 396 S 1.244
(ample is actually not portable and only w).15 F 1.243
(orks on platforms where sizeof\(S\215ong_t\) is 8.)-.1 F(The)6.243 E
1.963(second e)144 408 R 1.963(xample sho)-.15 F 1.963(ws ho)-.25 F
4.463(wt)-.25 G 4.463(ot)-4.463 G 1.963(hat portably)-4.463 F 6.964(.T)
-.65 G 1.964(he third e)-6.964 F 1.964
(xample speci\214es printing a string of)-.15 F 1.323(length 16.)144 420
R 1.323(This length shall be used re)6.323 F -.05(ga)-.15 G 1.322
(rdless of whether or not the gi).05 F -.15(ve)-.25 G 3.822(ns).15 G
1.322(tring is shorter or)-3.822 F 1.006(longer than 16.)144 432 R 1.006
(The last e)6.006 F 1.006(xample sho)-.15 F 1.007
(ws the use of the pattern %n to assign the amount of data)-.25 F
(already output into a short inte)144 444 Q(ger n_output.)-.15 E
(sfprintf\(sfstdout,"%I8d", S\215ong_obj\);)154 468 Q
(sfprintf\(sfstdout,"%I*d", sizeof\(S\215ong_obj\), S\215ong_obj\);)154
480 Q(sfprintf\(sfstdout,"%I*s", 16, s\);)154 492 Q
(sfprintf\(sfstdout,"%d%I*n", 1001, sizeof\(short\), &n_output\);)154
504 Q .994(Flags h, l, and L are the ANSI-C con)144 528 R -.15(ve)-.4 G
.993(ntions to select the types of input objects.).15 F -.15(Fo)5.993 G
3.493(re).15 G(xample,)-3.643 E
(%hd indicates a short int while %ld indicates a long int.)144 540 Q
(Flag hh addresses the byte v)144 564 Q
(alue types, i.e., char and unsigned char)-.25 E(.)-.55 E
(Flags z, t and j address respecti)144 588 Q -.15(ve)-.25 G
(ly the types size_t, ptrdif).15 E(f_t and S\215ong_t.)-.25 E 1.593
(Flags ll and L address respecti)144 612 R -.15(ve)-.25 G 1.593
(ly the lar).15 F 1.593(gest inte)-.18 F 1.593(ger and \215oating v)-.15
F 1.593(alue types, i.e., Sfulong_t,)-.25 F(S\215ong_t, and Sfdouble_t.)
144 624 Q(Flag - left-justi\214es data within the \214eld \(otherwise, \
right-justi\214cation\).)144 648 Q(Flag + means that a signed con)144
672 Q -.15(ve)-.4 G(rsion will al).15 E -.1(wa)-.1 G(ys be).1 E
(gin with a plus or minus sign.)-.15 E(Flag)144 696 Q F1(space)3.588 E
F0 1.088(is ignored if + is speci\214ed; otherwise, it means that if th\
e \214rst character of a signed)3.588 F(con)144 708 Q -.15(ve)-.4 G
(rsion is not a sign or if the result is empty).15 E 2.5(,as)-.65 G
(pace will be prepended.)-2.5 E(01 August 2001)274.055 768 Q(16)192.055
E EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R
(Flag 0 means padding with zeros on the left.)144 84 Q .473
(Flag ' outputs thousands-separator used by the current locale.)144 108
R .473(setlocale\(3\) should ha)5.473 F .773 -.15(ve b)-.2 H .474
(een used).15 F(to set the desired locale.)144 120 Q .344
(Flag # indicates an alternati)144 144 R .644 -.15(ve f)-.25 H .344
(ormat processing.).15 F -.15(Fo)5.344 G 2.844(r%).15 G .343
(o, the \214rst digit is al)-2.844 F -.1(wa)-.1 G .343(ys a zero.).1 F
-.15(Fo)5.343 G 2.843(r%).15 G(x)-2.843 E .676
(and %X, a non-zero result will ha)144 156 R .976 -.15(ve a p)-.2 H .676
(re\214x 0x or 0X. F).15 F .677(or %e, %E, %f, %g, and %G, the result)
-.15 F(al)144 168 Q -.1(wa)-.1 G .485(ys contains a decimal point. F).1
F .485(or %g and %G, trailing zeros will not be remo)-.15 F -.15(ve)-.15
G .484(d. F).15 F .484(or %d, %i)-.15 F .188(and %u, the form is)144 180
R/F1 10/Times-Italic@0 SF(base#number)2.689 E F0(where)2.689 E F1(base)
2.689 E F0 .189(is the con)2.689 F -.15(ve)-.4 G .189(rsion base and).15
F F1(number)2.689 E F0 .189(is represented by)2.689 F 1.19
(digits for this)144 192 R F1(base)3.69 E F0 6.19(.F)C 1.19(or e)-6.34 F
1.19(xample, a base 2 con)-.15 F -.15(ve)-.4 G 1.189
(rsion with %#..2d for 10 is 2#1010 instead of).15 F
(1010 as printed with %..2d.)144 204 Q 7.94(width: This)108 220.8 R .919
(de\214nes the width of the printing \214eld. A v)3.419 F .92
(alue to be printed will be justi\214ed and padded if)-.25 F
(necessary to \214ll out the \214eld width.)144 232.8 Q 6.84
(precis: After)108 249.6 R 3.532<618c>3.532 G 1.032
(rst dot appears, an inte)-3.532 F 1.031(gral v)-.15 F 1.031
(alue de\214nes a precision.)-.25 F -.15(Fo)6.031 G 3.531<728d>.15 G
1.031(oating point v)-3.531 F 1.031(alue patterns,)-.25 F 1.708
(precision is the number of precision digits.)144 261.6 R -.15(Fo)6.709
G 4.209(r%).15 G 1.709(c, precision de\214nes the number of times to)
-4.209 F .737(repeat the character being formatted.)144 273.6 R -.15(Fo)
5.737 G 3.237(r%).15 G .737
(s, precision de\214nes the maximum number of charac-)-3.237 F
(ters to output.)144 285.6 Q 12.95(base: This)108 302.4 R
(is de\214ned after e)2.5 E(xactly tw)-.15 E 2.5(od)-.1 G(ots ha)-2.5 E
.3 -.15(ve a)-.2 H(ppeared.).15 E -.15(Fo)144 326.4 S 3.383(r%).15 G
.884(i, %d, and %u, base should be an inte)-3.383 F .884(ger v)-.15 F
.884(alue in the inclusi)-.25 F 1.184 -.15(ve r)-.25 H .884
(ange [2,64] and de\214nes a).15 F(con)144 338.4 Q -.15(ve)-.4 G .055
(rsion base.).15 F .055
(If base is not in this range, it is de\214ned to be 10.)5.055 F .054
(The digits to represent numbers)5.054 F(are:)144 350.4 Q(01234567890)
154 374.4 Q(abcdefghijklmnopqrstuvwxyz)154 386.4 Q
(ABCDEFGHIJKLMNOPQRSTUVWXYZ @_)154 398.4 Q -.15(Fo)144 422.4 S 2.579(r%)
.15 G 2.579(sa)-2.579 G .079(nd %c, base de\214nes a separator)-2.579 F
5.079(.T)-.55 G .08(hen, for %s, the input ar)-5.079 F .08
(gument is tak)-.18 F .08(en to be a NULL-)-.1 F .313(terminated array \
of strings while, for %c, this is a null-terminated array of characters\
.)144 434.4 R .313(The strings)5.313 F .603(or characters will be forma\
tted one of a time based on the usual width and precision rules.)144
446.4 R(After)5.603 E .043(each formatted string or character)144 458.4
R 2.543(,e)-.4 G .043
(xcept for the last one, the separator base is output if it is a non-)
-2.693 F(zero.)144 470.4 Q .488(There are further restrictions on the s\
yntax of %s and %c when a separator is de\214ned.)144 494.4 R(Belo)5.489
E 2.989(wa)-.25 G(re)-2.989 E(the le)144 506.4 Q
(gitimate sequences for %s and %c after the second dot:)-.15 E 30(sc)154
530.4 S 25(*s *c)154 542.4 R F1(z)154 554.4 Q F0(s)A F1(z)27.5 E F0(c)A
.304
(In the \214rst case, no separator is de\214ned so base is set to zero.)
144 578.4 R .304(In the second case, base is obtained)5.304 F .512
(from the ar)144 590.4 R .512(gument list.)-.18 F .512
(In the third case, the character)5.512 F F1(z)3.013 E F0 .513
(must be non-alphanumeric and base will)3.013 F
(be set to this character)144 602.4 Q(.)-.55 E 1.393(The belo)144 626.4
R 3.893(we)-.25 G 1.393(xample sho)-4.043 F 1.393
(ws both the call and the result of printing a NULL-terminated array of)
-.25 F(three strings apple, orange, and grape:)144 638.4 Q
(sfprintf\(sfstdout,"|%8..:s|",list\);)154 662.4 Q 7.5(|a)154 674.4 S
2.5(pple: orange:)-7.5 F(grape|)7.5 E(01 August 2001)274.055 768 Q(17)
192.055 E EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(\(e)108 84 Q
(xtfdata\):)-.15 E .075(This de\214nes a string e)144 96 R .076
(xtfdata to be passed to the e)-.15 F .076(xtension function Sf)-.15 F
(fmt_t.e)-.25 E 2.576(xtf. P)-.15 F .076(arentheses shall)-.15 F
(be balanced.)144 108 Q(If e)5 E
(xtfdata is *, the string is obtained from the ar)-.15 E(gument list.)
-.18 E/F1 10/Times-Bold@0 SF(int sfscanf\(S\214o_t* f)92 141.6 Q 2.5(,c)
-.15 G(onst char* f)-2.5 E(ormat, ...\))-.25 E
(int sfsscanf\(const char* s, const char* f)92 153.6 Q(ormat, ...\))-.25
E(int sfvsscanf\(const char* s, const char* f)92 165.6 Q(ormat, v)-.25 E
(a_list ar)-.1 E(gs\))-.1 E(int sfvscanf\(S\214o_t* f)92 177.6 Q 2.5(,c)
-.15 G(onst char* f)-2.5 E(ormat, v)-.25 E(a_list ar)-.1 E(gs\))-.1 E F0
.937(These functions scan data items.)108 189.6 R .937(sfscanf\(\) scan\
s from the input stream f while sfsscanf\(\) and sfvsscanf\(\))5.937 F
.331(scan from the null-terminated string s.)108 201.6 R .331
(sfvscanf\(\) is the underlying primiti)5.331 F .632 -.15(ve t)-.25 H
.332(hat performs the actual scan-).15 F 2.595(ning. Item)108 213.6 R
.095(types are determined from patterns in string format.)2.595 F .094
(These functions return the number of items)5.094 F
(successfully scanned or -1 on error)108 225.6 Q(.)-.55 E 2.89(Aw)108
242.4 S .39(hite space character \(blank, tab, or ne)-2.89 F .39
(w-line\) in format normally matches a maximal sequence of input)-.25 F
.006(white space characters.)108 254.4 R(Ho)5.006 E(we)-.25 E -.15(ve)
-.25 G .806 -.4(r, i).15 H 2.506(ft).4 G .006
(he input stream is in SF_LINE mode \(see sfset\(\)\), a ne)-2.506 F
.005(w-line character)-.25 F .633
(only matches white spaces up to an input ne)108 266.4 R .634
(w-line character)-.25 F 5.634(.T)-.55 G .634(his is useful to a)-5.634
F -.2(vo)-.2 G .634(id blocking when scan-).2 F(ning typed inputs.)108
278.4 Q .353(The standard scan patterns are: i, d, u, o, x, X, p, n, f,\
 e, E, g, G, c, %, s, [] and !.)108 295.2 R .352
(Except for ! which shall)5.352 F .535(be described belo)108 307.2 R
1.836 -.65(w, s)-.25 H .536(ee the ANSI-C speci\214cation of fscanf\(3\
\) for details on other patterns.).65 F .536(Let z be some)5.536 F
(pattern type. A formatting pattern is speci\214ed as belo)108 319.2 Q
(w:)-.25 E(%[*][pos$][width][.width.base][\(e)118 343.2 Q
(xtfdata\)][\215ag]z)-.15 E 11.83(pos$: A)108 372 R .11
(pattern can specify which ar)2.61 F .11(gument in the ar)-.18 F .109
(gument list to use.)-.18 F .109(This is done via pos$ where pos)5.109 F
1.346(is the ar)144 384 R 1.346(gument position.)-.18 F(Ar)6.346 E 1.347
(guments are numbered so that the \214rst ar)-.18 F 1.347
(gument after format is at)-.18 F .135(position 1.)144 396 R .135
(If pos is not speci\214ed, the ar)5.135 F .135(gument follo)-.18 F .134
(wing the most recently used one will be used.)-.25 F
(The pattern %! \(see belo)144 408 Q
(w\) cannot be used subsequent to a usage of pos$.)-.25 E 25.72(*: This)
108 424.8 R(discards the corresponding scanned item.)2.5 E
(width and base:)108 441.6 Q .233(width de\214nes the maximum number of\
 bytes to scan and base de\214nes the base of an inte)144 453.6 R .233
(gral v)-.15 F(alue)-.25 E .854(being scanned.)144 465.6 R .854(The `.)
5.854 F 3.354('\()-.7 G .854(dot\) notation also allo)-3.354 F .854
(ws specifying a `*' \(star\) to obtain the v)-.25 F .853(alue from)-.25
F .63(the ar)144 477.6 R .63(gument list. The belo)-.18 F 3.13(we)-.25 G
.631(xample speci\214es scanning 4 bytes to obtain the v)-3.28 F .631
(alue of an inte)-.25 F(ger)-.15 E
(in base 10. At the end of scanning, the v)144 489.6 Q
(ariable v should ha)-.25 E .3 -.15(ve t)-.2 H(he v).15 E(alue 1234.)
-.25 E(sfsscanf\("12345678","%.*.*d", 4, 10, &v\);)154 513.6 Q(\(e)108
542.4 Q(xtfdata\):)-.15 E .076(This de\214nes a string e)144 554.4 R
.076(xtfdata to be passed to the e)-.15 F .075(xtension function Sf)-.15
F(fmt_t.e)-.25 E 2.575(xtf. P)-.15 F .075(arentheses shall)-.15 F
(be balanced.)144 566.4 Q(If e)5 E
(xtfdata is *, the string is obtained from the ar)-.15 E(gument list.)
-.18 E 15.72(\215ag: This)108 583.2 R
(is #, I, or some sequence of h, l, and L.)2.5 E .701
(Flag # is signi\214cant for pattern %i and %[.)144 607.2 R -.15(Fo)
5.701 G 3.201(r%).15 G .701(i, it means that the # symbol does not ha)
-3.201 F 1.001 -.15(ve i)-.2 H(ts).15 E .292
(usual meaning in an input sequence base#v)144 619.2 R 2.792(alue. F)
-.25 F .292(or e)-.15 F .292
(xample, the scanning result of %#i on input)-.15 F 1.483
(2#1001 is 2 and the ne)144 631.2 R 1.483
(xt sfgetc\(\) call will return #.)-.15 F -.15(Fo)6.483 G 3.983(r%).15 G
1.483([, if the ne)-3.983 F 1.484(xt character in the input)-.15 F .254
(stream does not match the gi)144 643.2 R -.15(ve)-.25 G 2.753(ns).15 G
.253
(can set of characters, # causes a match to a null string instead of)
-2.753 F 2.5(af)144 655.2 S(ailure.)-2.6 E .808
(Flag I de\214nes the size or type of the object being formatted.)144
679.2 R .808(There are tw)5.808 F 3.308(oc)-.1 G .808
(ases: \(1\) I by itself)-3.308 F(and \(2\) I follo)144 691.2 Q
(wed by either a decimal number or `*'.)-.25 E 1.009
(In the \214rst case, for inte)144 715.2 R 1.008
(ger and \215oating point patterns, the object type is tak)-.15 F 1.008
(en to be the lar)-.1 F(gest)-.18 E .818
(appropriate type \(i.e., one of S\215ong_t, Sfulong_t or Sfdouble_t\).)
144 727.2 R -.15(Fo)5.819 G 3.319(rs).15 G .819
(tring patterns such as %s,)-3.319 F(01 August 2001)274.055 768 Q(18)
192.055 E EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R
(the \215ag is ignored.)144 84 Q .307(In the second case, a gi)144 108 R
-.15(ve)-.25 G 2.807(nd).15 G .307(ecimal v)-2.807 F .307(alue w)-.25 F
.307(ould de\214ne a size while `*' w)-.1 F .306
(ould cause the size to be)-.1 F .44(obtained from the ar)144 120 R .44
(gument list.)-.18 F -.15(Fo)5.44 G 2.94(rs).15 G .44
(tring patterns such as %s or %[, this size de\214nes the length)-2.94 F
.362(of the b)144 132 R(uf)-.2 E .361(fer to store scanned data.)-.25 F
.361(Specifying a b)5.361 F(uf)-.2 E .361
(fer size only limits the amount of data copied)-.25 F .845(into the b)
144 144 R(uf)-.2 E(fer)-.25 E 5.845(.S)-.55 G .845(canned data be)-5.845
F .845(yond the b)-.15 F(uf)-.2 E .845(fer limit will be discarded.)-.25
F -.15(Fo)5.846 G 3.346(ri).15 G(nte)-3.346 E .846(ger and \215oating)
-.15 F .329
(point patterns, the size is used to select a type from one of the belo)
144 156 R 2.829(wl)-.25 G .329(ists as indicated by the con-)-2.829 F
-.15(ve)144 168 S(rsion speci\214er:).15 E(S\215ong_t, long, int, short)
154 192 Q(Sfulong_t, unsigned long, unsigned int, unsigned short)154 204
Q(Sfdouble_t, double, \215oat)154 216 Q .36(The selection algorithm al)
144 240 R -.1(wa)-.1 G .36(ys matches types from left to right in an).1
F 2.86(yg)-.15 G -2.15 -.25(iv e)-2.86 H 2.86(nl).25 G 2.86
(ist. Although)-2.86 F(selec-)2.86 E 2.42(tion is generally based on si\
zes in bytes, for compatibility with Microsoft-C, the size 64 is)144 252
R .48
(matched with an appropriate type with the same number of bits, if an)
144 264 R 4.281 -.65(y. I)-.15 H 2.981(ft).65 G .481(he gi)-2.981 F -.15
(ve)-.25 G 2.981(ns).15 G .481(ize does not)-2.981 F .063(match an)144
276 R 2.563(yo)-.15 G 2.562(ft)-2.563 G .062(he listed types, it shall \
match one of int, unsigned int, and double as indicated by the)-2.562 F
(formatting pattern.)144 288 Q(Belo)144 312 Q 2.522(wa)-.25 G .022(re e)
-2.522 F .022(xamples of using the I \215ag.)-.15 F .022(The \214rst e)
5.022 F .023(xample scans a 64-bit inte)-.15 F(ger)-.15 E 5.023(.T)-.55
G .023(he second scans)-5.023 F .633(some \215oating point v)144 324 R
.633(alue whose size is e)-.25 F .633(xplicitly computed and gi)-.15 F
-.15(ve)-.25 G 3.132(n. The).15 F .632(last e)3.132 F .632
(xample scans a)-.15 F .099(string into a b)144 336 R(uf)-.2 E .099
(fer with the gi)-.25 F -.15(ve)-.25 G 2.599(ns).15 G .099(ize 128.)
-2.599 F .1(Note that if the scanned string is longer than 127, only)
5.099 F(the \214rst 127 bytes shall be copied into the b)144 348 Q(uf)
-.2 E(fer)-.25 E 2.5(.T)-.55 G
(he rest of the scanned data shall be discarded.)-2.5 E
(sfscanf\(sfstdin,"%I64d", &int64_obj\);)156.5 372 Q
(sfscanf\(sfstdin,"%I*f", sizeof\(\215oat_obj\), &\215oat_obj\);)156.5
384 Q(sfscanf\(sfstdin,"%I*s", 128, b)156.5 396 Q(uf)-.2 E(fer\);)-.25 E
.97(Flags h, l, and L are the ANSI-C con)144 420 R -.15(ve)-.4 G .969
(ntions for indicating the type of a scanned element.).15 F -.15(Fo)
5.969 G(r).15 E -.15(ex)144 432 S .43
(ample, %hd means scanning a short int.).15 F .431
(The \215ags ll and L mean respecti)5.431 F -.15(ve)-.25 G .431
(ly scanning an inte-).15 F(ger or a \215oating point v)144 444 Q
(alue with lar)-.25 E(gest size \(i.e, S\215ong_t or Sfdouble_t\).)-.18
E .394(The %i, %d and %u patterns scan numbers in bases from 2 to 64.)
108 460.8 R .393(%i scans inte)5.393 F .393(gral v)-.15 F .393
(alues in self-describ-)-.25 F .648(ing formats.)108 472.8 R .648
(Except for octal, decimal and he)5.648 F .648
(xadecimal numbers with the usual formats, numbers in gen-)-.15 F .02
(eral bases are assumed to be of the form:)108 484.8 R/F1 10
/Times-Italic@0 SF(base#value)2.52 E F0(where)2.52 E F1(base)2.52 E F0
.019(is a number in base 10 and)2.52 F F1(value)2.519 E F0 .019
(is a num-)2.519 F .568(ber in the gi)108 496.8 R -.15(ve)-.25 G 3.068
(nb).15 G 3.068(ase. F)-3.068 F .568(or e)-.15 F .568
(xample, 2#1001 is the binary representation of the decimal v)-.15 F
.569(alue 9.)-.25 F(If)5.569 E F1(base)3.069 E F0(is)3.069 E .864
(36 or less, the digits for)108 508.8 R F1(value)3.364 E F0 .864
(can be an)3.364 F 3.364(yc)-.15 G .863
(ombination of [0-9], [a-z], [A-Z] where upper and lo)-3.364 F .863
(wer case)-.25 F(digits are not distinguishable.)108 520.8 Q(If)5 E F1
(base)2.5 E F0(is lar)2.5 E(ger than 36, the set of digits is:)-.18 E
(0123456789)118 544.8 Q(abcdefghijklmnopqrstuvwxyz)118 556.8 Q
(ABCDEFGHIJKLMNOPQRSTUVWXYZ @_)118 568.8 Q/F2 10/Times-Bold@0 SF -.1(BU)
87 602.4 S(FFERING, SYNCHR).1 E(ONIZA)-.3 E(TION)-.95 E -1(Vo)92 614.4 S
(id_t* sfsetb)1 E(uf\(S\214o_t* f)-.2 E 2.5(,V)-.15 G(oid_t* b)-3.5 E
(uf)-.2 E 2.5(,s)-.15 G(ize_t size\))-2.5 E F0 .529
(This function changed the b)108 626.4 R(uf)-.2 E .529
(fering scheme for f.)-.25 F .529(Except for b)5.529 F(uf)-.2 E .53
(fer inquiry \(the case size == 0\), f will be)-.25 F .538
(synchronized before an)108 638.4 R 3.037(yb)-.15 G(uf)-3.237 E .537
(fer modi\214cation.)-.25 F .537(If a ne)5.537 F 3.037(wb)-.25 G(uf)
-3.237 E .537(fer is successfully set and the old b)-.25 F(uf)-.2 E .537
(fer has not)-.25 F(been freed, sfsetb)108 650.4 Q
(uf\(\) returns the old b)-.2 E(uf)-.2 E(fer)-.25 E 2.5(.O)-.55 G
(therwise, it returns NULL.)-2.5 E(After a sfsetb)108 674.4 Q
(uf\(\) call, sfv)-.2 E(alue\(\) returns the size of the returned b)-.25
E(uf)-.2 E(fer)-.25 E(.)-.55 E(size == SF_UNBOUND:)108 691.2 Q 1.857
(S\214o will pick a suitable b)144 703.2 R(uf)-.2 E 1.857(fer size.)-.25
F 1.858(If b)6.858 F 1.858
(uf is NULL, S\214o will also pick a suitable b)-.2 F(uf)-.2 E(fering)
-.25 E .455(scheme \(such as memory mapping.\))144 715.2 R .454(If b)
5.454 F .454(uf is not NULL, its actual v)-.2 F .454(alue is ignored b)
-.25 F .454(ut the b)-.2 F(uf)-.2 E(fer)-.25 E
(will be allocated via malloc\(3\).)144 727.2 Q(This can be used to a)5
E -.2(vo)-.2 G(id memory mapping.).2 E(01 August 2001)274.055 768 Q(19)
192.055 E EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(size > 0:)108
84 Q .201(This is the suggested size to use for b)144 96 R(uf)-.2 E .202
(fering or memory mapping.)-.25 F .202(If b)5.202 F .202
(uf is NULL, S\214o will pick)-.2 F 2.665(as)144 108 S .165(uitable b)
-2.665 F(uf)-.2 E .164(fering scheme as discussed abo)-.25 F -.15(ve)
-.15 G 5.164(.I).15 G 2.664(fb)-5.164 G .164(uf is not NULL, then b)
-2.864 F .164(uf and size determine a)-.2 F -.2(bu)144 120 S -.25(ff).2
G(er of the gi).25 E -.15(ve)-.25 G 2.5(ns).15 G(ize.)-2.5 E(size == 0:)
108 136.8 Q .696(If b)144 148.8 R .696
(uf is NULL, the stream will be unb)-.2 F(uf)-.2 E 3.196(fered. If)-.25
F -.2(bu)3.197 G 3.197(fi).2 G 3.197(sn)-3.197 G .697(ot NULL, sfsetb)
-3.197 F .697(uf\(\) simply returns the)-.2 F(stream b)144 160.8 Q(uf)
-.2 E(fer)-.25 E 5(.I)-.55 G 2.5(nt)-5 G
(his case, no attempt will be made to synchronize the stream.)-2.5 E/F1
10/Times-Bold@0 SF(int sfsync\(S\214o_t* f\))92 189.6 Q F0 .115
(This function synchronizes the logical and ph)108 201.6 R .115
(ysical vie)-.05 F .115(ws of stream f.)-.25 F .114(It returns a ne)
5.115 F -.05(ga)-.15 G(ti).05 E .414 -.15(ve v)-.25 H .114(alue for f)
-.1 F(ailure)-.1 E(and 0 for success.)108 213.6 Q -.15(Fo)108 237.6 S
2.734(raS).15 G .235
(F_WRITE stream, synchronization means to write out an)-2.734 F 2.735
(yb)-.15 G(uf)-2.935 E .235(fered data.)-.25 F -.15(Fo)5.235 G 2.735
(ras).15 G .235(eekable SF_READ)-2.735 F .807(\214le stream, the ph)108
249.6 R .806(ysical \214le position is aligned with the logical stream \
position and, if SF_SHARE is on,)-.05 F -.2(bu)108 261.6 S -.25(ff).2 G
.92(ered data is discarded.).25 F .92
(If f is NULL, all streams are synchronized.)5.92 F .92
(If f is the base of a stream stack)5.92 F .488
(\(see sfstack\(\)\), all stack)108 273.6 R .488
(ed streams are synchronized.)-.1 F .488(Note that a stack)5.488 F .488
(ed stream can only be synchronized)-.1 F(this w)108 285.6 Q(ay)-.1 E 5
(.I)-.65 G 2.5(ffi)-5 G 2.5(si)-2.5 G 2.5(nap)-2.5 G
(ool \(see sfpool\(\)\) b)-2.5 E
(ut not being the head, the pool head is synchronized.)-.2 E .189
(If f has \215ag SF_IOCHECK, the SF_SYNC e)108 309.6 R -.15(ve)-.25 G
.19(nt is raised before and after synchronization. See sfdisc\(\) for)
.15 F(details.)108 321.6 Q F1
(int sfpoll\(S\214o_t** \215ist, int n, int timeout\))92 350.4 Q F0 .963
(This function polls a set of streams to see if I/O operations can be p\
erformed on them without blocking.)108 362.4 R .081
(This is useful for multiple)108 374.4 R .081(xing I/O o)-.15 F -.15(ve)
-.15 G 2.581(ras).15 G .082(et of streams.)-2.581 F .082
(If a stream has a discipline, the e)5.082 F .082(xception function)-.15
F .133(may be called before and after the stream is polled \(see sfdisc\
\(\) for details\).)108 386.4 R .133
(After a successful sfpoll\(\) call,)5.133 F .071
(for each ready stream f, sfv)108 398.4 R .071(alue\(f\) returns a bit \
combination of SF_READ and SF_WRITE to tell which I/O)-.25 F .004
(mode is a)108 410.4 R -.25(va)-.2 G .003(ilable. If SF_READ is a).25 F
-.25(va)-.2 G .003
(ilable, an attempt to read a byte will not block. If SF_WRITE is a).25
F -.25(va)-.2 G(il-).25 E(able, an attempt to \215ush will not block.)
108 422.4 Q(sfpoll\(\) returns the number of ready streams or -1 on f)5
E(ailure.)-.1 E(\215ist and n:)108 439.2 Q .92
(\215ist is an array of n streams to be polled.)144 451.2 R .92
(Upon return, ready streams are mo)5.92 F -.15(ve)-.15 G 3.42(dt).15 G
3.42(ot)-3.42 G .92(he front of)-3.42 F(\215ist in the same relati)144
463.2 Q .3 -.15(ve o)-.25 H(rder).15 E(.)-.55 E(timeout:)108 480 Q .171
(This de\214nes an elapse time in milliseconds to w)144 492 R .171
(ait to see if an)-.1 F 2.67(ys)-.15 G .17(tream is ready for I/O.)-2.67
F .17(If timeout)5.17 F .713(is ne)144 504 R -.05(ga)-.15 G(ti).05 E
-.15(ve)-.25 G 3.213(,s).15 G .713
(fpoll\(\) will block until some stream become ready)-3.213 F 5.714(.N)
-.65 G .714(ote that SF_STRING and nor)-5.714 F(-)-.2 E 1.259
(mal \214le streams ne)144 516 R -.15(ve)-.25 G 3.759(rb).15 G 1.259
(lock and are al)-3.759 F -.1(wa)-.1 G 1.259(ys ready for I/O.).1 F
1.259(If a stream with discipline is being)6.259 F .505
(polled and its readiness is as yet undetermined \(e.g., empty b)144 528
R(uf)-.2 E(fer)-.25 E .505(,\) the discipline e)-.4 F .505
(xception func-)-.15 F(tion will be called with SF_DPOLL before queryin\
g the operating system.)144 540 Q F1(S\214o_t* sfpool\(S\214o_t* f)92
568.8 Q 2.5(,S)-.15 G(\214o_t* poolf)-2.5 E 2.5(,i)-.15 G(nt mode\))-2.5
E F0 .122(This function manipulates pools of streams.)108 580.8 R .122
(In a pool, only one stream is at the head and can ha)5.122 F .422 -.15
(ve b)-.2 H(uf)-.05 E(fered)-.25 E 2.769(data. All)108 592.8 R .269
(other streams in the pool will be synchronized.)2.769 F 2.77(As)5.269 G
.27(tream becomes head when it is used for some)-2.77 F(I/O operation.)
108 604.8 Q(sfpool\(\) returns NULL on f)5 E(ailure.)-.1 E 2.5(fa)108
621.6 S(nd poolf:)-2.5 E .406(If f is NULL, sfpool\(\) simply returns t\
he head of the pool containing poolf.)144 633.6 R .406
(If f is not NULL and)5.406 F .441
(poolf is NULL, f is deleted from its pool.)144 645.6 R .442
(In this case, if no other stream from the same pool can)5.441 F .355(b\
ecome head, sfpool\(\) will return NULL; otherwise, it returns some str\
eam from the remainder of)144 657.6 R .177(the pool.)144 669.6 R .177
(If both f and poolf are not NULL, f is mo)5.177 F -.15(ve)-.15 G 2.678
(df).15 G .178(rom its current pool \(if an)-2.678 F .178
(y\) into the same)-.15 F(pool with poolf.)144 681.6 Q
(In this case, poolf is returned.)5 E 8.5(mode: If)108 698.4 R .96
(poolf is already in a pool, mode is ignored.)3.46 F .959
(Otherwise, mode should be 0 or SF_SHARE.)5.959 F(A)5.959 E .587
(SF_SHARE pool contains streams with SF_WRITE mode.)144 710.4 R .587
(In addition, on change to a ne)5.587 F 3.088(wh)-.25 G(ead)-3.088 E
(stream, b)144 722.4 Q(uf)-.2 E
(fered write data of the current head is transferred to the ne)-.25 E
2.5(wh)-.25 G(ead.)-2.5 E(01 August 2001)274.055 768 Q(20)192.055 E EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10
/Times-Bold@0 SF(int sfpur)92 84 Q(ge\(S\214o_t* f\))-.1 E F0 1.188
(This function discards all b)108 96 R(uf)-.2 E 1.188
(fered data unless f is a SF_STRING stream.)-.25 F 1.187
(Note that if f is a SF_READ)6.188 F .167
(stream based on an unseekable de)108 108 R .167(vice, pur)-.25 F .168
(ged data will not be reco)-.18 F -.15(ve)-.15 G 2.668(rable. If).15 F
2.668(fi)2.668 G 2.668(sas)-2.668 G .168(fpopen-stream opened)-2.668 F
.565(for both read and write, data of both the read and write pipe ends\
 will be pur)108 120 R .564(ged \(see sfset\(\) to selecti)-.18 F -.15
(ve)-.25 G(ly).15 E .034(turn of)108 132 R 2.534(fr)-.25 G .034
(ead or write mode if one set of data is to be preserv)-2.534 F 2.534
(ed.\) After)-.15 F(pur)2.535 E .035(ging, if f has \215ag SF_IOCHECK,)
-.18 F(the e)108 144 Q -.15(ve)-.25 G(nt SF_PURGE is raised.).15 E
(sfpur)5 E(ge\(\) returns -1 for f)-.18 E(ailure and 0 for success.)-.1
E F1(DISCIPLINE, EVENT)87 177.6 Q(-HANDLING)-.92 E F0 2.832<418c>108
189.6 S .332(le stream uses the system calls read\(2\), write\(2\) and \
lseek\(2\) to read, write and position in the underly-)-2.832 F 3.254
(ing \214le.)108 201.6 R 3.254
(Disciplines enable application-de\214ned I/O methods including e)8.254
F 3.255(xception handling and data)-.15 F(pre/post-processing.)108 213.6
Q F1(Sfdisc_t* sfdisc\(S\214o_t* f)92 242.4 Q 2.5(,S)-.15 G
(fdisc_t* disc\))-2.5 E F0 .25(Each stream has a discipline stack whose\
 bottom is a virtual discipline representing the actual system calls.)
108 254.4 R 1.352
(sfdisc\(\) manipulates the discipline stack of stream f.)108 266.4 R
3.852(fw)6.352 G 1.352(ill be synchronized before an)-3.852 F 3.852(yd)
-.15 G 1.352(iscipline stack)-3.852 F 3.557(manipulation. After)108
278.4 R 3.556(as)3.557 G 1.056(uccessful discipline stack manipulation,\
 the stream I/O position \(see sfseek\(\) and)-3.556 F 2.5
(sftell\(\)\) and e)108 290.4 R 2.501(xtent \(see sfsize\(\)\) are upda\
ted to re\215ect that de\214ned by the top discipline.)-.15 F 2.501
(If disc is)7.501 F 1
(SF_POPDISC or \(Sfdisc_t*\)0, the top element of the stack, if an)108
302.4 R 2.3 -.65(y, i)-.15 H 3.5(sp).65 G 1
(opped and its address is returned.)-3.5 F .111
(Otherwise, disc is pushed onto the discipline stack.)108 314.4 R .111
(In this case, if successful, sfdisc\(\) returns the discipline)5.111 F
(that w)108 326.4 Q(as pushed do)-.1 E 2.5(wn. sfdisc\(\))-.25 F
(returns NULL on f)2.5 E(ailure.)-.1 E .192
(Note that a discipline can be used only on one stream at a time.)108
350.4 R .192(An application should tak)5.192 F 2.692(ec)-.1 G .192
(are to allocate)-2.692 F(dif)108 362.4 Q .782
(ferent discipline structures for use with dif)-.25 F .782
(ferent streams.)-.25 F 3.282(Ad)5.782 G .782
(iscipline structure is of the type Sfdisc_t)-3.282 F
(which contains the follo)108 374.4 Q(wing public \214elds:)-.25 E 5
(Sfread_f readf;)118 398.4 R 2.5(Sfwrite_f writef;)118 410.4 R 5
(Sfseek_f seekf;)118 422.4 R(Sfe)118 434.4 Q(xcept_f e)-.15 E(xceptf;)
-.15 E .778(The \214rst three \214elds of Sfdisc_t specify alternati)108
463.2 R 1.077 -.15(ve I)-.25 H .777(/O functions.).15 F .777(If an)5.777
F 3.277(yo)-.15 G 3.277(ft)-3.277 G .777(hem is NULL, it is inherited)
-3.277 F .446(from a discipline pushed earlier on the stack.)108 475.2 R
.446(Note that a \214le stream al)5.446 F -.1(wa)-.1 G .446
(ys has read\(2\), write\(2\), lseek\(2\)).1 F .243(and NIL\(Sfe)108
487.2 R .243(xcept_f\) as the)-.15 F/F2 10/Times-Italic@0 SF(lo)2.742 E
.242(gical bottom discipline)-.1 F F0 5.242(.A)C -.18(rg)-5.242 G .242
(uments to I/O discipline functions ha).18 F .542 -.15(ve t)-.2 H .242
(he same).15 F(meaning as that of the functions sfrd\(\), sfwr\(\) and \
sfsk\(\) described belo)108 499.2 Q -.65(w.)-.25 G 1.337(The e)108 516 R
1.337(xception function, \(*e)-.15 F 1.337(xceptf\)\(\) announces e)-.15
F 1.338(xceptional e)-.15 F -.15(ve)-.25 G 1.338
(nts during I/O operations.).15 F 1.338(It is called as)6.338 F(\(*e)108
528 Q .96(xceptf\)\(S\214o_t* f, int type, V)-.15 F .96(oid_t* v)-1.29 F
.96(alue, Sfdisc_t* disc\).)-.25 F .96
(Unless noted otherwise, the return v)5.96 F .96(alue of)-.25 F(\(*e)108
540 Q(xceptf\)\(\) is used as follo)-.15 E(ws:)-.25 E 20.08(<0: The)108
556.8 R(on-going operation shall terminate.)2.5 E 20.08(>0: If)108 573.6
R .436(the e)2.936 F -.15(ve)-.25 G .436(nt w).15 F .436
(as raised due to an I/O error)-.1 F 2.936(,t)-.4 G .436
(he error has been repaired and the on-going operation)-2.936 F .501
(shall continue normally)144 585.6 R 5.501(.F)-.65 G .501(or some e)
-5.651 F -.15(ve)-.25 G .501(nts, e.g., SF_DPOLL, the return v).15 F .5
(alue may also ha)-.25 F .8 -.15(ve a)-.2 H(ddi-).15 E(tional meanings.)
144 597.6 Q 20.08(=0: The)108 614.4 R .233
(on-going operation performs def)2.732 F .233
(ault actions with respect to the raised e)-.1 F -.15(ve)-.25 G 2.733
(nt. F).15 F .233(or e)-.15 F .233(xample, on)-.15 F 2.763(ar)144 626.4
S .263(eading error or reaching end of \214le, the top stream of a stac\
k will be popped and closed and the)-2.763 F
(on-going operation continue with the ne)144 638.4 Q 2.5(wt)-.25 G
(op stream.)-2.5 E(The ar)108 655.2 Q(gument type of \(*e)-.18 E
(xceptf\)\(\) identi\214es the particular e)-.15 E(xceptional e)-.15 E
-.15(ve)-.25 G(nt:).15 E(SF_LOCKED:)108 672 Q .437
(The stream cannot be accessed.)144 684 R .438
(Note that this lock state is not related to the mute)5.438 F 2.938(xl)
-.15 G .438(ock that pro-)-2.938 F 2.356
(tects a stream from multiple accesses by dif)144 696 R 2.356
(ferent threads \(see section THREAD SAFETY\).)-.25 F(Rather)144 708 Q
2.525(,t)-.4 G .025(he stream w)-2.525 F .025
(as frozen by certain operations such as sfreserv)-.1 F .026
(e\(\) or sfstack\(\).)-.15 F .026(Thus, a stream)5.026 F
(can be in this state e)144 720 Q -.15(ve)-.25 G 2.5(ni).15 G 2.5(ft)
-2.5 G(he application is uni-threaded.)-2.5 E(01 August 2001)274.055 768
Q(21)192.055 E EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R
(SF_READ, SF_WRITE:)108 84 Q(These e)144 96 Q -.15(ve)-.25 G
(nts are raised around reading and writing operations.).15 E 1.593(If S\
F_IOCHECK is on, SF_READ and SF_WRITE are raised immediately before rea\
d\(2\) and)144 120 R .904(write\(2\) calls.)144 132 R .904
(In this case, *\(\(ssize_t*\)v)5.904 F .904
(alue\) is the amount of data to be processed.)-.25 F .904(The return)
5.904 F -.25(va)144 144 S .054(lue of \(*e).25 F .054
(xceptf\)\(\), if ne)-.15 F -.05(ga)-.15 G(ti).05 E -.15(ve)-.25 G 2.554
(,i).15 G .053
(ndicates that the stream is not ready for I/O and the calling oper)
-2.554 F(-)-.2 E .383(ation will abort with f)144 156 R 2.883
(ailure. If)-.1 F .384(it is positi)2.883 F -.15(ve)-.25 G 2.884(,t).15
G .384(he stream is ready for I/O b)-2.884 F .384
(ut the amount should be)-.2 F .084
(restricted to the amount speci\214ed by this v)144 168 R 2.583
(alue. If)-.25 F .083(the return v)2.583 F .083
(alue is zero, the I/O operation is car)-.25 F(-)-.2 E
(ried out normally)144 180 Q(.)-.65 E .024
(SF_READ and SF_WRITE are also raised on operation f)144 204 R 2.525
(ailures. In)-.1 F .025(such a case, *\(\(ssize_t*\)v)2.525 F(alue\))
-.25 E(is the return v)144 216 Q(alue from the f)-.25 E
(ailed operation.)-.1 E(SF_SEEK:)108 232.8 Q(This e)144 244.8 Q -.15(ve)
-.25 G(nt is raised when a seek operation f).15 E(ails.)-.1 E(SF_NEW)108
261.6 Q 2.5(,S)-.92 G(F_CLOSING \(SF_CLOSE\), SF_FIN)-2.5 E(AL:)-.35 E
.006(These e)144 273.6 R -.15(ve)-.25 G .006
(nts are raised during a stream closing.).15 F .005
(SF_NEW is raised for a stream about to be closed)5.005 F .332
(to be rene)144 285.6 R .332(wed \(see sfne)-.25 F 2.832
(w\(\)\). SF_CLOSING)-.25 F .332
(is raised for a stream about to be closed.)2.832 F(SF_FIN)5.332 E(AL)
-.35 E .353(is raised after a stream has been closed and before its spa\
ce is to be destro)144 297.6 R .353(yed \(see sfclose\(\)\).)-.1 F -.15
(Fo)5.353 G(r).15 E .232(these e)144 309.6 R -.15(ve)-.25 G .232
(nts, a non-zero return v).15 F .232(alue from \(*e)-.25 F .233
(xceptf\)\(\) causes sfclose\(\) to return immediately with)-.15 F
(the same v)144 321.6 Q(alue.)-.25 E(SF_DPUSH, SF_DPOP)108 338.4 Q 2.5
(,S)-1.11 G(F_DB)-2.5 E(UFFER:)-.1 E(Ev)144 350.4 Q .708(ents SF_DPUSH \
and SF_DPOP are raised when a discipline is about to be pushed or poppe\
d.)-.15 F(\(Sfdisc_t*\)v)144 362.4 Q
(alue is the to-be top discipline, if an)-.25 E -.65(y.)-.15 G 3.416(As)
144 386.4 S .916(tream b)-3.416 F(uf)-.2 E .916(fer is al)-.25 F -.1(wa)
-.1 G .916(ys synchronized before pushing or popping a discipline.).1 F
.917(If this synchro-)5.917 F 1.019(nization f)144 398.4 R 1.019
(ails, SF_DB)-.1 F 1.018(UFFER will be raised with *\(\(size_t*\)v)-.1 F
1.018(alue\) being the amount of b)-.25 F(uf)-.2 E(fered)-.25 E 3.188
(data. If)144 410.4 R .688(the return v)3.188 F .689(alue of e)-.25 F
.689(xceptf is positi)-.15 F -.15(ve)-.25 G 3.189(,t).15 G .689
(he push or pop operation will continue normally;)-3.189 F
(otherwise, sfdisc\(\) returns f)144 422.4 Q(ailure.)-.1 E(SF_DPOLL:)108
439.2 Q .065(This e)144 451.2 R -.15(ve)-.25 G .065
(nt is raised by sfpoll\(\) to see if the stream is ready for I/O.).15 F
(*\(\(int*\)v)5.065 E .065(alue\) indicates a time-)-.25 F .402
(out interv)144 463.2 R .402(al to w)-.25 F 2.902(ait. A)-.1 F(ne)2.902
E -.05(ga)-.15 G(ti).05 E .702 -.15(ve r)-.25 H .402(eturn v).15 F .402
(alue from the e)-.25 F .402(xception function means blocking.)-.15 F
2.902(Az)5.402 G(ero)-2.902 E 1.819(return v)144 475.2 R 1.819(alue mea\
ns that sfpoll\(\) should query the underlying \214le descriptor)-.25 F
6.818(.A)-.55 G(positi)-2.5 E 2.118 -.15(ve r)-.25 H(eturn).15 E -.25
(va)144 487.2 S 1.616(lue means non-blocking. In addition, this v).25 F
1.617(alue will be a bit combination of SF_READ and)-.25 F
(SF_WRITE to indicate what I/O modes are ready)144 499.2 Q(.)-.65 E
(SF_READ)108 516 Q -.92(Y:)-.55 G .628(This e)144 528 R -.15(ve)-.25 G
.628(nt is raised by sfpoll\(\) for each ready stream.).15 F .628
(The third ar)5.628 F .627(gument to the e)-.18 F -.15(ve)-.25 G .627
(nt handler is).15 F .03(an inte)144 540 R .03(ger composed with the tw)
-.15 F 2.53(ob)-.1 G .03
(its SF_READ and SF_WRITE to indicate which I/O modes are)-2.53 F(ready)
144 552 Q(.)-.65 E(SF_SYNC, SF_PURGE:)108 568.8 Q 1.361
(If SF_IOCHECK is set, these e)144 580.8 R -.15(ve)-.25 G 1.361
(nts are raised respecti).15 F -.15(ve)-.25 G 1.36
(ly for a sfsync\(\) or sfpur).15 F 1.36(ge\(\) call.)-.18 F(In)6.36 E
.447(each case, the respecti)144 592.8 R .747 -.15(ve e)-.25 H -.15(ve)
-.1 G .447(nt is raised once before the appropriate operation \(synchro\
nization or).15 F(pur)144 604.8 Q .914(ging\) with \(\(int\)v)-.18 F
.913(alue\) being 1 and once after with \(\(int\)v)-.25 F .913
(alue\) being 0.)-.25 F .913(Note that sfsync\(\) is)5.913 F
(called for each SF_WRITE or SF_SHARE|SF_READ stream on closing.)144
616.8 Q(SF_A)108 645.6 Q(TEXIT)-1.11 E(:)-.5 E(This e)144 657.6 Q -.15
(ve)-.25 G(nt is raised for each open stream before the process e).15 E
(xits.)-.15 E/F1 10/Times-Bold@0 SF(int sfraise\(S\214o_t* f)92 686.4 Q
2.5(,i)-.15 G(nt type, V)-2.5 E(oid_t* data\))-1 E F0 .463
(This function calls all e)108 698.4 R .464
(xception handlers of stream f with the e)-.15 F -.15(ve)-.25 G .464
(nt type and associated data.).15 F .464(If an e)5.464 F(xcep-)-.15 E
1.906(tion handler returns a non-zero v)108 710.4 R 1.906
(alue, sfraise\(\) immediate returns the same v)-.25 F 4.405
(alue. Application-de\214ned)-.25 F -2.15 -.25(ev e)108 722.4 T 2.411
(nts should start from the v).25 F 2.411(alue SF_EVENT so as to a)-.25 F
-.2(vo)-.2 G 2.412(id confusion with system-de\214ned e).2 F -.15(ve)
-.25 G(nts,).15 E(01 August 2001)274.055 768 Q(22)192.055 E EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R
(sfraise\(\) returns 0 on success and -1 on f)108 84 Q(ailure.)-.1 E/F1
10/Times-Bold@0 SF(ssize_t sfrd\(S\214o_t* f)92 112.8 Q 2.5(,V)-.15 G
(oid_t* b)-3.5 E(uf)-.2 E 2.5(,s)-.15 G(ize_t n, Sfdisc_t* disc\))-2.5 E
(ssize_t sfwr\(S\214o_t* f)92 124.8 Q 2.5(,c)-.15 G(onst V)-2.5 E
(oid_t* b)-1 E(uf)-.2 E 2.5(,s)-.15 G(ize_t n, Sfdisc_t* disc\))-2.5 E
(Sf)92 136.8 Q(off_t sfsk\(S\214o_t* f)-.25 E 2.5(,S)-.15 G -.25(fo)-2.5
G(ff_t offset, int type, Sfdisc_t* disc\)).25 E F0 .954
(These functions pro)108 148.8 R .954
(vides safe methods for a discipline I/O function to in)-.15 F -.2(vo)
-.4 G 1.154 -.1(ke e).2 H .954(arlier discipline I/O func-).1 F .827
(tions and to properly handle e)108 160.8 R 3.327(xceptions. The)-.15 F
3.327(ys)-.15 G .827(hould not be used in an)-3.327 F 3.327(yo)-.15 G
.827(ther conte)-3.327 F 3.327(xt. sfrd\(\))-.15 F .828(and sfwr\(\))
3.327 F .724(return the number of bytes read or written.)108 172.8 R
.724(sfsk\(\) returns the ne)5.724 F 3.224(ws)-.25 G .724(eek position.)
-3.224 F .724(On error)5.724 F 3.224(,a)-.4 G .723(ll three func-)-3.224
F(tions return a ne)108 184.8 Q -.05(ga)-.15 G(ti).05 E .3 -.15(ve v)
-.25 H(alue which should be -1 or the v)-.1 E(alue returned by the e)
-.25 E(xception handler)-.15 E(.)-.55 E F1(STREAM CONTR)87 218.4 Q(OL)
-.3 E(int sfr)92 230.4 Q(esize\(S\214o_t* f)-.18 E 2.5(,S)-.15 G -.25
(fo)-2.5 G(ff_t size\)).25 E F0 .316
(This function resizes the stream fP so that its e)108 242.4 R .317
(xtent is size.)-.15 F .317
(If the stream corresponds to a \214le, the \214le size)5.317 F .166
(is set to size via the system call ftruncate\(\).)108 254.4 R .165
(When a stream is made lar)5.165 F(ger)-.18 E 2.665(,t)-.4 G .165(he ne)
-2.665 F 2.665(wd)-.25 G .165(ata space is \214lled with)-2.665 F(zero')
108 266.4 Q 2.5(s. sfresize\(\))-.55 F(returns 0 on success and a ne)2.5
E -.05(ga)-.15 G(ti).05 E .3 -.15(ve v)-.25 H(alue on f)-.1 E(ailure.)
-.1 E F1(int sfset\(S\214o_t* f)92 295.2 Q 2.5(,i)-.15 G
(nt \215ags, int set\))-2.5 E F0
(This function sets control \215ags for the stream f.)108 307.2 Q
(It returns the pre)5 E(vious set of \215ags or 0 on error)-.25 E(.)-.55
E 4.969(Settable \215ags are: SF_READ, SF_WRITE, SF_IOCHECK, SF_LINE, S\
F_SHARE, SF_PUBLIC,)108 331.2 R .652(SF_MALLOC and SF_ST)108 343.2 R
-1.11(AT)-.93 G 3.152(IC. Note)1.11 F .651
(that SF_READ and SF_WRITE can be turned on or of)3.152 F 3.151(fo)-.25
G .651(nly if the)-3.151 F 1.58(stream w)108 355.2 R 1.58
(as opened as SF_READ|SF_WRITE.)-.1 F -.45(Tu)6.58 G 1.58(rning of).45 F
4.081(fo)-.25 G 1.581(ne of them means that the stream is to be)-4.081 F
.053(treated e)108 367.2 R(xclusi)-.15 E -.15(ve)-.25 G .053
(ly in the other mode. It is not possible to turn of).15 F 2.552(fb)-.25
G 2.552(oth. If)-2.552 F(le)2.552 E -.05(ga)-.15 G .052
(l, an attempt to turn on either).05 F
(SF_READ or SF_WRITE will cause the stream to be in the gi)108 379.2 Q
-.15(ve)-.25 G 2.5(nI).15 G(/O mode.)-2.5 E(set == 0:)108 396 Q .246
(If \215ags is zero, the current set of \215ags is simply returned.)144
408 R .246(Note that when a stream is \214rst opened,)5.246 F .463
(not all of its \215ags are initialized yet \(more belo)144 420 R .463
(w\). If \215ags is non-zero, an attempt is made to turn)-.25 F(of)144
432 Q 2.5(ft)-.25 G(he speci\214ed \215ags.)-2.5 E(set != 0:)108 448.8 Q
.108(If \215ags is zero, the stream is initialized if not yet done so.)
144 460.8 R .109(Then the current set of \215ags is returned.)5.109 F(I\
f \215ags is non-zero, an attempt is made to turn on the speci\214ed \
\215ags.)144 472.8 Q F1(int sfsetfd\(S\214o_t* f)92 501.6 Q 2.5(,i)-.15
G(nt fd\))-2.5 E F0 .906
(This function changes the \214le descriptor of f.)108 513.6 R .906
(Before a change is realized, \(*notify\)\(f,SF_SETFD,ne)5.906 F(wfd\))
-.25 E(\(see sfnotify\(\)\) is called.)108 525.6 Q
(sfsetfd\(\) returns -1 on f)5 E(ailure and the ne)-.1 E 2.5<778c>-.25 G
(le descriptor on success.)-2.5 E(fd >= 0:)108 542.4 Q .908
(If the current \214le descriptor is non-ne)144 554.4 R -.05(ga)-.15 G
(ti).05 E -.15(ve)-.25 G 3.408(,i).15 G 3.408(tw)-3.408 G .908
(ill be changed using dup\(3\) to a v)-3.408 F .909(alue lar)-.25 F .909
(ger or)-.18 F .795(equal to fd.)144 566.4 R .795
(Upon a successful change, the pre)5.795 F .795
(vious \214le descriptor will be closed.)-.25 F .795(If the current)
5.795 F(\214le descriptor is ne)144 578.4 Q -.05(ga)-.15 G(ti).05 E -.15
(ve)-.25 G 2.5(,i).15 G 2.5(tw)-2.5 G
(ill be set to fd and the stream will be reinitialized.)-2.5 E(fd < 0:)
108 595.2 Q 1.106(The stream is synchronized \(see sfsync\(\)\) and its\
 \214le descriptor will be set to this v)9.25 F 3.607(alue. Then,)-.25 F
-.15(ex)144 607.2 S 1.971(cept for sfclose\(\), the stream will be inac\
cessible until a future sfsetfd\(\) call resets the \214le).15 F .062
(descriptor to a non-ne)144 619.2 R -.05(ga)-.15 G(ti).05 E .362 -.15
(ve v)-.25 H 2.562(alue. Thus,)-.1 F .063
(sfsetfd\(f,-1\) can be used to a)2.563 F -.2(vo)-.2 G .063
(id closing the \214le descrip-).2 F(tor of f when f is closed.)144
631.2 Q F1(S\214o_t* sfstack\(S\214o_t* base, S\214o_t* top\))92 660 Q
F0 .154(This function stacks or unstacks stream.)108 672 R(Ev)5.154 E
.154
(ery stream stack is identi\214ed by a base stream via which all I/O)
-.15 F 1.499(operations are performed.)108 684 R(Ho)6.499 E(we)-.25 E
-.15(ve)-.25 G 2.299 -.4(r, a).15 H 3.999(nI).4 G 1.499(/O operation al)
-3.999 F -.1(wa)-.1 G 1.499(ys tak).1 F 1.499(es ef)-.1 F 1.5
(fect on the top stream.)-.25 F 1.5(If the top)6.5 F .108
(stream reaches the end of \214le or has an unreco)108 696 R -.15(ve)
-.15 G .108
(rable error condition, it is automatically popped and closed).15 F
(\(see also sfdisc\(\) for alternati)108 708 Q .3 -.15(ve h)-.25 H
(andling of these conditions\).).15 E(01 August 2001)274.055 768 Q(23)
192.055 E EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R 12.95
(base: This)108 84 R(is the base stream of the stack.)2.5 E
(If it is NULL, sfstack\(\) does nothing and returns top.)5 E 17.94
(top: If)108 100.8 R 2.052(this is SF_POPST)4.552 F -.4(AC)-.93 G 4.553
(Ko).4 G 4.553(r\()-4.553 G 2.053
(S\214o_t*\)0, the stack is popped and sfstack\(\) returns the popped)
-4.553 F 3.417(stream. Otherwise,)144 112.8 R .917(top is pushed on top\
 of the stack identi\214ed by base and sfstack\(\) returns the)3.417 F
(base stream.)144 124.8 Q/F1 10/Times-Bold@0 SF
(S\214o_t* sfswap\(S\214o_t* f1, S\214o_t* f2\))92 153.6 Q F0 .844
(This function sw)108 165.6 R .844(aps contents of f1 and f2.)-.1 F .844
(This f)5.844 F .844(ails if either stream is in a stream stack b)-.1 F
.845(ut not being a)-.2 F 1.165(base stream.)108 177.6 R 1.165
(If f2 is NULL, a ne)6.165 F 3.665(ws)-.25 G 1.164
(tream is constructed as a duplicate of f1.)-3.665 F(sfsw)6.164 E 1.164
(ap\(\) returns f2 or f1)-.1 F(duplicate on success and NULL on f)108
189.6 Q(ailure.)-.1 E F1(STREAM INFORMA)87 223.2 Q(TION)-.95 E(Sf)92
235.2 Q(off_t sfsize\(S\214o_t* f\))-.25 E F0 .111
(This function returns the size of stream f \(see sfne)108 247.2 R 2.611
(w\(\)\). If)-.25 F 2.611(fi)2.611 G 2.612(sn)-2.611 G .112
(ot seekable or if its size is not determinable,)-2.612 F
(sfsize\(\) returns -1.)108 259.2 Q F1(Sf)92 288 Q
(off_t sftell\(S\214o_t* f\))-.25 E F0 .133
(This function returns the current I/O position in stream f.)108 300 R
.132(Note that if f is SF_APPEND and a writing oper)5.133 F(-)-.2 E
1.095(ation w)108 312 R 1.096
(as just performed, the current I/O position is at the ph)-.1 F 1.096
(ysical end of \214le.)-.05 F 1.096(If f is unseekable, sftell)6.096 F
(returns the number of bytes read from or written to f.)108 324 Q
(See also sfungetc\(\).)5 E F1(ssize_t sfv)92 352.8 Q
(alue\(S\214o_t* f\))-.1 E F0(This function returns the string or b)108
364.8 Q(uf)-.2 E(fer length for sfreserv)-.25 E(e\(\), sfsetb)-.15 E
(uf\(\), and sfgetr\(\).)-.2 E F1(int sf\214leno\(S\214o_t* f\))92 393.6
Q F0(This function returns the \214le descriptor of stream f.)108 405.6
Q F1(int sfstack)92 434.4 Q(ed\(S\214o_t* f\))-.1 E F0
(This function returns a non-zero v)108 446.4 Q
(alue if stream f has been stack)-.25 E(ed.)-.1 E F1
(int sfeof\(S\214o_t* f\))92 475.2 Q(int sferr)92 487.2 Q
(or\(S\214o_t* f\))-.18 E(int sfclr)92 499.2 Q(err\(S\214o_t* f\))-.18 E
F0 .238(sfeof\(\) tells whether or not the stream has an end-of-\214le \
condition.)108 511.2 R .237(sferror\(\) tells whether or not the stream)
5.238 F .049(has an error condition.)108 523.2 R .049
(sfclrerr\(\) clears both end-of-\214le and error conditions.)5.049 F
.05(The end-of-\214le and error con-)5.05 F
(ditions are also cleared on an I/O operation.)108 535.2 Q F1
(int sfclrlock\(S\214o_t* f\))92 564 Q F0 .491
(This function restores the stream back to a normal state.)108 576 R
.491(This means clearing locks and possibly thro)5.491 F(wing)-.25 E
-2.3 -.15(aw a)108 588 T 3.487(yu).15 G .987(nprocessed data.)-3.487 F
.988(As such, this operation is unsafe and should be used with care.)
5.987 F -.15(Fo)5.988 G 3.488(re).15 G .988(xample, it)-3.638 F 1.118(m\
ay be used before a long jump \(longjmp\(3\)\) out of some discipline I\
/O function to restore the internal)108 600 R(stream states.)108 612 Q
(sfclrlock\(\) returns the current set of \215ags.)5 E F1
(int sfnotify\(\(v)92 640.8 Q
(oid\(*\)notify\)\(S\214o_t*, int, int\) \))-.1 E F0 .545(This sets a f\
unction \(*notify\)\(\) to be called as \(*notify\)\(f,type,\214le\) on\
 v)108 652.8 R .546(arious stream e)-.25 F -.15(ve)-.25 G 3.046(nts. Ar)
.15 F .546(guments f)-.18 F
(and \214le are stream and related \214le descriptor)108 664.8 Q 5(.A)
-.55 G -.18(rg)-5 G(ument type indicates the reason for the call:).18 E
(SF_NEW)108 681.6 Q(:)-.37 E 2.5(fi)144 693.6 S 2.5(sb)-2.5 G
(eing opened and \214le is the underlying \214le descriptor)-2.5 E(.)
-.55 E(01 August 2001)274.055 768 Q(24)192.055 E EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R
(SF_CLOSING \(SF_CLOSE\):)108 84 Q 2.5(fa)144 96 S
(nd \214le are being closed.)-2.5 E(SF_SETFD:)108 112.8 Q(The \214le de\
scriptor of f is being changed to \214le \(see sfsetfd\(\).\))144 124.8
Q(SF_READ:)108 141.6 Q(An attempt to change f to read mode f)144 153.6 Q
(ailed.)-.1 E(SF_WRITE:)108 170.4 Q
(An attempt to change f to write mode f)144 182.4 Q(ailed.)-.1 E/F1 10
/Times-Bold@0 SF(MISCELLANEOUS FUNCTIONS)87 216 Q(ssize_t sfslen\(\))92
228 Q F0(This function returns the length of a string just constructed \
by sfsprintf\(\) or sfprints\(\).)108 240 Q(See also sfv)5 E(alue\(\).)
-.25 E F1(int sfulen\(Sfulong_t v\))92 268.8 Q
(int s\215len\(S\215ong_t v\))92 280.8 Q(int sfdlen\(Sfdouble_t v\))92
292.8 Q F0 .386(These functions return respecti)108 304.8 R -.15(ve)-.25
G .386(ly the number of bytes required to code the Sfulong_t, S\215ong_\
t or Sfdou-).15 F(ble_t v)108 316.8 Q
(alue v by sfputu\(\), sfputl\(\) or sfputd\(\).)-.25 E F1
(ssize_t sfpkrd\(int fd, char* b)92 345.6 Q(uf)-.2 E 2.5(,s)-.15 G
(ize_t n, int rsc, long tm, int action\))-2.5 E F0 .206
(This function acts directly on the \214le descriptor fd.)108 357.6 R
.207(It does a combination of peeking on incoming data and)5.207 F 2.849
(at)108 369.6 S .349(ime-out read.)-2.849 F .349
(Upon success, it returns the number of bytes recei)5.349 F -.15(ve)-.25
G 2.849(d. A).15 F .349(return v)2.849 F .349(alue of 0 means that the)
-.25 F(end-of-\214le condition has been detected.)108 381.6 Q 2.5(An)5 G
-2.25 -.15(eg a)-2.5 H(ti).15 E .3 -.15(ve v)-.25 H
(alue represents an error)-.1 E(.)-.55 E -.2(bu)108 398.4 S(f, n:).2 E
(These de\214ne a b)10.09 E(uf)-.2 E
(fer and its size to read data into.)-.25 E 19.06(rsc: If)108 415.2 R
(>=0, this de\214nes a record separator)2.5 E 5(.S)-.55 G
(ee action for detail.)-5 E 20.16(tm: If)108 432 R
(>=0, this de\214nes a time interv)2.5 E(al in milliseconds to w)-.25 E
(ait for incoming data.)-.1 E 6.28(action: When)108 448.8 R .975
(rsc >= 0, the absolute v)3.475 F .975(alue of action,)-.25 F/F2 10
/Times-Italic@0 SF(r)3.476 E F0 3.476(,d)C .976
(etermines the number of records to be read.)-3.476 F(If)5.976 E .791
(action > 0, sfpkrd\(\) will peek on incoming data b)144 460.8 R .791
(ut will not read past it. Therefore, a future sfp-)-.2 F .294
(krd\(\) or read\(2\) will see the same data ag)144 472.8 R 2.794
(ain. If)-.05 F .295(action == 0, sfpkrd\(\) will not peek.)2.794 F .295
(If action < 0,)5.295 F 1.043(there are tw)144 484.8 R 3.543(oc)-.1 G
1.043(ases: if rsc < 0, sfpkrd\(\) reads n bytes; otherwise, e)-3.543 F
(xactly)-.15 E F2(r)3.543 E F0 1.042(records will be read.)3.542 F .404
(Note that, in the last case, reading records from an unseekable de)144
496.8 R .404(vice may be slo)-.25 F 2.904(wi)-.25 G 2.905(ft)-2.904 G
.405(he underly-)-2.905 F(ing platform does not allo)144 508.8 Q 2.5(wp)
-.25 G(eeking on such a de)-2.5 E(vice.)-.25 E F1(FULL STR)87 542.4 Q
(UCTURE SFIO_T)-.3 E(#include <s\214o_t.h>)92 554.4 Q F0 1.133(Most app\
lications based on S\214o only need to include the header \214le s\214o\
.h which de\214nes an abbre)108 566.4 R(viated)-.25 E .754
(S\214o_t structure without certain \214elds pri)108 578.4 R -.25(va)
-.25 G .754(te to S\214o.).25 F(Ho)5.754 E(we)-.25 E -.15(ve)-.25 G
1.554 -.4(r, t).15 H .754(here are times \(e.g., deb).4 F .754
(ugging\) when an)-.2 F .719(application may require more details about\
 the full S\214o_t structure.)108 590.4 R .718
(In such cases, the header \214le s\214o_t.h)5.719 F .625
(can be used in place of s\214o.h.)108 602.4 R .626
(Note that an application doing this will become sensiti)5.626 F .926
-.15(ve t)-.25 H 3.126(oc).15 G .626(hanges in the)-3.126 F
(internal architecture of S\214o.)108 614.4 Q F1(#de\214ne SFNEW\(b)92
643.2 Q(uf)-.2 E(,size,\214le,\215ags,disc\))-.15 E F0 .904(This macro \
function is de\214ned in s\214o_t.h for use in static initialization of\
 an S\214o_t structure.)108 655.2 R .903(It requires)5.903 F<8c76>108
667.2 Q 2.5(ea)-.15 G -.18(rg)-2.5 G(uments:).18 E -.2(bu)108 684 S
(f, size:).2 E(These de\214ne a b)144 696 Q(uf)-.2 E(fer and its size.)
-.25 E(01 August 2001)274.055 768 Q(25)192.055 E EP
%%Page: 26 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R 17.94
(\214le: This)108 84 R(de\214nes the underlying \214le descriptor if an)
2.5 E -.65(y.)-.15 G 11.83(\215ags: This)108 100.8 R
(is composed from bit \215ags described abo)2.5 E -.15(ve)-.15 G(.).15 E
14.61(disc: This)108 117.6 R(de\214nes a discipline if an)2.5 E -.65(y.)
-.15 G/F1 10/Times-Bold@0 SF(EXAMPLE DISCIPLINES)87 151.2 Q F0 .192
(The belo)108 163.2 R 2.692(wf)-.25 G .192
(unctions create disciplines and insert them into the gi)-2.692 F -.15
(ve)-.25 G 2.692(ns).15 G .193(treams f. These functions return 0 on)
-2.692 F(success and -1 on f)108 175.2 Q(ailure.)-.1 E F1
(int sfdcdio\(S\214o_t* f)87 204 Q 2.5(,s)-.15 G(ize_t b)-2.5 E
(ufsize\))-.2 E F0 .089
(This creates a discipline that uses the direct IO feature a)108 216 R
-.25(va)-.2 G .088(ilable on \214le systems such as SGI').25 F 2.588(sX)
-.55 G .088(FS to speed)-2.588 F(up IO.)108 228 Q(The ar)5 E(gument b)
-.18 E(ufsize suggests a b)-.2 E(uf)-.2 E
(fer size to use for data transfer)-.25 E(.)-.55 E F1
(int sfdcdos\(S\214o_t* f\))87 256.8 Q F0
(This creates a discipline to read DOS te)108 268.8 Q(xt \214les.)-.15 E
(It basically transforms pairs of \\r\\n to \\n.)5 E F1
(int sfdc\214lter\(S\214o_t* f)87 297.6 Q 2.5(,c)-.15 G
(onst char* cmd\))-2.5 E F0 .569
(This creates a discipline that sends data from f to the gi)108 309.6 R
-.15(ve)-.25 G 3.069(nc).15 G .569
(ommand cmd to process, then reads back the)-3.069 F(processed data.)108
321.6 Q F1(int sfdclzw\(S\214o_t* f\))87 350.4 Q F0 1.16
(This creates a discipline that w)108 362.4 R 1.16
(ould decompress data in f.)-.1 F 1.159(The stream f should ha)6.159 F
1.459 -.15(ve d)-.2 H 1.159(ata from a source).15 F
(compressed by the Unix)108 374.4 Q F1(compr)2.5 E(ess)-.18 E F0
(program.)2.5 E F1(int sfdcseekable\(S\214o_t* f\))87 403.2 Q F0
(This creates a discipline that mak)108 415.2 Q
(es an unseekable reading stream seekable.)-.1 E F1(int sfdcslo)87 444 Q
(w\(S\214o_t* f\))-.1 E F0 .602(This creates a discipline that mak)108
456 R .603(es all S\214o operations return immediately on interrupts. T\
his is useful for)-.1 F(dealing with slo)108 468 Q 2.5(wd)-.25 G -.25
(ev)-2.5 G(ices.).25 E F1(int sfdcsubstr)87 496.8 Q(eam\(S\214o_t* f)
-.18 E 2.5(,S)-.15 G(\214o_t* par)-2.5 E(ent, Sf)-.18 E
(off_t offset, Sf)-.25 E(off_t extent\))-.25 E F0 .342
(This creates a discipline that mak)108 508.8 R .342
(es f acts as if it corresponds e)-.1 F .341
(xactly to the subsection of parent starting at)-.15 F(of)108 520.8 Q
(fset with size e)-.25 E(xtent.)-.15 E F1(int sfdctee\(S\214o_t* f)87
549.6 Q 2.5(,S)-.15 G(\214o_t* tee\))-2.5 E F0
(This creates a discipline that copies to the stream tee an)108 561.6 Q
2.5(yd)-.15 G(ata written to f.)-2.5 E F1(int sfdcunion\(S\214o_t* f)87
590.4 Q 2.5(,S)-.15 G(\214o_t** array)-2.5 E 2.5(,i)-.55 G(nt n\))-2.5 E
F0(This creates a discipline that mak)108 602.4 Q
(es f act as if it is the concatenation of the n streams gi)-.1 E -.15
(ve)-.25 G 2.5(ni).15 G 2.5(na)-2.5 G(rray)-2.5 E(.)-.65 E F1
(STDIO-COMP)87 636 Q -.95(AT)-.74 G(IBILITY).95 E F0 1.233(S\214o pro)
108 648 R 1.233(vides compatibility functions for all v)-.15 F 1.233
(arious popular Stdio implementations at source and binary)-.25 F(le)108
660 Q -.15(ve)-.25 G 2.978(l. The).15 F .478
(source Stdio-compatibility interf)2.978 F .478(ace pro)-.1 F .477
(vides the header \214le stdio.h that de\214nes a set of macros)-.15 F
1.418(or inlined functions to map Stdio calls to S\214o ones.)108 672 R
1.418(This mapping may benignly e)6.418 F 1.419(xtend or change the)-.15
F .314(meaning of certain original Stdio operations. F)108 684 R .313
(or e)-.15 F .313(xample, the S\214o')-.15 F 2.813(sv)-.55 G .313
(ersion of popen\(\) allo)-2.963 F .313(ws a coprocess)-.25 F 1.461
(to be opened for both reading and writing unlik)108 696 R 3.961(et)-.1
G 1.461(he original call which only allo)-3.961 F 1.461
(ws a coprocess to be)-.25 F .32(opened for a single mode.)108 708 R
(Similarly)5.32 E 2.82(,t)-.65 G .32(he S\214o')-2.82 F 2.82(sf)-.55 G
.32(open\(\) call can be used to create string streams in addition)-2.82
F .071(to \214le streams.)108 720 R .071(The standard streams stdin, st\
dout and stderr are mapped via #de\214ne to sfstdin, sfstdout and)5.071
F(01 August 2001)274.055 768 Q(26)192.055 E EP
%%Page: 27 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R(sfstderr)108
84 Q 5.194(.T)-.55 G .194
(he latter are typically declared of the type S\214o_t*.)-5.194 F .193
(Certain older Stdio applications require these)5.193 F .867(to be decl\
ared as addresses of structures so that static initializations of the s\
ort `)108 96 R(`FILE* f = stdin;')-.74 E 3.367('w)-.74 G(ould)-3.467 E
-.1(wo)108 108 S 2.629(rk. Such).1 F .129
(applications should use the compile time \215ag SF_FILE_STR)2.629 F
.128(UCT to achie)-.4 F .428 -.15(ve t)-.25 H .128(he desired ef).15 F
(fect.)-.25 E .605(The binary Stdio-compatibility libraries, libstdio.a\
 and libstdio-mt.a, pro)108 124.8 R .605
(vide complete implementations of)-.15 F .744(Stdio functions suitable \
for linking applications already compiled with nati)108 136.8 R 1.044
-.15(ve h)-.25 H .744(eader stdio.h.).15 F .743(These func-)5.743 F
(tions are also slightly altered or e)108 148.8 Q
(xtended as discussed abo)-.15 E -.15(ve)-.15 G(.).15 E(Belo)108 165.6 Q
2.5(wa)-.25 G(re the supported Stdio functions:)-2.5 E 2.5
(FILE* fopen\(const)108 182.4 R(char* \214le, const char* mode\);)2.5 E
2.5(FILE* freopen\(const)108 194.4 R
(char* \214le, const char* mode, FILE* stream\);)2.5 E 2.5
(FILE* fdopen\(int)108 206.4 R(\214ledesc, const char* mode\);)2.5 E 2.5
(FILE* popen\(const)108 218.4 R(char* command, const char* mode\);)2.5 E
2.5(FILE* tmp\214le\(\);)108 230.4 R 7.5(int fclose\(FILE*)108 242.4 R
(stream\);)2.5 E 7.5(int pclose\(FILE*)108 254.4 R(stream\);)2.5 E -.2
(vo)108 278.4 S 5(id \215ock\214le\(FILE*).2 F(stream\))2.5 E 7.5
(int ftrylock\214le\(FILE*)108 290.4 R(stream\))2.5 E -.2(vo)108 302.4 S
5(id funlock\214le\(FILE*).2 F(stream\))2.5 E -.2(vo)108 326.4 S 5
(id setb).2 F(uf\(FILE* stream, char* b)-.2 E(uf\);)-.2 E 7.5(int setvb)
108 338.4 R(uf\(FILE* stream, char* b)-.2 E
(uf, int mode, size_t size\);)-.2 E -.2(vo)108 350.4 S 5(id setb).2 F
(uf)-.2 E(fer\(FILE* stream, char* b)-.25 E(uf, size_t size\);)-.2 E 7.5
(int setlineb)108 362.4 R(uf\(FILE* stream\);)-.2 E 7.5(int f)108 374.4
R(\215ush\(FILE* stream\);)-.25 E 7.5(int fpur)108 386.4 R
(ge\(FILE* stream\);)-.18 E 7.5(int fseek\(FILE*)108 410.4 R
(stream, long of)2.5 E(fset, int whence\);)-.25 E -.2(vo)108 422.4 S 5
(id re).2 F(wind\(FILE* stream\);)-.25 E 7.5(int fgetpos\(FILE*)108
434.4 R(stream, fpos_t* pos\);)2.5 E 7.5(int fsetpos\(FILE*)108 446.4 R
(stream, fpos_t* pos\);)2.5 E 5(long ftell\(FILE*)108 458.4 R(stream\);)
2.5 E 7.5(int getc\(FILE*)108 482.4 R(stream\);)2.5 E 7.5
(int fgetc\(FILE*)108 494.4 R(stream\);)2.5 E 7.5(int getchar\(v)108
506.4 R(oid\);)-.2 E 7.5(int ungetc\(int)108 518.4 R(c, FILE* stream\);)
2.5 E 7.5(int getw\(FILE*)108 530.4 R(stream\);)2.5 E 2.5
(char* gets\(char*)108 542.4 R(s\);)2.5 E 2.5(char* fgets\(char*)108
554.4 R(s, int n, FILE* stream\);)2.5 E(size_t fread\(V)108 566.4 Q
(oid_t* ptr)-1.29 E 2.5(,s)-.4 G
(ize_t size, size_t nelt, FILE* stream\);)-2.5 E 7.5(int putc\(int)108
590.4 R(c, FILE* stream\);)2.5 E 7.5(int fputc\(int)108 602.4 R
(c, FILE* stream\);)2.5 E 7.5(int putchar\(int)108 614.4 R(c\);)2.5 E
7.5(int putw\(int)108 626.4 R 1.3 -.65(w, F)2.5 H(ILE* stream\);).65 E
7.5(int puts\(const)108 638.4 R(char* s, FILE* stream\);)2.5 E 7.5
(int fputs\(const)108 650.4 R(char* s, FILE* stream\);)2.5 E
(size_t fwrite\(const V)108 662.4 Q(oid_t* ptr)-1.29 E 2.5(,s)-.4 G
(ize_t size, size_t nelt, FILE* stream\);)-2.5 E 7.5(int fscanf\(FILE*)
108 686.4 R(stream, const char* format, ...\);)2.5 E 7.5
(int vfscanf\(FILE*)108 698.4 R(stream, const char* format, v)2.5 E
(a_list ar)-.25 E(gs\);)-.18 E 7.5(int _doscan\(FILE*)108 710.4 R
(stream, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18 E 7.5
(int scanf\(const)108 722.4 R(char* format, ...\);)2.5 E(01 August 2001)
274.055 768 Q(27)192.055 E EP
%%Page: 28 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R 7.5
(int vscanf\(const)108 84 R(char* format, v)2.5 E(a_list ar)-.25 E
(gs\);)-.18 E 7.5(int sscanf\(const)108 96 R
(char* s, const char* format, ...\);)2.5 E 7.5(int vsscanf\(const)108
108 R(char* s, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18 E
7.5(int fprintf\(FILE*)108 132 R(stream, const char* format, ...\);)2.5
E 7.5(int vfprintf\(FILE*)108 144 R(stream, const char* format, v)2.5 E
(a_list ar)-.25 E(gs\);)-.18 E 7.5(int _doprnt\(FILE*)108 156 R
(stream, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18 E 7.5
(int printf\(const)108 168 R(char* format, ...\);)2.5 E 7.5
(int vprintf\(const)108 180 R(char* format, v)2.5 E(a_list ar)-.25 E
(gs\);)-.18 E 7.5(int sprintf\(const)108 192 R
(char* s, const char* format, ...\);)2.5 E 7.5(int snprintf\(const)108
204 R(char* s, int n, const char* format, ...\);)2.5 E 7.5
(int vsprintf\(const)108 216 R(char* s, const char* format, v)2.5 E
(a_list ar)-.25 E(gs\);)-.18 E 7.5(int vsnprintf\(const)108 228 R
(char* s, int n, const char* format, v)2.5 E(a_list ar)-.25 E(gs\);)-.18
E 7.5(int feof\(FILE*)108 252 R(stream\);)2.5 E 7.5(int ferror\(FILE*)
108 264 R(stream\);)2.5 E 7.5(int clearerr\(FILE*)108 276 R(stream\);)
2.5 E/F1 10/Times-Bold@0 SF(RECENT CHANGES)87 309.6 Q F0 2.559(Af)108
321.6 S .559 -.25(ew e)-2.559 H .059(xception types ha).1 F .359 -.15
(ve b)-.2 H .059(een added. In particular).15 F 2.559(,e)-.4 G .06
(xception handlers shall be raised with SF_LOCKED)-2.709 F .27
(on accessing a stream frozen either by an ongoing operation or a pre)
108 333.6 R .269(vious operation \(e.g., sfgetr\(\)\).)-.25 F(Before)
5.269 E 2.5(ap)108 345.6 S(rocess e)-2.5 E(xits, the e)-.15 E -.15(ve)
-.25 G(nt SF_A).15 E(TEXIT is raised for each open stream.)-1.11 E 2.61
(An)108 362.4 S .11(umber of disciplines were added for v)-2.61 F .111
(arious processing functions.)-.25 F .111
(Of interests are disciplines to use the)5.111 F
(direct I/O feature on IRIX6.2, read DOS te)108 374.4 Q
(xt \214les, and decompress \214les compressed by Unix)-.15 E/F2 10
/Times-Italic@0 SF(compr)2.5 E(ess)-.37 E F0(.)A -1.11(Va)108 391.2 S
.316(rious ne)1.11 F 2.816(ws)-.25 G .316(tream and function \215ags ha)
-2.816 F .615 -.15(ve b)-.2 H .315(een added. F).15 F .315(or e)-.15 F
.315(xample, the third ar)-.15 F .315(gument of sfgetr\(\) is no)-.18 F
(w)-.25 E 2.677(as)108 403.2 S .177
(et of bit \215ags and not just a three-v)-2.677 F .177(alue object. Ho)
-.25 F(we)-.25 E -.15(ve)-.25 G .978 -.4(r, t).15 H .178
(he old semantics of this ar).4 F .178(gument of sfgetr\(\) is)-.18 F
(still supported.)108 415.2 Q .803(The sfopen\(\) call has been e)108
432 R .803(xtended so that sfopen\(f,NULL,mode\) can be used to changed\
 the mode of a)-.15 F(\214le stream before an)108 444 Q 2.5(yI)-.15 G
(/O operations.)-2.5 E
(This is most useful for changing the modes of the standard streams.)5 E
1.756(The b)108 460.8 R(uf)-.2 E 1.757(fering strate)-.25 F 1.757
(gy has been signi\214cantly enhanced for streams that perform man)-.15
F 4.257(ys)-.15 G 1.757(eek operations.)-4.257 F .501
(Also, the handling of stream and \214le positions ha)108 472.8 R .801
-.15(ve b)-.2 H .5
(een better clari\214ed so that applications that share \214le).15 F(de\
scriptors across streams and/or processes can be sure that the \214le s\
tates will be consistent.)108 484.8 Q .241(The strate)108 501.6 R .242(\
gy for mapping between S\214o and Stdio streams in the binary compatibi\
lity package has been sig-)-.15 F(ni\214cantly enhanced for ef)108 513.6
Q(\214cienc)-.25 E 3.8 -.65(y. F)-.15 H
(or most platforms, the mapping is no).5 E 2.5(wc)-.25 G
(onstant time per look-up.)-2.5 E(The SF_B)108 530.4 Q(UFCONST \215ag w)
-.1 E(as deleted. This is lar)-.1 E(gely unused an)-.18 E(yw)-.15 E(ay)
-.1 E(.)-.65 E(The library is no)108 547.2 Q 2.5(wt)-.25 G
(hread-safe. This is based lar)-2.5 E(gely on Posix pthread mute)-.18 E
-.15(xe)-.15 G(s.).15 E(The functions sfgetm\(\) and sfputm\(\) were ad\
ded to encode unsigned inte)108 564 Q(ger v)-.15 E(alues with kno)-.25 E
(wn ranges.)-.25 E .648(The \215ag SF_APPEND is identical to SF_APPEND)
108 580.8 R 3.147(WR. Ho)-.3 F(we)-.25 E -.15(ve)-.25 G 3.147(ri).15 G
3.147(tc)-3.147 G .647(on\215icts with a dif)-3.147 F .647(ferent tok)
-.25 F .647(en of the)-.1 F 1.541
(same name de\214ned in the system header stat.h of BSDI Unix systems.)
108 592.8 R 1.542(On such systems, we shall not)6.541 F
(de\214ne SF_APPEND and this symbol may be remo)108 604.8 Q -.15(ve)-.15
G 2.5(di).15 G 2.5(naf)-2.5 G(uture release.)-2.5 E(Similarly)108 621.6
Q 3.769(,t)-.65 G 1.269(he e)-3.769 F 1.269
(xception SF_CLOSE is identical to SF_CLOSING.)-.15 F(Ho)6.268 E(we)-.25
E -.15(ve)-.25 G 3.768(ri).15 G 3.768(tc)-3.768 G 1.268
(on\215icts with a dif)-3.768 F(ferent)-.25 E(tok)108 633.6 Q .341
(en of the same name de\214ned in the system header sock)-.1 F .342
(et.h of AIX Unix systems.)-.1 F .342(On such systems, we)5.342 F
(shall not de\214ne SF_CLOSE and this symbol may be remo)108 645.6 Q
-.15(ve)-.15 G 2.5(di).15 G 2.5(naf)-2.5 G(uture release.)-2.5 E 1.019
(The printing and scanning functions were e)108 662.4 R 1.018
(xtended to handle multibyte characters and to conform to the)-.15 F
(C99 standard.)108 674.4 Q .011(The function sfpoll\(\) w)108 691.2 R
.011(as rehauled to mak)-.1 F 2.511(ei)-.1 G 2.511(tu)-2.511 G .011
(seful for writing serv)-2.511 F .012
(ers that must commnunicate with multi-)-.15 F
(ple streams without blocking.)108 703.2 Q(01 August 2001)274.055 768 Q
(28)192.055 E EP
%%Page: 29 29
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 398.84(SFIO\(3\) SFIO\(3\))72 48 R/F1 10.95
/Times-Bold@0 SF -.548(AU)72 84 S(THORS).548 E F0(Kiem-Phong V)108 96 Q
(o, kpv@research.att.com,)-1.29 E(Da)108 108 Q(vid G. K)-.2 E
(orn, dgk@research.att.com, and)-.35 E(Glenn S. F)108 120 Q -.25(ow)-.15
G(ler).25 E 2.5(,g)-.4 G(sf@research.att.com.)-2.5 E(01 August 2001)
274.055 768 Q(29)192.055 E EP
%%Trailer
end
%%EOF
