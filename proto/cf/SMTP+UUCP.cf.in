#!@MAILBIN@/router -dkf
#
# ZMailer 2 configuration file for a generic SMTP host (with UUCP links)
#

#| The location of the program configuration information for ZMailer
#| programs cannot be discovered or parameterized.  This defines the
#| location.

ZCONFIG=@ZMAILERCFGFILE@

#| Then immediately load the ``environment variables'' from that file.
. $ZCONFIG

#| The MAILSHARE/cf directory is in the PATH so we can include
#| configuration files without specifying an absolute pathname.
#| The MAILBIN/bin directory is the conventional location for auxiliary
#| programs.

PATH=$MAILSHARE/cf:$MAILBIN/bin ; export PATH

#| Lets interactive users know this is not exactly a /bin/sh.

PS1=z$PS1

#|
#| Configure error logging (squirrel)
#|
squirrel -breakin
squirrel badheader

#| The list of protocols given here are exactly the list that will be
#| supported in the configuration being loaded, and in the specified
#| priority sequence.  These names are used to find and load the
#| appropriate i-<name>.cf and p-<name>.cf files.  Routing will be
#| checked using <name>_neighbour functions called in sequence.  The
#| valid names are: routes, smtp, uucp, bitnet, ean, usenet.
#|
#| The transport preference order
#| This is a LIST of protocols

protocols=('routes' 'smtp' 'uucp')

#| Will the  MAILVAR/lists/listname  show out sender identity as
# either:  owner-listname, or:  listname-owner ?

if true ; then # Change to "false" to get "pre-owner" mode
	preowner=""
	postowner="-owner"
else
	preowner="owner-"
	postowner=""
fi

# Does our "local" channel accept domain (@) at the user part ?
# ZMailer's mailbox does accept.  If you use something else, and
# it doesn't accept, comment this away!

localdoesdomain=1


# Set following to "1", if you want to do duplicate address
# elimination at the message level instead of per address.

loop_prev_per_message=0


#| This variable is used in the alias expansion (in the routeuser
#| function) to determine how to use the privilege level associated with
#| an address.  By default, any file read due to processing of an address
#| must be readable by the privilege (a user id) associated with the
#| address.  This means, for example, that $HOME/.forward files and
#| mailing list files must be world readable (and home directories world
#| executable) to be used by mail coming in from outside the machine.
#| Circumventing this is a decrease in the information ``security'' of
#| your mail setup, but may by some be considered an increase in the
#| ``privacy'' of files on your system.  If you want files to be private
#| and secure, the only way is to authenticate the query originator (who
#| is asking) before you release any information, including expanding a
#| private mail alias.
#|
#| We may want .forward and mailing list files to be private, i.e., we ignore
#| the current privileges when checking the privileges of such files.
#| Don't add 'include' to this list, since anyone can :include: any file.
#| This is a LIST of keywords

private=('.forward' 'maillist')

#| Set up the dependency checking
#|
#| The consist.cf file defines two functions, provide and require, that
#| can be used to declare and check dependencies between modules
#| (configuration files).

. consist.cf

#| The modules we require here are the configuration files whose contents
#| are essential to the proper functioning of the router.

require siteinfo rrouter crossbar process server

#| The following are standard setup files and must be loaded in this order
#|
#| This file sets up logging, some standard databases, and defines the
#| router shell function.  See the description of standard.cf for more
#| information.

. standard.cf

#| The default set of user ids trusted to forge mail is defined in the
#| router C code configuration file.  This set is kept in the "trusted"
#| incore database, and can be modified at runtime.  Any desired
#| modifications to the list of trusted ids are done now when including
#| trusted.cf.

. trusted.cf

#| Load the databases so they and the variables defined (e.g. network-specific
#| node names for this host) can be used in the site specific configuration.
#|
#| Having a i-<name>.cf file is optional for any particular <name> from
#| the list in the "protocols" variable.  If one exists it will be loaded
#| here.  By convention, these files should only contain relation
#| (database) definitions or definitions of functions that are used like
#| a relation would be.  This is to avoid introducing cross-dependencies
#| between the various files that make it necessary to load them in a
#| particular order.  It is likely that the organizational setup, loaded
#| next, will use some of the databases referred to in the i-<name>.cf
#| files.

for method in $(elements $protocols)
do
	test -f "$MAILSHARE/cf/i-${method}.cf" && . i-${method}.cf
done

#| Following included configuration files define how to route, alias expand,
#| and rewrite addresses.  They use other manipulation functions that are
#| specific to the varius message transfer protocols.

. aliases.cf
. canon.cf
. rrouter.cf
. crossbar.cf

#| Such functions are usually defined in the p-*.cf files.

for method in $(elements $protocols)
do
	. p-${method}.cf
done

#| The process.cf file contains the toplevel protocol multiplexor
#| function.  It defines that numeric file names in the router directory
#| should be parsed and processed as RFC822 format messages.

. process.cf

#| The server.cf file contains the functions used by the smtpserver
#| program to do synchronous address verification, if enabled.

. server.cf


#| Now we try to autoconfigure our host setup, if possible...
#| We prefer having   $MAILVAR/mail.conf   !

mailconf () {
	local hname

	# My official hostname
	if [ -f /bin/hostname ]; then
		rawhostname=$(/bin/hostname)
	elif [ -f /etc/sys_id ]; then
		read rawhostname < /etc/sys_id
	else
		rawhostname=$(/bin/uname -n)
	fi

	hname=$(canon $rawhostname)

	# Try to discover the organizational domain name
	orgdomain=$hname
	tsift $hname in
	$rawhostname\.(.+)
		orgdomain=\1
		;;
	tfist
	hostname=$hname

	# This is what it will say on out mail
	mydomain=$hostname
}

orgdomains=x
: ${MAILCONF:=$MAILVAR/mail.conf}
if [ ! -r $MAILCONF ]; then
	echo "$0: missing $MAILCONF: using the following values:"
	mailconf
	echo orgdomain=$orgdomain
	echo hostname=$hostname
	echo mydomain=$mydomain
	provide siteinfo
else
	. $MAILCONF && provide siteinfo
fi
[ "$orgdomains" = x ] && orgdomains=$orgdomain

# set hostname to enable message-id generation and checking
hostname $hostname


#| With everything now loaded, we can do host-specific function (re)definition.
#|
#| This illustrates how to set up general access controls.  If an
#| instance (a sender - recipient pair) should be intercepted, a list is
#| returned containing a predefined function and an appropriate
#| parameter.  Otherwise this function should fail.  This is a simple way
#| of providing various forms of access control.

#intercept (address) {
#	case "$(smtp_useratdomain "$address")" in
#	*@host1*)	returns (file /var/scr/host1) ;;
#	*@host2*)	returns (file /var/scr/host2) ;;
#       *@host3*)	returns (drop) ;;
#	*@host4*)	returns (file /var/scr/host4) ;;
#	bitftp*@*)	returns (error bounce) ;;
#	esac
#
#	return 1
#}



#| The final command checks that we have "provide"d everything that has
#| been "require"d.

consist || exit 1

